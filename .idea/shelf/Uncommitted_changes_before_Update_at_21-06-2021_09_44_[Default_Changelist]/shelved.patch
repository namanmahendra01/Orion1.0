Index: app/src/main/java/com/orion/orion/chat/MessagesActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.orion.orion.chat;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.appcompat.app.AppCompatActivity;\r\nimport androidx.recyclerview.widget.RecyclerView;\r\n\r\nimport android.content.Context;\r\nimport android.content.Intent;\r\nimport android.content.SharedPreferences;\r\nimport android.os.Bundle;\r\nimport android.util.Log;\r\nimport android.view.Menu;\r\nimport android.view.MenuItem;\r\nimport android.widget.TextView;\r\n\r\nimport com.google.firebase.auth.FirebaseAuth;\r\nimport com.google.firebase.auth.FirebaseUser;\r\nimport com.google.firebase.database.DataSnapshot;\r\nimport com.google.firebase.database.DatabaseError;\r\nimport com.google.firebase.database.DatabaseReference;\r\nimport com.google.firebase.database.FirebaseDatabase;\r\nimport com.google.firebase.database.ValueEventListener;\r\nimport com.ittianyu.bottomnavigationviewex.BottomNavigationViewEx;\r\nimport com.orion.orion.Adapters.AdaterChatList;\r\nimport com.orion.orion.R;\r\nimport com.orion.orion.login.LoginActivity;\r\nimport com.orion.orion.models.Chat;\r\nimport com.orion.orion.util.BottomNaavigationViewHelper;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.Collections;\r\nimport java.util.List;\r\n\r\npublic class MessagesActivity extends AppCompatActivity {\r\n\r\n\r\n    private static final String TAG = \"ChatActivity\";\r\n    private static final int ACTIVITY_NUM = 1;\r\n    private Context mContext;\r\n\r\n\r\n    //firebase\r\n    private FirebaseAuth mAuth;\r\n    private FirebaseAuth.AuthStateListener mAuthListener;\r\n    private DatabaseReference myRef;\r\n    private FirebaseUser mUser;\r\n    private int mResults;\r\n    private FirebaseDatabase mFirebaseDatabase;\r\n    private FirebaseUser currentUser;\r\n\r\n    private  int x=0;\r\n    private TextView request;\r\n    private RecyclerView recyclerView;\r\n    private List<Chat> chatList;\r\n    private List<String> userlist;\r\n    private List<String> userlist2;\r\n    private List<String> paginateduserList;\r\n    private AdaterChatList adaterChatList;\r\n\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        setContentView(R.layout.activity_messages);\r\n        mContext = MessagesActivity.this;\r\n        recyclerView = findViewById(R.id.recyclerview);\r\n        request = findViewById(R.id.msgRequest);\r\n        mAuth = FirebaseAuth.getInstance();\r\n        currentUser = mAuth.getCurrentUser();\r\n        setupBottomNavigationView();\r\n\r\n        recyclerView.addOnScrollListener(new RecyclerView.OnScrollListener() {\r\n            @Override\r\n            public void onScrollStateChanged(RecyclerView recyclerView, int newState) {\r\n                super.onScrollStateChanged(recyclerView, newState);\r\n                if (!recyclerView.canScrollVertically(1) && newState == RecyclerView.SCROLL_STATE_IDLE)\r\n                    displayMoreChatList();\r\n            }\r\n        });\r\n        myRef = FirebaseDatabase.getInstance().getReference(getString(R.string.dbname_request)).child(getString(R.string.dbname_Chats)).child(FirebaseAuth.getInstance().getCurrentUser().getUid());\r\n        myRef.addValueEventListener(new ValueEventListener() {\r\n            @Override\r\n            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {\r\n                if (dataSnapshot.exists())\r\n                    request.setText(\"Requests(\" + String.valueOf((int) dataSnapshot.getChildrenCount()) + \")\");\r\n                else request.setText(\"Requests(\" + String.valueOf(0) + \")\");\r\n            }\r\n\r\n            @Override\r\n            public void onCancelled(@NonNull DatabaseError databaseError) {\r\n\r\n            }\r\n        });\r\n        request.setOnClickListener(v -> {\r\n            Intent i = new Intent(mContext, Message_Request.class);\r\n            startActivity(i);\r\n        });\r\n        setupFirebaseAuth();\r\n        getUserList();\r\n    }\r\n\r\n    private void getUserList() {\r\n        userlist = new ArrayList<>();\r\n        myRef = FirebaseDatabase.getInstance().getReference(getString(R.string.dbname_Chats)).child(FirebaseAuth.getInstance().getCurrentUser().getUid());\r\n        myRef.addListenerForSingleValueEvent(new ValueEventListener() {\r\n            @Override\r\n            public void onDataChange(@NonNull DataSnapshot snapshot) {\r\n                userlist.clear();\r\n                for (DataSnapshot snapshot1 : snapshot.getChildren()) {\r\n                    String user = snapshot1.getValue().toString();\r\n                    userlist.add(user);\r\n                }\r\n                loadChats(userlist);\r\n            }\r\n\r\n            @Override\r\n            public void onCancelled(@NonNull DatabaseError error) {\r\n\r\n            }\r\n        });\r\n\r\n    }\r\n\r\n    private void loadChats(List<String> userlist) {\r\n        chatList = new ArrayList<>();\r\n        final int[] x = {0};\r\n        if(userlist.size()!=0) {\r\n            for (int i = 0; i < userlist.size(); i++) {\r\n                DatabaseReference db = FirebaseDatabase.getInstance().getReference(getString(R.string.dbname_ChatList));\r\n                int finalI = i;\r\n                db.child(userlist.get(i)).orderByKey().limitToLast(1).addValueEventListener(new ValueEventListener() {\r\n                    @Override\r\n                    public void onDataChange(@NonNull DataSnapshot snapshot) {\r\n                        for (DataSnapshot dataSnapshot1 : snapshot.getChildren()) {\r\n                            ArrayList<Chat> chats= new ArrayList<>(chatList);\r\n                            Chat c2=dataSnapshot1.getValue(Chat.class);\r\n                            if (chatList.size()!=0) {\r\n                                for (Chat c : chats) {\r\n                                    if (c.getSid().equals(c2.getSid())) {\r\n                                        chatList.remove(c);\r\n                                        chatList.add(c2);\r\n                                        break;\r\n\r\n\r\n                                    } else if(!c.getSid().equals(c2.getSid())&&!c.getMid().equals(c2.getMid())){\r\n\r\n                                        chatList.add(c2);\r\n                                        break;\r\n\r\n                                    }\r\n                                }\r\n                            }else{\r\n\r\n                                chatList.add(c2);\r\n\r\n                            }\r\n\r\n\r\n                        }\r\n                        sortChatList(chatList, userlist);\r\n                        Log.d(TAG, \"onDataChange: chat size1\" + chatList.size());\r\n\r\n                    }\r\n\r\n                    @Override\r\n                    public void onCancelled(@NonNull DatabaseError error) {\r\n\r\n                    }\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    private void sortChatList(List<Chat> chatList, List<String> userlist) {\r\n        userlist2 = new ArrayList<>();\r\n        Collections.sort(chatList, (o1, o2) -> o2.getTim().compareTo(o1.getTim()));\r\n        for (int i = 0; i < chatList.size(); i++)\r\n            if (chatList.get(i).getSid().equals(FirebaseAuth.getInstance().getCurrentUser().getUid()))\r\n                this.userlist2.add(chatList.get(i).getRid());\r\n            else this.userlist2.add(chatList.get(i).getSid());\r\n        adaterChatList = new AdaterChatList(mContext, this.userlist2);\r\n        for (int i = 0; i < userlist2.size(); i++) lastMessage(userlist2.get(i));\r\n        displayChatList();\r\n    }\r\n\r\n\r\n    private void lastMessage(String uid) {\r\n        DatabaseReference refer1 = FirebaseDatabase.getInstance()\r\n                .getReference(getString(R.string.dbname_Chats));\r\n        refer1.child(FirebaseAuth.getInstance()\r\n                .getCurrentUser().getUid())\r\n                .child(uid)\r\n                .addListenerForSingleValueEvent(new ValueEventListener() {\r\n                    @Override\r\n                    public void onDataChange(@NonNull DataSnapshot snapshot) {\r\n                        DatabaseReference refer = FirebaseDatabase.getInstance().getReference(getString(R.string.dbname_ChatList));\r\n                        refer.child(snapshot.getValue().toString())\r\n                                .orderByKey()\r\n                                .limitToLast(1)\r\n                                .addListenerForSingleValueEvent(new ValueEventListener() {\r\n                                    @Override\r\n                                    public void onDataChange(@NonNull DataSnapshot dataSnapshot) {\r\n                                        String lmsg = \"default\";\r\n                                        for (DataSnapshot ds : dataSnapshot.getChildren())\r\n                                            if (ds.exists()) {\r\n                                                Chat chat = ds.getValue(Chat.class);\r\n                                                lmsg = chat.getMsg();\r\n                                            }\r\n                                        adaterChatList.setLastMessage(uid, lmsg);\r\n                                        adaterChatList.notifyDataSetChanged();\r\n                                    }\r\n                                    @Override\r\n                                    public void onCancelled(@NonNull DatabaseError databaseError) {\r\n\r\n                                    }\r\n                                });\r\n                    }\r\n\r\n                    @Override\r\n                    public void onCancelled(@NonNull DatabaseError error) {\r\n\r\n                    }\r\n                });\r\n\r\n    }\r\n\r\n    private void displayChatList() {\r\n        Log.d(TAG, \"display first 10 chatslist\");\r\n\r\n        paginateduserList = new ArrayList<>();\r\n        if (userlist2 != null) {\r\n            try {\r\n                int iteration = userlist2.size();\r\n                if (iteration > 10) iteration = 10;\r\n                mResults = 10;\r\n                for (int i = 0; i < iteration; i++) paginateduserList.add(userlist2.get(i));\r\n                Log.d(TAG, \"chatslist: sss\" + paginateduserList.size());\r\n                adaterChatList = new AdaterChatList(mContext, paginateduserList);\r\n                adaterChatList.setHasStableIds(true);\r\n                recyclerView.setAdapter(adaterChatList);\r\n                x++;\r\n            } catch (NullPointerException e) {\r\n                Log.e(TAG, \"Null pointer exception\" + e.getMessage());\r\n            } catch (IndexOutOfBoundsException e) {\r\n                Log.e(TAG, \"index out of bound\" + e.getMessage());\r\n            }\r\n        }\r\n    }\r\n\r\n    public void displayMoreChatList() {\r\n        Log.d(TAG, \"display next 20 chatslist\");\r\n        try {\r\n            if (userlist2.size() > mResults && userlist2.size() > 0) {\r\n                int iterations;\r\n                if (userlist2.size() > (mResults + 20)) {\r\n                    Log.d(TAG, \"display next 20 chatslist\");\r\n                    iterations = 20;\r\n                } else {\r\n                    Log.d(TAG, \"display less tha 20 chatslist\");\r\n                    iterations = userlist2.size() - mResults;\r\n                }\r\n                for (int i = mResults; i < mResults + iterations; i++)\r\n                    paginateduserList.add(userlist2.get(i));\r\n                recyclerView.post(() -> adaterChatList.notifyItemRangeInserted(mResults, iterations));\r\n                mResults = mResults + iterations;\r\n            }\r\n        } catch (NullPointerException e) {\r\n            Log.e(TAG, \"Null pointer exception\" + e.getMessage());\r\n\r\n        } catch (IndexOutOfBoundsException e) {\r\n            Log.e(TAG, \"index out of bound\" + e.getMessage());\r\n        }\r\n    }\r\n\r\n    private void setupFirebaseAuth() {\r\n        Log.d(TAG, \"setup FirebaseAuth: setting up firebase auth.\");\r\n        mAuth = FirebaseAuth.getInstance();\r\n        mAuthListener = firebaseAuth -> {\r\n            mUser = firebaseAuth.getCurrentUser();\r\n            if (mUser == null) {\r\n                Log.d(TAG, \"onAuthStateChanged:signed_out\");\r\n                Log.d(TAG, \"onAuthStateChanged: navigating to login\");\r\n                SharedPreferences settings = getSharedPreferences(\"shared preferences\", Context.MODE_PRIVATE);\r\n                new android.app.AlertDialog.Builder(mContext)\r\n                        .setTitle(\"No user logon found\")\r\n                        .setMessage(\"We will be logging u out. \\n Please try to log in again\")\r\n                        .setPositiveButton(android.R.string.ok, (dialog, which) -> {\r\n                            Intent intent = new Intent(mContext, LoginActivity.class);\r\n                            intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_CLEAR_TASK | Intent.FLAG_ACTIVITY_CLEAR_TOP);\r\n                            settings.edit().clear().apply();\r\n                            if (mAuthListener != null) mAuth.removeAuthStateListener(mAuthListener);\r\n                            startActivity(intent);\r\n                        })\r\n                        .show();\r\n            } else Log.d(TAG, \"onAuthStateChanged: signed_in:\" + mUser.getUid());\r\n        };\r\n    }\r\n\r\n    private void setupBottomNavigationView() {\r\n        Log.d(TAG, \" setupBottomNavigationView:setting up BottomNavigationView\");\r\n        BottomNavigationViewEx bottomNavigationViewEx = findViewById(R.id.BottomNavViewBar);\r\n        BottomNaavigationViewHelper.setupBottomNavigationView(bottomNavigationViewEx, this);\r\n        BottomNaavigationViewHelper.enableNavigation(MessagesActivity.this, this, bottomNavigationViewEx);\r\n        Menu menu = bottomNavigationViewEx.getMenu();\r\n        MenuItem menuItem = menu.getItem(ACTIVITY_NUM);\r\n        menuItem.setChecked(true);\r\n    }\r\n\r\n    @Override\r\n    public void onStart() {\r\n        super.onStart();\r\n        mAuth.addAuthStateListener(mAuthListener);\r\n    }\r\n\r\n    @Override\r\n    public void onStop() {\r\n        super.onStop();\r\n        if (mAuthListener != null) mAuth.removeAuthStateListener(mAuthListener);\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/orion/orion/chat/MessagesActivity.java	(revision cf7597ca1ff027f96fc145e942172638654ff2b2)
+++ app/src/main/java/com/orion/orion/chat/MessagesActivity.java	(date 1623647160491)
@@ -8,10 +8,12 @@
 import android.content.Intent;
 import android.content.SharedPreferences;
 import android.os.Bundle;
+import android.os.Handler;
 import android.util.Log;
 import android.view.Menu;
 import android.view.MenuItem;
 import android.widget.TextView;
+import android.widget.Toast;
 
 import com.google.firebase.auth.FirebaseAuth;
 import com.google.firebase.auth.FirebaseUser;
@@ -316,4 +318,24 @@
         super.onStop();
         if (mAuthListener != null) mAuth.removeAuthStateListener(mAuthListener);
     }
+    private Boolean exit = false;
+
+    @Override
+    public void onBackPressed() {
+        if (exit) {
+            moveTaskToBack(true); // finish activity
+        } else {
+            Toast.makeText(this, "Press Back again to Exit.",
+                    Toast.LENGTH_SHORT).show();
+            exit = true;
+            new Handler().postDelayed(new Runnable() {
+                @Override
+                public void run() {
+                    exit = false;
+                }
+            }, 2 * 1000);
+
+        }
+
+    }
 }
\ No newline at end of file
Index: app/src/main/res/layout/activity_created.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<RelativeLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\r\n    android:layout_width=\"match_parent\"\r\n    xmlns:fab=\"http://schemas.android.com/tools\"\r\n    android:background=\"@color/white\"\r\n    android:layout_height=\"match_parent\"\r\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\">\r\n\r\n    <include layout=\"@layout/snippet_top_bar\"\r\n        android:id=\"@+id/topB\"/>\r\n    <androidx.swiperefreshlayout.widget.SwipeRefreshLayout\r\n        android:layout_width=\"match_parent\"\r\n        android:layout_height=\"wrap_content\"\r\n        android:layout_below=\"@+id/topB\"\r\n        android:id=\"@+id/contest_refresh\">\r\n        <RelativeLayout\r\n            android:layout_width=\"match_parent\"\r\n            android:layout_height=\"match_parent\">\r\n\r\n\r\n            <androidx.recyclerview.widget.RecyclerView\r\n                android:layout_width=\"match_parent\"\r\n                android:layout_height=\"wrap_content\"\r\n                android:id=\"@+id/recycler_view3\">\r\n\r\n            </androidx.recyclerview.widget.RecyclerView>\r\n            <ProgressBar\r\n                android:id=\"@+id/pro2\"\r\n                style=\"?android:attr/progressBarStyle\"\r\n                android:layout_width=\"25dp\"\r\n                android:layout_height=\"25dp\"\r\n                android:layout_alignParentBottom=\"true\"\r\n                android:layout_centerHorizontal=\"true\"\r\n                android:background=\"@android:color/transparent\"\r\n                android:visibility=\"visible\" />\r\n\r\n        </RelativeLayout>\r\n    </androidx.swiperefreshlayout.widget.SwipeRefreshLayout>\r\n    <com.github.clans.fab.FloatingActionMenu\r\n        android:id=\"@+id/menu\"\r\n        android:layout_width=\"wrap_content\"\r\n        android:layout_height=\"wrap_content\"\r\n        android:layout_alignParentBottom=\"true\"\r\n        android:layout_alignParentEnd=\"true\"\r\n        android:layout_marginRight=\"10dp\"\r\n        android:layout_marginBottom=\"10dp\"\r\n        android:layout_marginLeft=\"10dp\"\r\n        fab:menu_fab_size=\"normal\"\r\n        app:menu_colorNormal=\"@color/colorPrimary\"\r\n        fab:menu_showShadow=\"true\"\r\n        fab:menu_shadowColor=\"#66000000\"\r\n        fab:menu_shadowRadius=\"4dp\"\r\n        fab:menu_shadowXOffset=\"1dp\"\r\n        fab:menu_shadowYOffset=\"3dp\"\r\n        fab:menu_colorPressed=\"#E75043\"\r\n        fab:menu_colorRipple=\"#99000000\"\r\n        fab:menu_animationDelayPerItem=\"50\"\r\n        fab:menu_icon=\"@drawable/fab_add\"\r\n        fab:menu_buttonSpacing=\"0dp\"\r\n        fab:menu_labels_margin=\"0dp\"\r\n        fab:menu_labels_showAnimation=\"@anim/fab_slide_in_from_right\"\r\n        fab:menu_labels_hideAnimation=\"@anim/fab_slide_out_to_right\"\r\n        fab:menu_labels_paddingTop=\"4dp\"\r\n        fab:menu_labels_paddingRight=\"8dp\"\r\n        fab:menu_labels_paddingBottom=\"4dp\"\r\n        fab:menu_labels_paddingLeft=\"8dp\"\r\n        fab:menu_labels_padding=\"8dp\"\r\n        fab:menu_labels_textColor=\"#000000\"\r\n        fab:menu_labels_textSize=\"14sp\"\r\n        fab:menu_labels_cornerRadius=\"3dp\"\r\n        fab:menu_labels_colorNormal=\"#333333\"\r\n        fab:menu_labels_colorPressed=\"#444444\"\r\n        fab:menu_labels_colorRipple=\"#66FFFFFF\"\r\n        fab:menu_labels_showShadow=\"true\"\r\n        fab:menu_labels_singleLine=\"false\"\r\n        fab:menu_labels_ellipsize=\"none\"\r\n        fab:menu_labels_maxLines=\"-1\"\r\n        fab:menu_labels_position=\"left\"\r\n        fab:menu_openDirection=\"up\"\r\n        fab:menu_backgroundColor=\"#706D6D\"\r\n        app:menu_fab_label=\"Select Event Type\"\r\n        fab:menu_fab_show_animation=\"@anim/my_show_animation\"\r\n        fab:menu_fab_hide_animation=\"@anim/my_hide_animation\">\r\n\r\n        <com.github.clans.fab.FloatingActionButton\r\n            android:id=\"@+id/menu_item\"\r\n            android:layout_width=\"wrap_content\"\r\n            android:layout_height=\"wrap_content\"\r\n            android:src=\"@drawable/ic_onlineevent\"\r\n            app:fab_colorNormal=\"@color/colorPrimary\"\r\n            fab:fab_size=\"mini\"\r\n            app:fab_label=\"Online Event\\nLike organizing online photography,singing contests,etc\" />\r\n\r\n        <com.github.clans.fab.FloatingActionButton\r\n            android:id=\"@+id/menu_item2\"\r\n            android:layout_width=\"wrap_content\"\r\n            android:layout_height=\"wrap_content\"\r\n            android:src=\"@drawable/ic_offline_event\"\r\n            app:fab_colorNormal=\"@color/colorPrimary\"\r\n            fab:fab_size=\"mini\"\r\n            app:fab_label=\"Offline Event\\nLike organizing gaming contest,cricket match,etc\" />\r\n        <com.github.clans.fab.FloatingActionButton\r\n            android:id=\"@+id/menu_item3\"\r\n            android:layout_width=\"wrap_content\"\r\n            android:layout_height=\"wrap_content\"\r\n            android:src=\"@drawable/ic_quizevent__1_\"\r\n            fab:fab_size=\"mini\"\r\n            app:fab_colorNormal=\"@color/colorPrimary\"\r\n            app:fab_label=\"Quiz\\nFor organizing online quiz\" />\r\n    </com.github.clans.fab.FloatingActionMenu>\r\n    <TextView\r\n        android:layout_width=\"wrap_content\"\r\n        android:layout_height=\"wrap_content\"\r\n        android:text=\"NO CONTEST CREATED\"\r\n        android:id=\"@+id/noPost\"\r\n        android:visibility=\"gone\"\r\n        android:gravity=\"center\"\r\n        android:layout_centerHorizontal=\"true\"\r\n        android:layout_centerVertical=\"true\"\r\n        android:textSize=\"18sp\"/>\r\n</RelativeLayout>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/res/layout/activity_created.xml	(revision cf7597ca1ff027f96fc145e942172638654ff2b2)
+++ app/src/main/res/layout/activity_created.xml	(date 1623646691604)
@@ -89,7 +89,7 @@
             android:src="@drawable/ic_onlineevent"
             app:fab_colorNormal="@color/colorPrimary"
             fab:fab_size="mini"
-            app:fab_label="Online Event\nLike organizing online photography,singing contests,etc" />
+            app:fab_label="Online Event" />
 
         <com.github.clans.fab.FloatingActionButton
             android:id="@+id/menu_item2"
@@ -98,7 +98,7 @@
             android:src="@drawable/ic_offline_event"
             app:fab_colorNormal="@color/colorPrimary"
             fab:fab_size="mini"
-            app:fab_label="Offline Event\nLike organizing gaming contest,cricket match,etc" />
+            app:fab_label="Offline Event" />
         <com.github.clans.fab.FloatingActionButton
             android:id="@+id/menu_item3"
             android:layout_width="wrap_content"
@@ -106,7 +106,7 @@
             android:src="@drawable/ic_quizevent__1_"
             fab:fab_size="mini"
             app:fab_colorNormal="@color/colorPrimary"
-            app:fab_label="Quiz\nFor organizing online quiz" />
+            app:fab_label="Quiz" />
     </com.github.clans.fab.FloatingActionMenu>
     <TextView
         android:layout_width="wrap_content"
Index: app/src/main/java/com/orion/orion/contest/create/CreatedActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.orion.orion.contest.create;\r\n\r\nimport androidx.annotation.Nullable;\r\nimport androidx.appcompat.app.AppCompatActivity;\r\nimport android.content.Context;\r\nimport android.content.Intent;\r\nimport android.content.SharedPreferences;\r\nimport android.os.Build;\r\nimport android.os.Bundle;\r\nimport android.os.Handler;\r\nimport android.os.Looper;\r\nimport android.util.Log;\r\nimport android.view.LayoutInflater;\r\nimport android.view.View;\r\nimport android.view.ViewGroup;\r\nimport android.widget.ImageView;\r\nimport android.widget.ProgressBar;\r\nimport android.widget.TextView;\r\nimport android.widget.Toast;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.annotation.Nullable;\r\nimport androidx.annotation.RequiresApi;\r\nimport androidx.fragment.app.Fragment;\r\nimport androidx.recyclerview.widget.LinearLayoutManager;\r\nimport androidx.recyclerview.widget.RecyclerView;\r\nimport androidx.swiperefreshlayout.widget.SwipeRefreshLayout;\r\n\r\nimport com.github.clans.fab.FloatingActionButton;\r\nimport com.github.clans.fab.FloatingActionMenu;\r\nimport com.google.firebase.auth.FirebaseAuth;\r\nimport com.google.firebase.database.DataSnapshot;\r\nimport com.google.firebase.database.DatabaseError;\r\nimport com.google.firebase.database.DatabaseReference;\r\nimport com.google.firebase.database.FirebaseDatabase;\r\nimport com.google.firebase.database.ValueEventListener;\r\nimport com.google.gson.Gson;\r\nimport com.google.gson.reflect.TypeToken;\r\nimport com.orion.orion.Adapters.AdapterContestCreated;\r\nimport com.orion.orion.R;\r\nimport com.orion.orion.contest.upcoming.UpcomingContestActivity;\r\n\r\nimport java.lang.reflect.Type;\r\nimport java.util.ArrayList;\r\nimport java.util.Collections;\r\n\r\npublic class CreatedActivity extends AppCompatActivity {\r\n    private static final String TAG = \"JOINED FRAGMENT\";\r\n    RecyclerView createdContestRv;\r\n    //    FloatingActionButton floatbtn;\r\n    private ArrayList<com.orion.orion.models.CreateForm> contestlist;\r\n    private ArrayList<com.orion.orion.models.CreateForm> paginatedContestlist;\r\n    private int mResults;\r\n    private AdapterContestCreated contestCreated;\r\n    ProgressBar bottomProgress;\r\n    FloatingActionMenu floatMenuBtn;\r\n    FloatingActionButton floatingActionButton1, floatingActionButton2, floatingActionButton3;\r\n\r\n\r\n    TextView noPost;\r\n    SwipeRefreshLayout contestRefresh;\r\n    boolean flag1 = false;\r\n    private static int RETRY_DURATION = 1000;\r\n    private static final Handler handler = new Handler(Looper.getMainLooper());\r\n    ImageView backArrrow;\r\n    //    SP\r\n    private Gson gson;\r\n    private SharedPreferences sp;\r\n\r\n\r\n\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        setContentView(R.layout.activity_created);\r\n\r\n\r\n//        floatbtn = findViewById(R.id.float_btn);\r\n        contestRefresh=findViewById(R.id.contest_refresh);\r\n        noPost=findViewById(R.id.noPost);\r\n        bottomProgress=findViewById(R.id.pro2);\r\n        createdContestRv = findViewById(R.id.recycler_view3);\r\n        backArrrow= findViewById(R.id.backarrow);\r\n        floatMenuBtn= findViewById(R.id.menu);\r\n        floatingActionButton1= findViewById(R.id.menu_item);\r\n        floatingActionButton2= findViewById(R.id.menu_item2);\r\n        floatingActionButton3= findViewById(R.id.menu_item3);\r\n\r\n\r\n        floatingActionButton1.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n                Intent i = new Intent(CreatedActivity.this, CreateForm.class);\r\n                startActivity(i);\r\n            }\r\n        });\r\n        floatingActionButton2.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n                Intent i = new Intent(CreatedActivity.this, CreateForm.class);\r\n                startActivity(i);\r\n            }\r\n        });\r\n        floatingActionButton3.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n                Intent i = new Intent(CreatedActivity.this, CreateForm.class);\r\n                startActivity(i);\r\n            }\r\n        });\r\n        backArrrow.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n                onBackPressed();\r\n            }\r\n        });\r\n        LinearLayoutManager linearLayoutManager = new LinearLayoutManager(this);\r\n        contestlist = new ArrayList<>();\r\n\r\n        linearLayoutManager.setItemPrefetchEnabled(true);\r\n        linearLayoutManager.setInitialPrefetchItemCount(20);\r\n        createdContestRv.setHasFixedSize(true);\r\n        createdContestRv.setItemViewCacheSize(10);\r\n        createdContestRv.setDrawingCacheEnabled(true);\r\n        createdContestRv.setDrawingCacheQuality(View.DRAWING_CACHE_QUALITY_LOW);\r\n        createdContestRv.setLayoutManager(linearLayoutManager);\r\n//\r\n//        floatbtn.setOnClickListener(v -> {\r\n//            Intent i = new Intent(CreatedActivity.this, CreateForm.class);\r\n//            startActivity(i);\r\n//        });\r\n        createdContestRv.addOnScrollListener(new RecyclerView.OnScrollListener() {\r\n            @Override\r\n            public void onScrollStateChanged(RecyclerView recyclerView, int newState) {\r\n                super.onScrollStateChanged(recyclerView, newState);\r\n                if (!recyclerView.canScrollVertically(1) && newState == RecyclerView.SCROLL_STATE_IDLE) {\r\n                    if (contestlist.size()!=paginatedContestlist.size())\r\n                        bottomProgress.setVisibility(View.VISIBLE);\r\n                    displayMoreContest();\r\n                }else bottomProgress.setVisibility(View.GONE);\r\n            }\r\n        });\r\n        contestRefresh.setOnRefreshListener(new SwipeRefreshLayout.OnRefreshListener() {\r\n            @Override\r\n            public void onRefresh() {\r\n                flag1 = false;\r\n                getCreateListFromSP();\r\n                checkRefresh();\r\n            }\r\n            private void checkRefresh() {\r\n                if (contestRefresh.isRefreshing() && flag1 ) {\r\n                    contestRefresh.setRefreshing(false);\r\n                    handler.removeCallbacks(this::checkRefresh);\r\n                    flag1 = false;\r\n                } else handler.postDelayed(this::checkRefresh, RETRY_DURATION);\r\n            }\r\n        });\r\n        sp = getSharedPreferences(\"shared preferences\", Context.MODE_PRIVATE);\r\n        gson = new Gson();\r\n        getCreateListFromSP();\r\n    }\r\n    private void getContest() {\r\n\r\n\r\n        DatabaseReference reference = FirebaseDatabase.getInstance().getReference();\r\n        reference.child(getString(R.string.dbname_contests))\r\n                .child(FirebaseAuth.getInstance().getCurrentUser().getUid())\r\n                .child(getString(R.string.created_contest))\r\n                .addValueEventListener(new ValueEventListener() {\r\n                    @Override\r\n                    public void onDataChange(@NonNull DataSnapshot dataSnapshot) {\r\n                        if (dataSnapshot.exists()) {\r\n                            contestlist.clear();\r\n                            for (DataSnapshot snapshot : dataSnapshot.getChildren()) {\r\n\r\n                                com.orion.orion.models.CreateForm createForm = snapshot.getValue(com.orion.orion.models.CreateForm.class);\r\n\r\n                                contestlist.add(createForm);\r\n                            }\r\n                            Collections.reverse(contestlist);\r\n\r\n//                        Add newly Created ArrayList to Shared Preferences\r\n                            SharedPreferences.Editor editor = sp.edit();\r\n                            String json = gson.toJson(contestlist);\r\n                            editor.putString(\"createlist\", json);\r\n                            editor.apply();\r\n\r\n                            displaycontest();\r\n\r\n                        }else{\r\n                            displaycontest();\r\n\r\n                        }\r\n                    }\r\n\r\n\r\n                    @Override\r\n                    public void onCancelled(@NonNull DatabaseError databaseError) {\r\n\r\n                    }\r\n                });\r\n    }\r\n    //  fetching FollowerList  from SharedPreferences\r\n    private void getCreateListFromSP() {\r\n        String json = sp.getString(\"createlist\", null);\r\n\r\n        Type type = new TypeToken<ArrayList<com.orion.orion.models.CreateForm>>() {\r\n        }.getType();\r\n        contestlist = gson.fromJson(json, type);\r\n        if (contestlist == null) {    //        if no arrayList is present\r\n            contestlist = new ArrayList<>();\r\n            Log.d(TAG, \"getCreateListFromSP: 1\");\r\n            getContest();             //            make new Arraylist\r\n\r\n        } else {\r\n            Log.d(TAG, \"getCreateListFromSP: 2\");\r\n\r\n            checkCreateUpdate();       //         Check if new contest is there\r\n\r\n        }\r\n\r\n    }\r\n\r\n    private void checkCreateUpdate() {\r\n        DatabaseReference refer = FirebaseDatabase.getInstance().getReference(getString(R.string.dbname_contests));\r\n\r\n        refer.child(FirebaseAuth.getInstance().getCurrentUser().getUid())\r\n                .child(getString(R.string.field_contest_created_updates))\r\n                .addListenerForSingleValueEvent(new ValueEventListener() {\r\n                    @Override\r\n                    public void onDataChange(@NonNull DataSnapshot snapshot) {\r\n                        if (snapshot.exists()){\r\n                            int x=0;\r\n\r\n                            for (DataSnapshot snapshot1:snapshot.getChildren()){\r\n                                x++;\r\n                                for (com.orion.orion.models.CreateForm a:contestlist){\r\n\r\n\r\n                                    if (a.getCi().equals(snapshot1.getKey())){\r\n\r\n                                        a.setSt(snapshot1.getValue().toString());\r\n                                    }\r\n\r\n                                    if (x==snapshot.getChildrenCount()){\r\n                                        //    Add newly Created ArrayList to Shared Preferences\r\n                                        SharedPreferences.Editor editor = sp.edit();\r\n                                        String json = gson.toJson(contestlist);\r\n                                        editor.putString(\"createlist\", json);\r\n                                        editor.apply();\r\n\r\n                                        refer.child(FirebaseAuth.getInstance().getCurrentUser().getUid())\r\n                                                .child(getString(R.string.field_contest_created_updates))\r\n                                                .removeValue();\r\n\r\n                                        checkNewContesUpdate();\r\n                                    }\r\n\r\n                                }\r\n\r\n\r\n\r\n\r\n                            }\r\n                        }else {\r\n                            checkNewContesUpdate();\r\n\r\n                        }\r\n                    }\r\n\r\n                    @Override\r\n                    public void onCancelled(@NonNull DatabaseError error) {\r\n\r\n                    }\r\n                });\r\n    }\r\n\r\n    private void checkNewContesUpdate() {\r\n        DatabaseReference refer = FirebaseDatabase.getInstance().getReference(getString(R.string.dbname_contests));\r\n        refer.child(FirebaseAuth.getInstance().getCurrentUser().getUid())\r\n                .child(getString(R.string.created_contest))\r\n                .addListenerForSingleValueEvent(new ValueEventListener() {\r\n                    @Override\r\n                    public void onDataChange(@NonNull DataSnapshot snapshot) {\r\n                        if (snapshot.exists()) {\r\n                            if (snapshot.getChildrenCount() != contestlist.size()) {\r\n                                updateCreateList();\r\n\r\n                            } else {\r\n                                refer.child(FirebaseAuth.getInstance().getCurrentUser().getUid())\r\n                                        .child(getString(R.string.created_contest))\r\n                                        .orderByKey()\r\n                                        .limitToLast(1)\r\n                                        .addListenerForSingleValueEvent(new ValueEventListener() {\r\n                                            @Override\r\n                                            public void onDataChange(@NonNull DataSnapshot snapshot) {\r\n                                                if (snapshot.exists()) {\r\n                                                    for (DataSnapshot snapshot1 : snapshot.getChildren()) {\r\n                                                        if (contestlist.get(0).getCi().equals(snapshot1.getKey())) {\r\n                                                            displaycontest();\r\n                                                        } else {\r\n                                                            updateCreateList();\r\n                                                        }\r\n                                                    }\r\n                                                }\r\n                                            }\r\n\r\n                                            @Override\r\n                                            public void onCancelled(@NonNull DatabaseError error) {\r\n\r\n                                            }\r\n                                        });\r\n                            }\r\n                        }else{\r\n                            displaycontest();\r\n                        }\r\n                    }\r\n\r\n                    @Override\r\n                    public void onCancelled(@NonNull DatabaseError error) {\r\n\r\n                    }\r\n                });\r\n\r\n    }\r\n\r\n    private void updateCreateList() {\r\n\r\n        Collections.reverse(contestlist);\r\n        contestlist.clear();\r\n        DatabaseReference refer = FirebaseDatabase.getInstance().getReference(getString(R.string.dbname_contests));\r\n        refer.child(FirebaseAuth.getInstance().getCurrentUser().getUid())\r\n\r\n                .child(getString(R.string.created_contest))\r\n\r\n                .addListenerForSingleValueEvent(new ValueEventListener() {\r\n                    @Override\r\n                    public void onDataChange(@NonNull DataSnapshot snapshot) {\r\n                        for (DataSnapshot snapshot1:snapshot.getChildren()){\r\n                            com.orion.orion.models.CreateForm createForm = snapshot1.getValue(com.orion.orion.models.CreateForm.class);\r\n\r\n                            contestlist.add(createForm);\r\n                        }\r\n                        Collections.reverse(contestlist);\r\n\r\n                        //    Add newly Created ArrayList to Shared Preferences\r\n                        SharedPreferences.Editor editor = sp.edit();\r\n                        String json = gson.toJson(contestlist);\r\n                        editor.putString(\"createlist\", json);\r\n                        editor.apply();\r\n\r\n                        displaycontest();\r\n                    }\r\n\r\n                    @Override\r\n                    public void onCancelled(@NonNull DatabaseError error) {\r\n\r\n                    }\r\n                });\r\n\r\n\r\n    }\r\n\r\n    private void displaycontest() {\r\n        Log.d(TAG, \"display first 10 contest\");\r\n        noPost.setVisibility(View.GONE);\r\n        bottomProgress.setVisibility(View.GONE);\r\n\r\n\r\n        flag1=true;\r\n        paginatedContestlist = new ArrayList<>();\r\n        if (contestlist != null&&contestlist.size()!=0) {\r\n\r\n            try {\r\n\r\n\r\n                int iteration = contestlist.size();\r\n                if (iteration > 5) {\r\n                    iteration = 5;\r\n                }\r\n                mResults = 5;\r\n                for (int i = 0; i < iteration; i++) {\r\n                    paginatedContestlist.add(contestlist.get(i));\r\n                }\r\n                Log.d(TAG, \"contest: sss\" + paginatedContestlist.size());\r\n                contestCreated = new AdapterContestCreated(this, paginatedContestlist);\r\n                contestCreated.setHasStableIds(true);\r\n                createdContestRv.setAdapter(contestCreated);\r\n\r\n            } catch (NullPointerException e) {\r\n                Log.e(TAG, \"Null pointer exception\" + e.getMessage());\r\n\r\n            } catch (IndexOutOfBoundsException e) {\r\n                Log.e(TAG, \"index out of bound\" + e.getMessage());\r\n\r\n            }\r\n\r\n        }else {\r\n            noPost.setVisibility(View.VISIBLE);\r\n            bottomProgress.setVisibility(View.GONE);\r\n\r\n        }\r\n    }\r\n\r\n    public void displayMoreContest() {\r\n        Log.d(TAG, \"display next 10 contest\");\r\n\r\n        try {\r\n            if (contestlist.size() > mResults && contestlist.size() > 0) {\r\n\r\n                int iterations;\r\n                if (contestlist.size() > (mResults + 10)) {\r\n                    Log.d(TAG, \"display next 20 contest\");\r\n                    iterations = 10;\r\n                } else {\r\n                    Log.d(TAG, \"display less tha 20 contest\");\r\n                    iterations = contestlist.size() - mResults;\r\n                }\r\n                for (int i = mResults; i < mResults + iterations; i++) {\r\n                    paginatedContestlist.add(contestlist.get(i));\r\n\r\n                }\r\n                createdContestRv.post(new Runnable() {\r\n                    @Override\r\n                    public void run() {\r\n                        contestCreated.notifyItemRangeInserted(mResults,iterations);\r\n                    }\r\n                });\r\n                mResults = mResults + iterations;\r\n\r\n\r\n            }else{\r\n                bottomProgress.setVisibility(View.GONE);\r\n\r\n            }\r\n\r\n        } catch (NullPointerException e) {\r\n            Log.e(TAG, \"Null pointer exception\" + e.getMessage());\r\n\r\n        } catch (IndexOutOfBoundsException e) {\r\n            Log.e(TAG, \"index out of bound\" + e.getMessage());\r\n\r\n        }\r\n\r\n    }\r\n    private Boolean exit = false;\r\n    @Override\r\n    public void onBackPressed() {\r\n        Intent i = new Intent(CreatedActivity.this, UpcomingContestActivity.class);\r\n        startActivity(i);\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/orion/orion/contest/create/CreatedActivity.java	(revision cf7597ca1ff027f96fc145e942172638654ff2b2)
+++ app/src/main/java/com/orion/orion/contest/create/CreatedActivity.java	(date 1623646691563)
@@ -57,7 +57,7 @@
     FloatingActionButton floatingActionButton1, floatingActionButton2, floatingActionButton3;
 
 
-    TextView noPost;
+    TextView noPost,topbar;
     SwipeRefreshLayout contestRefresh;
     boolean flag1 = false;
     private static int RETRY_DURATION = 1000;
@@ -85,6 +85,9 @@
         floatingActionButton1= findViewById(R.id.menu_item);
         floatingActionButton2= findViewById(R.id.menu_item2);
         floatingActionButton3= findViewById(R.id.menu_item3);
+        topbar= findViewById(R.id.titleTopBar);
+
+        topbar.setText("CREATED CONTEST");
 
 
         floatingActionButton1.setOnClickListener(new View.OnClickListener() {
Index: app/src/main/java/com/orion/orion/LeaderboardActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.orion.orion;\r\n\r\nimport android.Manifest;\r\nimport android.annotation.SuppressLint;\r\nimport android.app.Activity;\r\nimport android.content.Context;\r\nimport android.content.Intent;\r\nimport android.content.SharedPreferences;\r\nimport android.content.pm.PackageManager;\r\nimport android.location.Address;\r\nimport android.location.Geocoder;\r\nimport android.location.LocationManager;\r\nimport android.os.Build;\r\nimport android.os.Bundle;\r\nimport android.text.Editable;\r\nimport android.text.TextWatcher;\r\nimport android.util.Log;\r\nimport android.util.TypedValue;\r\nimport android.view.Menu;\r\nimport android.view.MenuItem;\r\nimport android.view.View;\r\nimport android.view.inputmethod.InputMethodManager;\r\nimport android.widget.EditText;\r\nimport android.widget.ImageView;\r\nimport android.widget.ListView;\r\nimport android.widget.TextView;\r\nimport android.widget.Toast;\r\n\r\nimport com.daimajia.androidanimations.library.Techniques;\r\nimport com.daimajia.androidanimations.library.YoYo;\r\nimport com.google.firebase.auth.FirebaseAuth;\r\nimport com.google.firebase.auth.FirebaseUser;\r\nimport com.google.firebase.database.DataSnapshot;\r\nimport com.google.firebase.database.DatabaseError;\r\nimport com.google.firebase.database.DatabaseReference;\r\nimport com.google.firebase.database.FirebaseDatabase;\r\nimport com.google.firebase.database.Query;\r\nimport com.google.firebase.database.ValueEventListener;\r\nimport com.ittianyu.bottomnavigationviewex.BottomNavigationViewEx;\r\nimport com.orion.orion.Adapters.AdapterLeaderboard;\r\nimport com.orion.orion.Adapters.UserListAdapter;\r\nimport com.orion.orion.dialogs.BottomSheetFilter;\r\nimport com.orion.orion.login.LoginActivity;\r\nimport com.orion.orion.models.ItemLeaderboard;\r\nimport com.orion.orion.models.users;\r\nimport com.orion.orion.profile.profile;\r\nimport com.orion.orion.util.BottomNaavigationViewHelper;\r\nimport com.orion.orion.util.FirebaseMethods;\r\nimport com.orion.orion.util.SNTPClient;\r\n\r\nimport java.io.IOException;\r\nimport java.text.ParseException;\r\nimport java.text.SimpleDateFormat;\r\nimport java.util.ArrayList;\r\nimport java.util.Date;\r\nimport java.util.List;\r\nimport java.util.Locale;\r\nimport java.util.Objects;\r\nimport java.util.TimeZone;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.annotation.Nullable;\r\nimport androidx.annotation.RequiresApi;\r\nimport androidx.appcompat.app.AlertDialog;\r\nimport androidx.appcompat.app.AppCompatActivity;\r\nimport androidx.core.app.ActivityCompat;\r\nimport androidx.core.content.ContextCompat;\r\nimport androidx.recyclerview.widget.LinearLayoutManager;\r\nimport androidx.recyclerview.widget.RecyclerView;\r\nimport androidx.swiperefreshlayout.widget.SwipeRefreshLayout;\r\n\r\n\r\npublic class LeaderboardActivity extends AppCompatActivity implements BottomSheetFilter.BottomSheetListener {\r\n    private static final String TAG = \"LeaderboardActivity\";\r\n    private static final int ACTIVITY_NUM = 2;\r\n    private static final int ANIMATION_DURATION = 500;\r\n    private static final int LEADERBOAD_SIZE = 20;\r\n    private final static String DATE_FORMAT_PATTERN = \"yyyy-MM-dd'T'HH:mm:ssZ\";\r\n    private Context mContext;\r\n    FirebaseMethods firebaseMethods;\r\n    private TextView userItemUsername;\r\n    private TextView userItemRank;\r\n    private SwipeRefreshLayout swipeRefreshLayout;\r\n    private TextView sortedByTime;\r\n    private TextView sortedByLocation;\r\n    //    private TextView sortedByType;\r\n    private TextView sortedByDomain;\r\n    private RecyclerView mRecyclerView;\r\n    private AdapterLeaderboard mAdapter;\r\n    private DatabaseReference reference;\r\n    private EditText mSearchParam;\r\n    private ListView mListView;\r\n    private List<users> mUserList;\r\n    //TextView usernameProfile;\r\n    private String time;\r\n    private String locationParameter;\r\n    private UserListAdapter mAdapter2;\r\n    ImageView cross;\r\n    //    private String typeParameter;\r\n    private String domainParameter;\r\n    //variables\r\n    private ArrayList<ItemLeaderboard> mList;\r\n    private String currentUser;\r\n    //firebase\r\n    private FirebaseAuth mAuth;\r\n    private FirebaseAuth.AuthStateListener mAuthListener;\r\n    private FirebaseUser mUser;\r\n\r\n\r\n    @SuppressLint(\"ClickableViewAccessibility\")\r\n    @RequiresApi(api = Build.VERSION_CODES.M)\r\n    @Override\r\n    protected void onCreate(@Nullable Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n\r\n        setContentView(R.layout.activity_leaderboard);\r\n        Log.d(TAG, \"onCreate: started.\");\r\n        setupBottomNavigationView();\r\n        setupFirebaseAuth();\r\n        initializeWidgets();\r\n        initTextListener();\r\n        hideSoftKeyboard();\r\n\r\n\r\n        SNTPClient.getDate(TimeZone.getTimeZone(\"Asia/Kolkata\"), new SNTPClient.Listener() {\r\n            @Override\r\n            public void onTimeReceived(String currentTimeStamp) {\r\n                Log.d(TAG, \"currentTimeStamp: \" + currentTimeStamp);\r\n                Query query = reference.child(getString(R.string.last_updated));\r\n                query.addListenerForSingleValueEvent(new ValueEventListener() {\r\n                    @Override\r\n                    public void onDataChange(@NonNull DataSnapshot snapshot) {\r\n                        if (!snapshot.exists()) {\r\n                            updateLeaderboard(currentTimeStamp);\r\n                        } else {\r\n                            Date currentDate = parseDate(currentTimeStamp);\r\n                            Date fetchedDate = parseDate(snapshot.getValue().toString());\r\n//                            Log.d(TAG, \"DATE: currentDate: \" + currentTimeStamp);\r\n//                            Log.d(TAG, \"DATE: fetchedDate: \" + currentTimeStamp);\r\n                            if (moreThanADay(fetchedDate, currentDate))\r\n                                updateLeaderboard(currentTimeStamp);\r\n                        }\r\n                    }\r\n\r\n                    @Override\r\n                    public void onCancelled(@NonNull DatabaseError error) {\r\n\r\n                    }\r\n                });\r\n            }\r\n\r\n            @Override\r\n            public void onError(Exception ex) {\r\n\r\n            }\r\n        });\r\n        cross.setOnClickListener(view -> {\r\n            mSearchParam.setText(\"\");\r\n            mUserList.clear();\r\n            if (mAdapter != null) mAdapter.notifyDataSetChanged();\r\n        });\r\n        checkOrGetLocation();\r\n        filter();\r\n\r\n        mRecyclerView.addOnScrollListener(new RecyclerView.OnScrollListener() {\r\n            @Override\r\n            public void onScrollStateChanged(@NonNull RecyclerView recyclerView, int newState) {\r\n                super.onScrollStateChanged(recyclerView, newState);\r\n            }\r\n\r\n            @Override\r\n            public void onScrolled(@NonNull RecyclerView recyclerView, int dx, int dy) {\r\n                super.onScrolled(recyclerView, dx, dy);\r\n            }\r\n        });\r\n        sortedByTime.setOnClickListener(v -> {\r\n            String[] timeList = {\"All Time\", \"This Year\", \"Last Month\", \"This Month\", \"Last Week\", \"This Week\"};\r\n            BottomSheetFilter bottomSheet = new BottomSheetFilter(timeList);\r\n            bottomSheet.show(getSupportFragmentManager(), \"Time Filter\");\r\n        });\r\n        sortedByLocation.setOnClickListener(v -> {\r\n            String[] locationList = {\"World\", \"Country\", \"City\", \"Area\"};\r\n            BottomSheetFilter bottomSheet = new BottomSheetFilter(locationList);\r\n            bottomSheet.show(getSupportFragmentManager(), \"location Filter\");\r\n        });\r\n//        sortedByType.setOnClickListener(v -> {\r\n//            String[] typeList = {\"Overall\", \"Posts\", \"Followers\", \"Contests\"};\r\n//            BottomSheetFilter bottomSheet = new BottomSheetFilter(typeList);\r\n//            bottomSheet.show(getSupportFragmentManager(), \"Type Filter\");\r\n//        });\r\n        sortedByDomain.setOnClickListener(v -> {\r\n            String[] domainList = getResources().getStringArray(R.array.domain2);\r\n            BottomSheetFilter bottomSheet = new BottomSheetFilter(domainList);\r\n            bottomSheet.show(getSupportFragmentManager(), \"Type Filter\");\r\n        });\r\n        swipeRefreshLayout.setRefreshing(false);\r\n        swipeRefreshLayout.setEnabled(false);\r\n        swipeRefreshLayout.setColorSchemeResources(\r\n                R.color.black,\r\n                R.color.scheme2,\r\n                R.color.purple,\r\n                R.color.dark_orange,\r\n                R.color.scheme5,\r\n                R.color.scheme6,\r\n                R.color.scheme7,\r\n                R.color.option_background_pressed,\r\n                R.color.scheme9,\r\n                R.color.brown,\r\n                R.color.yellow,\r\n                R.color.red\r\n        );\r\n        swipeRefreshLayout.setOnRefreshListener(() -> {\r\n            mRecyclerView.setVisibility(View.GONE);\r\n            filter();\r\n        });\r\n    }\r\n\r\n\r\n    @Override\r\n    public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) {\r\n        super.onRequestPermissionsResult(requestCode, permissions, grantResults);\r\n        if (grantResults.length > 0 && grantResults[0] == PackageManager.PERMISSION_GRANTED)\r\n            if (ContextCompat.checkSelfPermission(this, Manifest.permission.ACCESS_FINE_LOCATION) == PackageManager.PERMISSION_GRANTED)\r\n                Toast.makeText(LeaderboardActivity.this, \"Permission Granted\", Toast.LENGTH_LONG).show();\r\n    }\r\n\r\n    @Override\r\n    public void onButtonClicked(String text) {\r\n        Log.d(TAG, \"onButtonClicked: filter received\" + text);\r\n        if (!swipeRefreshLayout.isRefreshing()) switch (text) {\r\n            case \"All Time\":\r\n            case \"Last Week\":\r\n            case \"This Year\":\r\n            case \"Last Month\":\r\n            case \"This Month\":\r\n            case \"This Week\":\r\n                sortedByTime.setText(text);\r\n                sortedByTime.setBackgroundResource(R.drawable.circular_gradient_background);\r\n                YoYo.with(Techniques.ZoomIn).duration(ANIMATION_DURATION).playOn(sortedByTime);\r\n                break;\r\n            case \"World\":\r\n            case \"Country\":\r\n            case \"City\":\r\n            case \"Area\":\r\n                sortedByLocation.setText(text);\r\n                sortedByLocation.setBackgroundResource(R.drawable.circular_gradient_background);\r\n                sortedByLocation.setTextSize(TypedValue.COMPLEX_UNIT_SP, 15);\r\n                YoYo.with(Techniques.ZoomIn).duration(ANIMATION_DURATION).playOn(sortedByLocation);\r\n                break;\r\n//            case \"Overall\":\r\n//            case \"Posts\":\r\n//            case \"Followers\":\r\n//            case \"Contests\":\r\n//                sortedByType.setText(text);\r\n//                sortedByType.setBackgroundResource(R.drawable.circular_gradient_background);\r\n//                YoYo.with(Techniques.ZoomIn).duration(ANIMATION_DURATION).playOn(sortedByType);\r\n//                break;\r\n            default:\r\n                sortedByDomain.setText(text);\r\n                sortedByDomain.setBackgroundResource(R.drawable.circular_gradient_background);\r\n                YoYo.with(Techniques.ZoomIn).duration(ANIMATION_DURATION).playOn(sortedByDomain);\r\n                break;\r\n        }\r\n        filter();\r\n    }\r\n    private void initTextListener() {\r\n        mUserList = new ArrayList<>();\r\n        mSearchParam.addTextChangedListener(new TextWatcher() {\r\n            @Override\r\n            public void beforeTextChanged(CharSequence s, int start, int count, int after) {\r\n            }\r\n\r\n            @Override\r\n            public void onTextChanged(CharSequence s, int start, int before, int count) {\r\n            }\r\n\r\n            @Override\r\n            public void afterTextChanged(Editable s) {\r\n                String text = mSearchParam.getText().toString();\r\n                searchForMatch(text);\r\n            }\r\n        });\r\n    }\r\n\r\n    private void searchForMatch(String keyword) {\r\n        Log.d(TAG, \"searching for a match\" + keyword);\r\n        mUserList.clear();\r\n        if (keyword.length() == 0) {\r\n            cross.setVisibility(View.GONE);\r\n\r\n        } else {\r\n            cross.setVisibility(View.VISIBLE);\r\n            DatabaseReference reference = FirebaseDatabase.getInstance().getReference();\r\n            Query query = reference.child(getString(R.string.dbname_username)).orderByKey()\r\n                    .startAt(keyword).endAt(keyword + \"\\uf8ff\");\r\n            query.addValueEventListener(new ValueEventListener() {\r\n                @Override\r\n                public void onDataChange(@NonNull DataSnapshot dataSnapshot) {\r\n                    for (DataSnapshot singleSnapshot : dataSnapshot.getChildren()) {\r\n\r\n                        reference.child(getString(R.string.dbname_users))\r\n                                .child(singleSnapshot.getValue().toString())\r\n                                .addListenerForSingleValueEvent(new ValueEventListener() {\r\n                                    @Override\r\n                                    public void onDataChange(@NonNull DataSnapshot snapshot) {\r\n\r\n                                        mUserList.add(snapshot.getValue(users.class));\r\n                                        updateUserList();\r\n                                    }\r\n\r\n                                    @Override\r\n                                    public void onCancelled(@NonNull DatabaseError error) {\r\n\r\n                                    }\r\n                                });\r\n\r\n                    }\r\n                }\r\n\r\n                @Override\r\n                public void onCancelled(@NonNull DatabaseError databaseError) {\r\n\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    private void updateUserList() {\r\n        mAdapter2 = new UserListAdapter(LeaderboardActivity.this, R.layout.layout_user_listitem, mUserList);\r\n        mListView.setAdapter(mAdapter2);\r\n        mListView.setOnItemClickListener((parent, view, position, id) -> {\r\n            Log.d(TAG, \"selected user\" + mUserList.get(position).toString());\r\n            Intent intent = new Intent(LeaderboardActivity.this, profile.class);\r\n            intent.putExtra(getString(R.string.calling_activity),getString(R.string.search_activity));\r\n            intent.putExtra(getString(R.string.intent_user), mUserList.get(position).getUi());\r\n            startActivity(intent);\r\n        });\r\n\r\n    }\r\n\r\n    private void hideSoftKeyboard() {\r\n        if (getCurrentFocus() != null) {\r\n            InputMethodManager imm = (InputMethodManager) getSystemService(INPUT_METHOD_SERVICE);\r\n            imm.hideSoftInputFromWindow(getCurrentFocus().getWindowToken(), 0);\r\n        }\r\n    }\r\n    private void updateLeaderboard(String currentTimeStamp) {\r\n        //initializing formatting for current date\r\n        int currentYear = Integer.parseInt(currentTimeStamp.substring(0, 4));\r\n        int currentMonth = Integer.parseInt(currentTimeStamp.substring(5, 7));\r\n        int currentDate = Integer.parseInt(currentTimeStamp.substring(8, 10));\r\n//                String currentTime = currentTimeStamp.substring(12, currentTimeStamp.length() - 1);\r\n        String currentDateFormat = currentDate + \"/\" + currentMonth + \"/\" + currentYear;\r\n        Date date = new Date(currentDateFormat);\r\n        int currentDay = date.getDay();\r\n\r\n        Query query = reference.child(getString(R.string.dbname_users));\r\n        query.addListenerForSingleValueEvent(new ValueEventListener() {\r\n            @Override\r\n            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {\r\n                for (DataSnapshot singleSnapshot : dataSnapshot.getChildren()) {\r\n//                            Log.d(TAG, \"updateLeaderboard: \" + singleSnapshot);\r\n//                            users currentUser;\r\n//                            currentUser=singleSnapshot.getValue(users.class);\r\n//                            //initializing variables for the updation\r\n//                            String user_id = singleSnapshot.getKey();\r\n//                            assert user_id != null;\r\n//                            assert currentUser != null;\r\n//                            String username = currentUser.getU();\r\n//                            String domain = currentUser.getD();\r\n//                            location location = new location();\r\n//                            String profilePhoto = currentUser.getPp();\r\n//                            boolean changedFollowers=false;\r\n//                            boolean changedJoinedContest = false;\r\n//                            boolean changedCreateContest = false;\r\n//                            if(currentUser.getCf()!=null && currentUser.getCf().equals(\"false\")) changedFollowers = currentUser.getCf().equals(\"true\");\r\n//                            if(currentUser.getCjc()!=null && currentUser.getCjc().equals(\"false\")) changedJoinedContest = currentUser.getCjc().equals(\"true\");\r\n//                            if(currentUser.getCcc()!=null && currentUser.getCcc().equals(\"false\")) changedCreateContest = currentUser.getCcc().equals(\"true\");\r\n                    String user_id = singleSnapshot.getKey();\r\n                    assert user_id != null;\r\n                    String username = (String) singleSnapshot.child(getString(R.string.field_username)).getValue();\r\n                    String domain = (String) singleSnapshot.child(getString(R.string.field_domain)).getValue();\r\n                    String profilePhoto = (String) singleSnapshot.child(getString(R.string.profile_photo)).getValue();\r\n                    boolean changedFollowers = false;\r\n                    boolean changedJoinedContest = false;\r\n                    boolean changedCreateContest = false;\r\n                    if (singleSnapshot.child(getString(R.string.changedFollowers)).getValue() != null && Objects.equals(singleSnapshot.child(getString(R.string.changedFollowers)).getValue(), \"true\"))\r\n                        changedFollowers = true;\r\n                    if (singleSnapshot.child(getString(R.string.changedJoinedContest)).getValue() != null && Objects.equals(singleSnapshot.child(getString(R.string.changedJoinedContest)).getValue(), \"true\"))\r\n                        changedJoinedContest = true;\r\n                    if (singleSnapshot.child(getString(R.string.changedCreatedContest)).getValue() != null && Objects.equals(singleSnapshot.child(getString(R.string.changedCreatedContest)).getValue(), \"true\"))\r\n                        changedCreateContest = true;\r\n\r\n                    //location update\r\n                    FirebaseUser user = FirebaseAuth.getInstance().getCurrentUser();\r\n                    assert user != null;\r\n\r\n//                            if (user.getUid().equals(user_id)) checkOrGetLocation();\r\n\r\n                    Log.d(TAG, \"updateLeaderboard: USERID: \" + user_id);\r\n                    Log.d(TAG, \"updateLeaderboard: posts update\");\r\n                    //for posts parameters of leaders according the photos\r\n//                            Query query1 = reference.child(getString(R.string.dbname_user_photos)).child(user_id);\r\n//                            query1.addListenerForSingleValueEvent(new ValueEventListener() {\r\n//                                @Override\r\n//                                public void onDataChange(@NonNull DataSnapshot dataSnapshot) {\r\n//\r\n//                                    //initializing temp variables for posts\r\n//                                    float all_time = 0;\r\n//                                    float yearly = 0;\r\n//                                    float last_month = 0;\r\n//                                    float this_month = 0;\r\n//                                    float last_week = 0;\r\n//                                    float this_week = 0;\r\n//                                    for (DataSnapshot snapshot : dataSnapshot.getChildren()) {\r\n//                                        long likes = snapshot.child(getString(R.string.field_likes)).getChildrenCount();\r\n//                                        long comments = snapshot.child(getString(R.string.field_comment)).getChildrenCount();\r\n//                                        float rating = (int) (0.5 + likes + 0.2 * comments);\r\n//\r\n//                                        //calculating date related parameters\r\n//                                        String postedTimestamp = (String) snapshot.child(getString(R.string.field_date_createdr)).getValue();\r\n//                                        assert postedTimestamp != null;\r\n//                                        int postedYear = Integer.parseInt(postedTimestamp.substring(0, 4));\r\n//                                        int postedMonth = Integer.parseInt(postedTimestamp.substring(5, 7));\r\n//                                        int postedDate = Integer.parseInt(postedTimestamp.substring(8, 10));\r\n////                                        String postedTime = postedTimestamp.substring(12, postedTimestamp.length() - 1);\r\n//                                        String postedDateFormat = postedDate + \"/\" + postedMonth + \"/\" + postedYear;\r\n//\r\n//                                        //calculating difference of dates in post and current one\r\n//                                        @SuppressLint(\"SimpleDateFormat\") SimpleDateFormat simpleDateFormat = new SimpleDateFormat(\"dd/M/yyyy\");\r\n//                                        long elapsedDays = 0;\r\n//                                        try {\r\n//                                            Date date1 = simpleDateFormat.parse(postedDateFormat);\r\n//                                            Date date2 = simpleDateFormat.parse(currentDateFormat);\r\n////                                            Log.d(TAG, \"onTimeReceived: \" + date1);\r\n////                                            Log.d(TAG, \"onTimeReceived: \" + date2);\r\n//                                            assert date1 != null;\r\n//                                            assert date2 != null;\r\n//                                            elapsedDays = (date2.getTime() - date1.getTime()) / (1000 * 60 * 60 * 24);\r\n////                                            Log.d(TAG, \"onDataChange: \" + elapsedDays);\r\n////                                            Log.d(TAG, \"onDataChange: \" + currentDay);\r\n//                                        } catch (ParseException e) {\r\n//                                            e.printStackTrace();\r\n//                                        }\r\n//\r\n//                                        //all time one\r\n//                                        all_time += rating;\r\n//                                        //yearly one\r\n//                                        if (currentYear == postedYear) {\r\n//                                            yearly += rating;\r\n//                                            //same monthly in same years\r\n//                                            if (currentMonth == postedMonth)\r\n//                                                this_month += rating;\r\n//                                                //previous month in same year\r\n//                                            else if (currentMonth == postedMonth + 1)\r\n//                                                last_month += rating;\r\n//                                        }\r\n//                                        //previous month in different year\r\n//                                        else if ((currentYear - 1) == postedYear && currentMonth == 1 && postedMonth == 12) {\r\n//                                            last_month += rating;\r\n//                                        }\r\n//                                        //calculating weekly ones\r\n//                                        if (elapsedDays > currentDay && elapsedDays <= (currentDay + 7))\r\n//                                            last_week += rating;\r\n//                                            //same week in same year and same month\r\n//                                        else if (elapsedDays <= currentDay)\r\n//                                            this_week += rating;\r\n//                                    }\r\n//                                    Log.d(TAG, \"updateLeaderboard: posts \" + all_time + \",\" + yearly + \",\" + last_month + \",\" + this_month + \",\" + last_week + \",\" + this_week);\r\n//                                    reference.child(getString(R.string.dbname_leaderboard)).child(user_id).child(getString(R.string.field_all_time)).child(getString(R.string.field_post)).setValue((int) all_time);\r\n//                                    reference.child(getString(R.string.dbname_leaderboard)).child(user_id).child(getString(R.string.field_yearly)).child(getString(R.string.field_post)).setValue((int) yearly);\r\n//                                    reference.child(getString(R.string.dbname_leaderboard)).child(user_id).child(getString(R.string.field_last_month)).child(getString(R.string.field_post)).setValue((int) last_month);\r\n//                                    reference.child(getString(R.string.dbname_leaderboard)).child(user_id).child(getString(R.string.field_this_month)).child(getString(R.string.field_post)).setValue((int) this_month);\r\n//                                    reference.child(getString(R.string.dbname_leaderboard)).child(user_id).child(getString(R.string.field_last_week)).child(getString(R.string.field_post)).setValue((int) last_week);\r\n//                                    reference.child(getString(R.string.dbname_leaderboard)).child(user_id).child(getString(R.string.field_this_week)).child(getString(R.string.field_post)).setValue((int) this_week);\r\n//                                }\r\n//\r\n//                                @Override\r\n//                                public void onCancelled(@NonNull DatabaseError databaseError) {\r\n//                                }\r\n//\r\n//                            });\r\n\r\n                    Log.d(TAG, \"updateLeaderboard: followers update\");\r\n                    if (changedFollowers\r\n                            || !dataSnapshot.child(getString(R.string.field_all_time)).child(getString(R.string.field_followers)).exists()\r\n                            || !dataSnapshot.child(getString(R.string.field_yearly)).child(getString(R.string.field_followers)).exists()\r\n                            || !dataSnapshot.child(getString(R.string.field_last_month)).child(getString(R.string.field_followers)).exists()\r\n                            || !dataSnapshot.child(getString(R.string.field_this_month)).child(getString(R.string.field_followers)).exists()\r\n                            || !dataSnapshot.child(getString(R.string.field_last_week)).child(getString(R.string.field_followers)).exists()\r\n                            || !dataSnapshot.child(getString(R.string.field_this_week)).child(getString(R.string.field_followers)).exists()) {\r\n                        //for updating follow parameter of database\r\n                        Query query2 = reference.child(getString(R.string.dbname_follower)).child(user_id);\r\n                        query2.addListenerForSingleValueEvent(new ValueEventListener() {\r\n                            @Override\r\n                            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {\r\n                                //getting updates for contests\r\n                                int currentNoOfFollowers = (int) dataSnapshot.getChildrenCount();\r\n                                Query query21 = reference.child(getString(R.string.dbname_leaderboard)).child(user_id);\r\n                                query21.addListenerForSingleValueEvent(new ValueEventListener() {\r\n                                    @Override\r\n                                    public void onDataChange(@NonNull DataSnapshot dataSnapshot) {\r\n                                        //details entries\r\n                                        int previousNoOfFollowers = 0;\r\n                                        if (dataSnapshot.child(getString(R.string.field_followers)).getValue() != null)\r\n                                            previousNoOfFollowers = (int) (long) dataSnapshot.child(getString(R.string.field_followers)).getValue();\r\n\r\n                                        int all_time;\r\n                                        int yearly = 0;\r\n                                        if (dataSnapshot.child(getString(R.string.field_yearly)).child(getString(R.string.field_followers)).getValue() != null)\r\n                                            yearly = (int) (long) dataSnapshot.child(getString(R.string.field_yearly)).child(getString(R.string.field_followers)).getValue();\r\n                                        int last_month = 0;\r\n                                        if (dataSnapshot.child(getString(R.string.field_last_month)).child(getString(R.string.field_followers)).getValue() != null)\r\n                                            last_month = (int) (long) dataSnapshot.child(getString(R.string.field_last_month)).child(getString(R.string.field_followers)).getValue();\r\n                                        int this_month = 0;\r\n                                        if (dataSnapshot.child(getString(R.string.field_this_month)).child(getString(R.string.field_followers)).getValue() != null)\r\n                                            this_month = (int) (long) dataSnapshot.child(getString(R.string.field_this_month)).child(getString(R.string.field_followers)).getValue();\r\n                                        int last_week = 0;\r\n                                        if (dataSnapshot.child(getString(R.string.field_last_week)).child(getString(R.string.field_followers)).getValue() != null)\r\n                                            last_week = (int) (long) dataSnapshot.child(getString(R.string.field_last_week)).child(getString(R.string.field_followers)).getValue();\r\n                                        int this_week = 0;\r\n                                        if (dataSnapshot.child(getString(R.string.field_this_week)).child(getString(R.string.field_followers)).getValue() != null)\r\n                                            this_week = (int) (long) dataSnapshot.child(getString(R.string.field_this_week)).child(getString(R.string.field_followers)).getValue();\r\n\r\n                                        //getting last updated entries\r\n                                        String lastUpdatedTimestamp = (String) dataSnapshot.child(getString(R.string.field_last_updated)).getValue();\r\n                                        int lastUpdatedYear = 0;\r\n                                        int lastUpdatedMonth = 0;\r\n                                        int lastUpdatedDate = 0;\r\n//                                          String lastUpdatedTime = \"\";\r\n                                        assert lastUpdatedTimestamp != null;\r\n                                        if (lastUpdatedTimestamp.length() > 12) {\r\n                                            lastUpdatedYear = Integer.parseInt(lastUpdatedTimestamp.substring(0, 4));\r\n                                            lastUpdatedMonth = Integer.parseInt(lastUpdatedTimestamp.substring(5, 7));\r\n                                            lastUpdatedDate = Integer.parseInt(lastUpdatedTimestamp.substring(8, 10));\r\n//                                              lastUpdatedTime = lastUpdatedTimestamp.substring(12, lastUpdatedTimestamp.length() - 1);\r\n                                        }\r\n                                        String lastUpdatedDateFormat = lastUpdatedDate + \"/\" + lastUpdatedMonth + \"/\" + lastUpdatedYear;\r\n                                        int finalLastUpdatedYear = lastUpdatedYear;\r\n                                        int finalLastUpdatedMonth = lastUpdatedMonth;\r\n\r\n                                        //calculating difference of dates in post and current one\r\n                                        @SuppressLint(\"SimpleDateFormat\") SimpleDateFormat simpleDateFormat = new SimpleDateFormat(\"dd/M/yyyy\");\r\n                                        long elapsedDays = 0;\r\n                                        try {\r\n                                            Date date1 = simpleDateFormat.parse(lastUpdatedDateFormat);\r\n                                            Date date2 = simpleDateFormat.parse(currentDateFormat);\r\n//                                                    Log.d(TAG, \"onTimeReceived: \" + date1);\r\n//                                                    Log.d(TAG, \"onTimeReceived: \" + date2);\r\n                                            assert date1 != null;\r\n                                            assert date2 != null;\r\n                                            elapsedDays = (date2.getTime() - date1.getTime()) / (1000 * 60 * 60 * 24);\r\n//                                                    Log.d(TAG, \"onDataChange: \" + elapsedDays);\r\n//                                                    Log.d(TAG, \"onDataChange: \" + currentDay);\r\n                                        } catch (ParseException e) {\r\n                                            e.printStackTrace();\r\n                                        }\r\n\r\n\r\n                                        //updating for transition days of different year\r\n                                        if (finalLastUpdatedYear < currentYear) {\r\n                                            yearly = 0;\r\n                                            this_month = 0;\r\n                                            //updating for transition days of different month in different year\r\n                                            if (finalLastUpdatedMonth == 12 && currentMonth == 1) {\r\n                                                last_month = this_month;\r\n                                                //updating for transition days of different month different year of time span of more than 2 weeks\r\n                                                if (elapsedDays > currentDay + 7) {\r\n                                                    last_week = 0;\r\n                                                    this_week = 0;\r\n                                                }\r\n                                                //updating for transition days of different month different year of previous week\r\n                                                else if (elapsedDays > currentDay && elapsedDays <= currentDay + 7) {\r\n                                                    last_week = this_week;\r\n                                                    this_week = 0;\r\n                                                }\r\n                                            } else last_month = 0;\r\n                                        }\r\n                                        //updating for transition days of same year\r\n                                        else {\r\n                                            //updating for transition days of different month in different year\r\n                                            if (finalLastUpdatedMonth < currentMonth) {\r\n                                                this_month = 0;\r\n                                                //updating for transition days of just previous month\r\n                                                if ((finalLastUpdatedMonth - currentMonth) == 1) {\r\n                                                    last_month = this_month;\r\n                                                    //updating for transition days of different month different year of time span of more than 2 weeks\r\n                                                    if (elapsedDays > currentDay + 7) {\r\n                                                        last_week = 0;\r\n                                                        this_week = 0;\r\n                                                    }\r\n                                                    //updating for transition days of different month different year of previous week\r\n                                                    else if (elapsedDays > currentDay && elapsedDays <= currentDay + 7) {\r\n                                                        last_week = this_week;\r\n                                                        this_week = 0;\r\n                                                    }\r\n                                                } else {\r\n                                                    last_month = 0;\r\n                                                    last_week = 0;\r\n                                                    this_week = 0;\r\n                                                }\r\n                                            } else {\r\n                                                //updating for transition days of same month same year of time span of more than 2 weeks\r\n                                                if (elapsedDays < currentDay + 7) {\r\n                                                    last_week = 0;\r\n                                                    this_week = 0;\r\n                                                }\r\n                                                //updating for transition days of same month same year of time span of less than 2 weeks\r\n                                                else if (elapsedDays > currentDay && elapsedDays <= currentDay + 7) {\r\n                                                    last_week = this_week;\r\n                                                    this_week = 0;\r\n                                                }\r\n                                            }\r\n                                        }\r\n\r\n\r\n                                        //calculating rating for joined\r\n                                        int rating = currentNoOfFollowers - previousNoOfFollowers;\r\n                                        //updating current instance of increasing followers list\r\n                                        all_time = currentNoOfFollowers;\r\n                                        if (finalLastUpdatedYear == currentYear) {\r\n                                            yearly += rating;\r\n                                            if (finalLastUpdatedMonth == currentMonth)\r\n                                                this_month += rating;\r\n                                        }\r\n                                        if (elapsedDays <= currentDay) this_week += rating;\r\n\r\n                                        Log.d(TAG, \"updateLeaderboard: followers \" + all_time + \",\" + yearly + \",\" + last_month + \",\" + this_month + \",\" + last_week + \",\" + this_week);\r\n                                        reference.child(getString(R.string.dbname_leaderboard)).child(user_id).child(getString(R.string.field_all_time)).child(getString(R.string.field_followers)).setValue(all_time);\r\n                                        reference.child(getString(R.string.dbname_leaderboard)).child(user_id).child(getString(R.string.field_yearly)).child(getString(R.string.field_followers)).setValue(yearly);\r\n                                        reference.child(getString(R.string.dbname_leaderboard)).child(user_id).child(getString(R.string.field_last_month)).child(getString(R.string.field_followers)).setValue(last_month);\r\n                                        reference.child(getString(R.string.dbname_leaderboard)).child(user_id).child(getString(R.string.field_this_month)).child(getString(R.string.field_followers)).setValue(this_month);\r\n                                        reference.child(getString(R.string.dbname_leaderboard)).child(user_id).child(getString(R.string.field_last_week)).child(getString(R.string.field_followers)).setValue(last_week);\r\n                                        reference.child(getString(R.string.dbname_leaderboard)).child(user_id).child(getString(R.string.field_this_week)).child(getString(R.string.field_followers)).setValue(this_week);\r\n                                        reference.child(getString(R.string.dbname_leaderboard)).child(user_id).child(getString(R.string.field_followers)).setValue(currentNoOfFollowers);\r\n\r\n                                        reference.child(getString(R.string.dbname_users)).child(user_id).child(getString(R.string.changedFollowers)).setValue(\"false\");\r\n                                    }\r\n\r\n                                    @Override\r\n                                    public void onCancelled(@NonNull DatabaseError databaseError) {\r\n                                    }\r\n                                });\r\n\r\n                            }\r\n\r\n                            @Override\r\n                            public void onCancelled(@NonNull DatabaseError databaseError) {\r\n                            }\r\n                        });\r\n                    }\r\n\r\n                    Log.d(TAG, \"updateLeaderboard: contests update\");\r\n                    if (changedJoinedContest || changedCreateContest\r\n                            || !dataSnapshot.child(getString(R.string.field_all_time)).child(getString(R.string.field_contest)).exists()\r\n                            || !dataSnapshot.child(getString(R.string.field_yearly)).child(getString(R.string.field_contest)).exists()\r\n                            || !dataSnapshot.child(getString(R.string.field_last_month)).child(getString(R.string.field_contest)).exists()\r\n                            || !dataSnapshot.child(getString(R.string.field_this_month)).child(getString(R.string.field_contest)).exists()\r\n                            || !dataSnapshot.child(getString(R.string.field_last_week)).child(getString(R.string.field_contest)).exists()\r\n                            || !dataSnapshot.child(getString(R.string.field_this_week)).child(getString(R.string.field_contest)).exists()) {\r\n                        //for competition parameters of leaders\r\n                        Query query3 = reference.child(getString(R.string.dbname_contests)).child(user_id);\r\n                        query3.addListenerForSingleValueEvent(new ValueEventListener() {\r\n                            @Override\r\n                            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {\r\n\r\n                                //getting updates for contests\r\n                                int joinedContest = (int) dataSnapshot.child(getString(R.string.joined_contest)).getChildrenCount();\r\n                                int createdContest = (int) dataSnapshot.child(getString(R.string.created_contest)).getChildrenCount();\r\n\r\n                                Query query31 = reference.child(getString(R.string.dbname_leaderboard)).child(user_id);\r\n                                query31.addListenerForSingleValueEvent(new ValueEventListener() {\r\n                                    @Override\r\n                                    public void onDataChange(@NonNull DataSnapshot dataSnapshot) {\r\n\r\n                                        //details entries\r\n                                        int previousJoinedContests = 0;\r\n                                        if (dataSnapshot.child(getString(R.string.joined_contest)).getValue() != null)\r\n                                            previousJoinedContests = (int) (long) dataSnapshot.child(getString(R.string.joined_contest)).getValue();\r\n                                        int previousCreatedContest = 0;\r\n                                        if (dataSnapshot.child(getString(R.string.created_contest)).getValue() != null)\r\n                                            previousCreatedContest = (int) (long) dataSnapshot.child(getString(R.string.created_contest)).getValue();\r\n\r\n                                        int all_time = 0;\r\n                                        int yearly = 0;\r\n                                        if (dataSnapshot.child(getString(R.string.field_yearly)).child(getString(R.string.field_contest)).getValue() != null)\r\n                                            yearly = (int) (long) dataSnapshot.child(getString(R.string.field_yearly)).child(getString(R.string.field_contest)).getValue();\r\n                                        int last_month = 0;\r\n                                        if (dataSnapshot.child(getString(R.string.field_last_month)).child(getString(R.string.field_contest)).getValue() != null)\r\n                                            last_month = (int) (long) dataSnapshot.child(getString(R.string.field_last_month)).child(getString(R.string.field_contest)).getValue();\r\n                                        int this_month = 0;\r\n                                        if (dataSnapshot.child(getString(R.string.field_this_month)).child(getString(R.string.field_contest)).getValue() != null)\r\n                                            this_month = (int) (long) dataSnapshot.child(getString(R.string.field_this_month)).child(getString(R.string.field_contest)).getValue();\r\n                                        int last_week = 0;\r\n                                        if (dataSnapshot.child(getString(R.string.field_last_week)).child(getString(R.string.field_contest)).getValue() != null)\r\n                                            last_week = (int) (long) dataSnapshot.child(getString(R.string.field_last_week)).child(getString(R.string.field_contest)).getValue();\r\n                                        int this_week = 0;\r\n                                        if (dataSnapshot.child(getString(R.string.field_this_week)).child(getString(R.string.field_contest)).getValue() != null)\r\n                                            this_week = (int) (long) dataSnapshot.child(getString(R.string.field_this_week)).child(getString(R.string.field_contest)).getValue();\r\n\r\n                                        //getting last updated entries\r\n                                        String lastUpdatedTimestamp = (String) dataSnapshot.child(getString(R.string.field_last_updated)).getValue();\r\n                                        int lastUpdatedYear = 0;\r\n                                        int lastUpdatedMonth = 0;\r\n                                        int lastUpdatedDate = 0;\r\n                                        //                                          String lastUpdatedTime = \"\";\r\n                                        assert lastUpdatedTimestamp != null;\r\n                                        if (lastUpdatedTimestamp.length() > 12) {\r\n                                            lastUpdatedYear = Integer.parseInt(lastUpdatedTimestamp.substring(0, 4));\r\n                                            lastUpdatedMonth = Integer.parseInt(lastUpdatedTimestamp.substring(5, 7));\r\n                                            lastUpdatedDate = Integer.parseInt(lastUpdatedTimestamp.substring(8, 10));\r\n                                            //                                              lastUpdatedTime = lastUpdatedTimestamp.substring(12, lastUpdatedTimestamp.length() - 1);\r\n                                        }\r\n                                        String lastUpdatedDateFormat = lastUpdatedDate + \"/\" + lastUpdatedMonth + \"/\" + lastUpdatedYear;\r\n                                        int finalLastUpdatedYear = lastUpdatedYear;\r\n                                        int finalLastUpdatedMonth = lastUpdatedMonth;\r\n\r\n                                        //calculating difference of dates in post and current one\r\n                                        @SuppressLint(\"SimpleDateFormat\") SimpleDateFormat simpleDateFormat = new SimpleDateFormat(\"dd/M/yyyy\");\r\n                                        long elapsedDays = 0;\r\n                                        try {\r\n                                            Date date1 = simpleDateFormat.parse(lastUpdatedDateFormat);\r\n                                            Date date2 = simpleDateFormat.parse(currentDateFormat);\r\n//                                                    Log.d(TAG, \"onTimeReceived: \" + date1);\r\n//                                                    Log.d(TAG, \"onTimeReceived: \" + date2);\r\n                                            assert date1 != null;\r\n                                            assert date2 != null;\r\n                                            elapsedDays = (date2.getTime() - date1.getTime()) / (ANIMATION_DURATION * 60 * 60 * 24);\r\n//                                                    Log.d(TAG, \"onDataChange: \" + elapsedDays);\r\n//                                                    Log.d(TAG, \"onDataChange: \" + currentDay);\r\n                                        } catch (ParseException e) {\r\n                                            e.printStackTrace();\r\n                                        }\r\n\r\n\r\n                                        //updating for transition days of different year\r\n                                        if (finalLastUpdatedYear < currentYear) {\r\n                                            yearly = 0;\r\n                                            this_month = 0;\r\n                                            //updating for transition days of different month in different year\r\n                                            if (finalLastUpdatedMonth == 12 && currentMonth == 1) {\r\n                                                last_month = this_month;\r\n                                                //updating for transition days of different month different year of time span of more than 2 weeks\r\n                                                if (elapsedDays > currentDay + 7) {\r\n                                                    last_week = 0;\r\n                                                    this_week = 0;\r\n                                                }\r\n                                                //updating for transition days of different month different year of previous week\r\n                                                else if (elapsedDays > currentDay && elapsedDays <= currentDay + 7) {\r\n                                                    last_week = this_week;\r\n                                                    this_week = 0;\r\n                                                }\r\n                                            } else last_month = 0;\r\n                                        }\r\n                                        //updating for transition days of same year\r\n                                        else {\r\n                                            //updating for transition days of different month in different year\r\n                                            if (finalLastUpdatedMonth < currentMonth) {\r\n                                                this_month = 0;\r\n                                                //updating for transition days of just previous month\r\n                                                if ((finalLastUpdatedMonth - currentMonth) == 1) {\r\n                                                    last_month = this_month;\r\n                                                    //updating for transition days of different month different year of time span of more than 2 weeks\r\n                                                    if (elapsedDays > currentDay + 7) {\r\n                                                        last_week = 0;\r\n                                                        this_week = 0;\r\n                                                    }\r\n                                                    //updating for transition days of different month different year of previous week\r\n                                                    else if (elapsedDays > currentDay && elapsedDays <= currentDay + 7) {\r\n                                                        last_week = this_week;\r\n                                                        this_week = 0;\r\n                                                    }\r\n                                                } else {\r\n                                                    last_month = 0;\r\n                                                    last_week = 0;\r\n                                                    this_week = 0;\r\n                                                }\r\n                                            } else {\r\n                                                //updating for transition days of same month same year of time span of more than 2 weeks\r\n                                                if (elapsedDays > currentDay + 7) {\r\n                                                    last_week = 0;\r\n                                                    this_week = 0;\r\n                                                }\r\n                                                //updating for transition days of same month same year of time span of less than 2 weeks\r\n                                                else if (elapsedDays > currentDay && elapsedDays <= currentDay + 7) {\r\n                                                    last_week = this_week;\r\n                                                    this_week = 0;\r\n                                                }\r\n                                            }\r\n                                        }\r\n\r\n\r\n                                        //calculating rating for joined\r\n                                        int rating = (int) (2.5 * (joinedContest - previousJoinedContests));\r\n                                        //updating current instance of increasing followers list\r\n                                        all_time += (2.5 * joinedContest);\r\n                                        if (finalLastUpdatedYear == currentYear) {\r\n                                            yearly += rating;\r\n                                            if (finalLastUpdatedMonth == currentMonth)\r\n                                                this_month += rating;\r\n                                        }\r\n                                        if (elapsedDays <= currentDay)\r\n                                            this_week += rating;\r\n\r\n                                        //calculating rating for created\r\n                                        rating = 5 * (createdContest - previousCreatedContest);\r\n                                        //updating current instance of increasing followers list\r\n                                        all_time += (5 * createdContest);\r\n                                        if (finalLastUpdatedYear == currentYear) {\r\n                                            yearly += rating;\r\n                                            if (finalLastUpdatedMonth == currentMonth)\r\n                                                this_month += rating;\r\n                                        }\r\n                                        if (elapsedDays <= currentDay) this_week += rating;\r\n\r\n                                        Log.d(TAG, \"updateLeaderboard: contests \" + all_time + \",\" + yearly + \",\" + last_month + \",\" + this_month + \",\" + last_week + \",\" + this_week);\r\n                                        reference.child(getString(R.string.dbname_leaderboard)).child(user_id).child(getString(R.string.field_all_time)).child(getString(R.string.field_contest)).setValue(all_time);\r\n                                        reference.child(getString(R.string.dbname_leaderboard)).child(user_id).child(getString(R.string.field_yearly)).child(getString(R.string.field_contest)).setValue(yearly);\r\n                                        reference.child(getString(R.string.dbname_leaderboard)).child(user_id).child(getString(R.string.field_last_month)).child(getString(R.string.field_contest)).setValue(last_month);\r\n                                        reference.child(getString(R.string.dbname_leaderboard)).child(user_id).child(getString(R.string.field_this_month)).child(getString(R.string.field_contest)).setValue(this_month);\r\n                                        reference.child(getString(R.string.dbname_leaderboard)).child(user_id).child(getString(R.string.field_last_week)).child(getString(R.string.field_contest)).setValue(last_week);\r\n                                        reference.child(getString(R.string.dbname_leaderboard)).child(user_id).child(getString(R.string.field_this_week)).child(getString(R.string.field_contest)).setValue(this_week);\r\n                                        reference.child(getString(R.string.dbname_leaderboard)).child(user_id).child(getString(R.string.joined_contest)).setValue(joinedContest);\r\n                                        reference.child(getString(R.string.dbname_leaderboard)).child(user_id).child(getString(R.string.created_contest)).setValue(createdContest);\r\n\r\n                                        reference.child(getString(R.string.dbname_users)).child(user_id).child(getString(R.string.changedCreatedContest)).setValue(\"false\");\r\n                                        reference.child(getString(R.string.dbname_users)).child(user_id).child(getString(R.string.changedJoinedContest)).setValue(\"false\");\r\n                                    }\r\n\r\n                                    @Override\r\n                                    public void onCancelled(@NonNull DatabaseError databaseError) {\r\n                                    }\r\n                                });\r\n\r\n                            }\r\n\r\n                            @Override\r\n                            public void onCancelled(@NonNull DatabaseError databaseError) {\r\n                            }\r\n                        });\r\n                    }\r\n\r\n                    //updating username and domain\r\n                    reference.child(getString(R.string.dbname_leaderboard)).child(user_id).child(getString(R.string.field_username)).setValue(username);\r\n                    reference.child(getString(R.string.dbname_leaderboard)).child(user_id).child(getString(R.string.field_domain)).setValue(domain);\r\n                    reference.child(getString(R.string.dbname_leaderboard)).child(user_id).child(getString(R.string.profile_photo)).setValue(profilePhoto);\r\n                    reference.child(getString(R.string.dbname_leaderboard)).child(user_id).child(getString(R.string.field_last_updated)).setValue(currentTimeStamp);\r\n                }\r\n\r\n                //final date update\r\n                reference.child(getString(R.string.last_updated)).setValue(currentTimeStamp);\r\n\r\n            }\r\n\r\n            @Override\r\n            public void onCancelled(@NonNull DatabaseError databaseError) {\r\n            }\r\n        });\r\n    }\r\n\r\n    private void checkOrGetLocation() {\r\n        Log.d(TAG, \"checkOrGetLocation: started\");\r\n        if (ActivityCompat.checkSelfPermission(getApplicationContext(), Manifest.permission.ACCESS_FINE_LOCATION) != PackageManager.PERMISSION_GRANTED && ActivityCompat.checkSelfPermission(getApplicationContext(), Manifest.permission.ACCESS_COARSE_LOCATION) != PackageManager.PERMISSION_GRANTED)\r\n            ActivityCompat.requestPermissions((Activity) mContext, new String[]{Manifest.permission.ACCESS_FINE_LOCATION}, 10);\r\n        else {\r\n            Log.d(TAG, \"checkOrGetLocation: permission checked\");\r\n            LocationManager manager = (LocationManager) getSystemService(Context.LOCATION_SERVICE);\r\n            if (!manager.isProviderEnabled(LocationManager.GPS_PROVIDER)) {\r\n                Log.d(TAG, \"checkOrGetLocation: gps provider unavailable\");\r\n                final AlertDialog.Builder builder = new AlertDialog.Builder(this);\r\n                builder.setMessage(\"Your GPS seems to be disabled, do you want to enable it?\")\r\n                        .setCancelable(false)\r\n                        .setPositiveButton(\"Yes\", (dialog, id) -> startActivity(new Intent(android.provider.Settings.ACTION_LOCATION_SOURCE_SETTINGS)))\r\n                        .setNegativeButton(\"No\", (dialog, id) -> dialog.cancel());\r\n                final AlertDialog alert = builder.create();\r\n                alert.show();\r\n            } else {\r\n                Log.d(TAG, \"checkOrGetLocation: gps provider available\");\r\n                manager.requestLocationUpdates(LocationManager.GPS_PROVIDER, 30000, 0, location -> {\r\n                    try {\r\n                        Geocoder geocoder = new Geocoder(mContext, Locale.getDefault());\r\n                        List<Address> addresses = geocoder.getFromLocation(location.getLatitude(), location.getLongitude(), 1);\r\n                        Log.d(TAG, \"checkOrGetLocation: addresses\" + addresses);\r\n                        String country = addresses.get(0).getCountryName();\r\n                        String city = addresses.get(0).getSubAdminArea();\r\n                        String area = addresses.get(0).getLocality();\r\n                        Log.d(TAG, \"checkOrGetLocation: addresse\" + addresses.get(0));\r\n                        FirebaseUser user = FirebaseAuth.getInstance().getCurrentUser();\r\n                        assert user != null;\r\n                        reference.child(getString(R.string.dbname_leaderboard)).child(user.getUid()).child(getString(R.string.field_last_known_location)).child(getString(R.string.field_city)).setValue(city);\r\n                        reference.child(getString(R.string.dbname_leaderboard)).child(user.getUid()).child(getString(R.string.field_last_known_location)).child(getString(R.string.field_country)).setValue(country);\r\n                        reference.child(getString(R.string.dbname_leaderboard)).child(user.getUid()).child(getString(R.string.field_last_known_location)).child(getString(R.string.field_area)).setValue(area);\r\n                    } catch (IOException e) {\r\n                        e.printStackTrace();\r\n                    }\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    public static Date parseDate(String stringToParse) {\r\n        Date date = null;\r\n        try {\r\n            date = new SimpleDateFormat(DATE_FORMAT_PATTERN).parse(stringToParse);\r\n            return date;\r\n        } catch (ParseException e) {\r\n            Log.d(TAG, \"parseDate: \" + e);\r\n        }\r\n        return null;\r\n    }\r\n\r\n    private boolean moreThanADay(Date previous, Date current) {\r\n\r\n        long diff = current.getTime() - previous.getTime();\r\n        long diffSeconds = diff / 1000 % 60;\r\n        long diffMinutes = diff / (60 * 1000) % 60;\r\n        long diffHours = diff / (60 * 60 * 1000);\r\n        int diffInDays = (int) ((current.getTime() - current.getTime()) / (1000 * 60 * 60 * 24));\r\n\r\n        Log.d(TAG, \"moreThanADay: diff:\" + diff);\r\n        Log.d(TAG, \"moreThanADay: diffSeconds:\" + diffSeconds);\r\n        Log.d(TAG, \"moreThanADay: diffMinutes:\" + diffMinutes);\r\n        Log.d(TAG, \"moreThanADay: diffHours:\" + diffHours);\r\n        Log.d(TAG, \"moreThanADay: diffInDays:\" + diffInDays);\r\n\r\n//        if (diffInDays > 1 || diffHours >= 24) {\r\n//            return true;\r\n//        }\r\n//        return false;\r\n\r\n\r\n        return diffInDays > 1 || diffHours >= 24;\r\n    }\r\n\r\n    private void filter() {\r\n        swipeRefreshLayout.setRefreshing(true);\r\n        mRecyclerView.setVisibility(View.GONE);\r\n        //deciding parameter for time and assigning field to search in\r\n        switch ((String) sortedByTime.getText()) {\r\n            case \"All Time\":\r\n            default:\r\n                time = getString(R.string.field_all_time);\r\n                break;\r\n            case \"This Year\":\r\n                time = getString(R.string.field_yearly);\r\n                break;\r\n            case \"Last Month\":\r\n                time = getString(R.string.field_last_month);\r\n                break;\r\n            case \"This Month\":\r\n                time = getString(R.string.field_this_month);\r\n                break;\r\n            case \"Last Week\":\r\n                time = getString(R.string.field_last_week);\r\n                break;\r\n            case \"This Week\":\r\n                time = getString(R.string.field_this_week);\r\n                break;\r\n        }\r\n\r\n        //deciding parameter for location and assigning field to search in\r\n        switch ((String) sortedByLocation.getText()) {\r\n            case \"Country\":\r\n                locationParameter = getString(R.string.field_country);\r\n                break;\r\n            case \"City\":\r\n                locationParameter = getString(R.string.field_city);\r\n                break;\r\n            case \"Area\":\r\n                locationParameter = getString(R.string.field_area);\r\n                break;\r\n            case \"World\":\r\n                locationParameter = \"\";\r\n            default:\r\n\r\n        }\r\n\r\n        //deciding domain parmaeter\r\n        switch ((String) sortedByDomain.getText()) {\r\n            case \"Overall\":\r\n            case \"Domain\":\r\n                domainParameter = \"\";\r\n                break;\r\n            default:\r\n                domainParameter = (String) sortedByDomain.getText();\r\n                break;\r\n        }\r\n        Log.d(TAG, \"filter: \" + domainParameter);\r\n        mList.clear();\r\n        mAdapter.notifyDataSetChanged();\r\n        String finalTime = time;\r\n        String finalLocationParameter = locationParameter;\r\n//        String finalTypeParameter = typeParameter;\r\n//        Log.d(TAG, \"filter: \"+finalTime);\r\n//        Log.d(TAG, \"filter: \"+finalLocationParameter);\r\n//        Log.d(TAG, \"filter: \"+finalTypeParameter);\r\n        Query query = reference.child(getString(R.string.dbname_leaderboard)).child(currentUser);\r\n        query.addListenerForSingleValueEvent(new ValueEventListener() {\r\n            @Override\r\n            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {\r\n                if (dataSnapshot.exists()) {\r\n                    //user details\r\n                    int userRating = (int) (long) dataSnapshot.child(finalTime).child(getString(R.string.field_followers)).getValue() + (int) (long) dataSnapshot.child(finalTime).child(getString(R.string.field_contest)).getValue();\r\n//                String userDomain = (String) dataSnapshot.child(getString(R.string.field_domain)).getValue();\r\n                    String userUsername = (String) dataSnapshot.child(getString(R.string.field_username)).getValue();\r\n                    //query for leaderboard database\r\n                    Query query1 = reference.child(getString(R.string.dbname_leaderboard));\r\n                    query1.addListenerForSingleValueEvent(new ValueEventListener() {\r\n                        int rank = 1;\r\n\r\n                        @Override\r\n                        public void onDataChange(@NonNull DataSnapshot dataSnapshot) {\r\n                            for (DataSnapshot singleSnapshot : dataSnapshot.getChildren()) {\r\n                                //getting user ids, username and profile photos\r\n                                String user_id = singleSnapshot.getKey();\r\n                                String username = (String) singleSnapshot.child(getString(R.string.field_username)).getValue();\r\n                                String profileUrl = (String) singleSnapshot.child(getString(R.string.profile_photo)).getValue();\r\n                                String domain = (String) singleSnapshot.child(getString(R.string.field_domain)).getValue();\r\n\r\n                                if (user_id == null || username == null || profileUrl == null || domain == null)\r\n                                    continue;\r\n                                Log.d(TAG, \"onDataChange: domain\" + domain);\r\n                                if (domainParameter.equals(\"\") || domain.equals(domainParameter)) {\r\n                                    //calculating total rating and type rating for filter 1 and filter 3\r\n                                    int rating = (int) (long) dataSnapshot.child(user_id).child(finalTime).child(getString(R.string.field_followers)).getValue() + (int) (long) dataSnapshot.child(user_id).child(finalTime).child(getString(R.string.field_contest)).getValue();\r\n                                    //calculating location wise rating for filter 2 by getting last known location\r\n                                    if (!finalLocationParameter.equals(\"\")) {\r\n                                        Query query = reference.child(getString(R.string.dbname_leaderboard)).child(currentUser).child(getString(R.string.field_last_known_location)).child(finalLocationParameter);\r\n                                        query.addListenerForSingleValueEvent(new ValueEventListener() {\r\n                                            @Override\r\n                                            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {\r\n                                                if (dataSnapshot.exists()) {\r\n                                                    String userLocation = (String) dataSnapshot.getValue();\r\n                                                    String testLocation = (String) singleSnapshot.child(getString(R.string.field_last_known_location)).child(finalLocationParameter).getValue();\r\n                                                    if (testLocation != null && testLocation.equals(userLocation) && !user_id.equals(getString(R.string.orion_team_user_id)))\r\n                                                        rank = addToLeaderboard(rank, userRating, username, rating, profileUrl, user_id);\r\n                                                    mRecyclerView.setVisibility(View.VISIBLE);\r\n                                                    mAdapter.notifyDataSetChanged();\r\n                                                    YoYo.with(Techniques.Landing).duration(ANIMATION_DURATION).playOn(mRecyclerView);\r\n                                                    String rankText = \"#\" + rank;\r\n                                                    userItemUsername.setText(userUsername);\r\n                                                    userItemRank.setText(rankText);\r\n                                                    assert userLocation != null;\r\n                                                    if (!userLocation.equals(\"\"))\r\n                                                        sortedByLocation.setText(userLocation);\r\n                                                    sortedByLocation.setTextSize(TypedValue.COMPLEX_UNIT_SP, 18);\r\n                                                    YoYo.with(Techniques.Tada).duration(ANIMATION_DURATION).playOn(sortedByLocation);\r\n                                                    swipeRefreshLayout.setRefreshing(false);\r\n                                                } else\r\n                                                    checkOrGetLocation();\r\n                                            }\r\n\r\n                                            @Override\r\n                                            public void onCancelled(@NonNull DatabaseError databaseError) {\r\n                                            }\r\n                                        });\r\n                                    }\r\n                                    //for rest cases where location will not be a parameter\r\n                                    else if (!user_id.equals(getString(R.string.orion_team_user_id)))\r\n                                        rank = addToLeaderboard(rank, userRating, username, rating, profileUrl, user_id);\r\n\r\n                                    mRecyclerView.setVisibility(View.VISIBLE);\r\n                                    mAdapter.notifyDataSetChanged();\r\n                                    YoYo.with(Techniques.Landing).duration(ANIMATION_DURATION).playOn(mRecyclerView);\r\n                                    String rankText = \"#\" + rank;\r\n                                    userItemUsername.setText(userUsername);\r\n                                    userItemRank.setText(rankText);\r\n                                    swipeRefreshLayout.setRefreshing(false);\r\n                                }\r\n                            }\r\n                            swipeRefreshLayout.setRefreshing(false);\r\n                        }\r\n\r\n                        @Override\r\n                        public void onCancelled(@NonNull DatabaseError databaseError) {\r\n                            swipeRefreshLayout.setRefreshing(false);\r\n                        }\r\n                    });\r\n                } else {\r\n                    Toast.makeText(mContext, \"Waiting for leaderboard to update\", Toast.LENGTH_LONG).show();\r\n                    SNTPClient.getDate(TimeZone.getTimeZone(\"Asia/Kolkata\"), new SNTPClient.Listener() {\r\n                        @Override\r\n                        public void onTimeReceived(String rawDate) {\r\n                            updateLeaderboard(rawDate);\r\n                        }\r\n\r\n                        @Override\r\n                        public void onError(Exception ex) {\r\n\r\n                        }\r\n                    });\r\n                }\r\n            }\r\n\r\n            @Override\r\n            public void onCancelled(@NonNull DatabaseError databaseError) {\r\n                swipeRefreshLayout.setRefreshing(false);\r\n            }\r\n        });\r\n    }\r\n\r\n    private int addToLeaderboard(int rank, int userRating, String username, int rating, String profileUrl, String user_id) {\r\n        Log.d(TAG, \"addToLeaderboard: adding\" + user_id);\r\n        if (userRating < rating)\r\n            rank++;\r\n        if (mList.size() == 0)\r\n            mList.add(new ItemLeaderboard(username, rating, profileUrl, user_id));\r\n        else {\r\n            int l = mList.size();\r\n            //loop to push in between and next one further away\r\n            for (int i = 0; i < l; i++) {\r\n                int r = Integer.parseInt(mList.get(i).getPostionParameter());\r\n                if (rating >= r) {\r\n                    mList.add(new ItemLeaderboard(\"\", 0, \"\", \"\"));\r\n                    for (int j = mList.size() - 1; j > i; j--)\r\n                        mList.set(j, mList.get(j - 1));\r\n                    mList.set(i, new ItemLeaderboard(username, rating, profileUrl, user_id));\r\n                    break;\r\n                }\r\n                //pushing at the end\r\n                else if (i == l - 1)\r\n                    mList.add(new ItemLeaderboard(username, rating, profileUrl, user_id));\r\n            }\r\n        }\r\n        //removing extra nodes\r\n        if (mList.size() == LEADERBOAD_SIZE + 1) mList.remove(LEADERBOAD_SIZE);\r\n        return rank;\r\n    }\r\n\r\n\r\n    private void initializeWidgets() {\r\n        Log.e(TAG, \"initializeWidgets: \");\r\n\r\n        mContext = LeaderboardActivity.this;\r\n        firebaseMethods = new FirebaseMethods(mContext);\r\n        mRecyclerView = findViewById(R.id.recyclerView);\r\n        cross = findViewById(R.id.cross);\r\n        mSearchParam = findViewById(R.id.search);\r\n\r\n        mListView = findViewById(R.id.listview);\r\n\r\n        mRecyclerView.setLayoutManager(new LinearLayoutManager(LeaderboardActivity.this));\r\n        //initializing widgets\r\n        userItemUsername = findViewById(R.id.userItemUsername);\r\n        userItemRank = findViewById(R.id.userItemRank);\r\n        sortedByTime = findViewById(R.id.sortedByTime);\r\n        sortedByLocation = findViewById(R.id.sortedByLocation);\r\n//        sortedByType = findViewById(R.id.sortedByType);\r\n        sortedByDomain = findViewById(R.id.sortedByDomain);\r\n        swipeRefreshLayout = findViewById(R.id.swiperefresh);\r\n        YoYo.with(Techniques.BounceIn).duration(ANIMATION_DURATION).playOn(sortedByTime);\r\n        YoYo.with(Techniques.BounceIn).duration(ANIMATION_DURATION).playOn(sortedByLocation);\r\n//        YoYo.with(Techniques.BounceIn).duration(ANIMATION_DURATION).playOn(sortedByType);\r\n        YoYo.with(Techniques.BounceIn).duration(ANIMATION_DURATION).playOn(sortedByDomain);\r\n//        usernameProfile=findViewById(R.id.username);\r\n\r\n        mList = new ArrayList<>();\r\n        mAdapter = new AdapterLeaderboard(mList, mContext);\r\n        mAdapter.setHasStableIds(true);\r\n        mRecyclerView.setAdapter(mAdapter);\r\n        reference = FirebaseDatabase.getInstance().getReference();\r\n\r\n        FirebaseUser user = FirebaseAuth.getInstance().getCurrentUser();\r\n        assert user != null;\r\n        currentUser = user.getUid();\r\n\r\n        time = \"\";\r\n        locationParameter = \"\";\r\n//        typeParameter = \"\";\r\n    }\r\n\r\n    private void setupFirebaseAuth() {\r\n        Log.d(TAG, \"setup FirebaseAuth: setting up firebase auth.\");\r\n        mAuth = FirebaseAuth.getInstance();\r\n        mAuthListener = firebaseAuth -> {\r\n            mUser = firebaseAuth.getCurrentUser();\r\n            if (mUser == null) {\r\n                Log.d(TAG, \"onAuthStateChanged:signed_out\");\r\n                Log.d(TAG, \"onAuthStateChanged: navigating to login\");\r\n                SharedPreferences settings = getSharedPreferences(\"shared preferences\", Context.MODE_PRIVATE);\r\n                new android.app.AlertDialog.Builder(mContext)\r\n                        .setTitle(\"No user logon found\")\r\n                        .setMessage(\"We will be logging u out. \\n Please try to log in again\")\r\n                        .setPositiveButton(android.R.string.ok, (dialog, which) -> {\r\n                            Intent intent = new Intent(mContext, LoginActivity.class);\r\n                            intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_CLEAR_TASK | Intent.FLAG_ACTIVITY_CLEAR_TOP);\r\n                            settings.edit().clear().apply();\r\n                            if (mAuthListener != null) mAuth.removeAuthStateListener(mAuthListener);\r\n                            startActivity(intent);\r\n                        })\r\n                        .show();\r\n            } else Log.d(TAG, \"onAuthStateChanged: signed_in:\" + mUser.getUid());\r\n        };\r\n    }\r\n\r\n    @Override\r\n    public void onStart() {\r\n        super.onStart();\r\n        mAuth.addAuthStateListener(mAuthListener);\r\n    }\r\n\r\n    @Override\r\n    public void onStop() {\r\n        super.onStop();\r\n        if (mAuthListener != null) mAuth.removeAuthStateListener(mAuthListener);\r\n    }\r\n\r\n    private void setupBottomNavigationView() {\r\n        Log.d(TAG, \" setupBottomNavigationView:setting up BottomNavigationView\");\r\n        BottomNavigationViewEx bottomNavigationViewEx = findViewById(R.id.BottomNavViewBar);\r\n        BottomNaavigationViewHelper.setupBottomNavigationView(bottomNavigationViewEx, this);\r\n        BottomNaavigationViewHelper.enableNavigation(LeaderboardActivity.this, this, bottomNavigationViewEx);\r\n        Menu menu = bottomNavigationViewEx.getMenu();\r\n        MenuItem menuItem = menu.getItem(ACTIVITY_NUM);\r\n        menuItem.setChecked(true);\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/orion/orion/LeaderboardActivity.java	(revision cf7597ca1ff027f96fc145e942172638654ff2b2)
+++ app/src/main/java/com/orion/orion/LeaderboardActivity.java	(date 1623647160389)
@@ -12,6 +12,7 @@
 import android.location.LocationManager;
 import android.os.Build;
 import android.os.Bundle;
+import android.os.Handler;
 import android.text.Editable;
 import android.text.TextWatcher;
 import android.util.Log;
@@ -1214,4 +1215,24 @@
         MenuItem menuItem = menu.getItem(ACTIVITY_NUM);
         menuItem.setChecked(true);
     }
+    private Boolean exit = false;
+
+    @Override
+    public void onBackPressed() {
+        if (exit) {
+            moveTaskToBack(true); // finish activity
+        } else {
+            Toast.makeText(this, "Press Back again to Exit.",
+                    Toast.LENGTH_SHORT).show();
+            exit = true;
+            new Handler().postDelayed(new Runnable() {
+                @Override
+                public void run() {
+                    exit = false;
+                }
+            }, 2 * 1000);
+
+        }
+
+    }
 }
\ No newline at end of file
Index: app/src/main/java/com/orion/orion/profile/ProfileActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.orion.orion.profile;\r\n\r\nimport android.annotation.SuppressLint;\r\nimport android.app.AlertDialog;\r\nimport android.app.ProgressDialog;\r\nimport android.content.ActivityNotFoundException;\r\nimport android.content.Context;\r\nimport android.content.Intent;\r\nimport android.content.SharedPreferences;\r\nimport android.net.Uri;\r\nimport android.os.Build;\r\nimport android.os.Bundle;\r\nimport android.util.Log;\r\nimport android.view.Menu;\r\nimport android.view.MenuItem;\r\nimport android.view.View;\r\nimport android.webkit.URLUtil;\r\nimport android.widget.ImageView;\r\nimport android.widget.LinearLayout;\r\nimport android.widget.ScrollView;\r\nimport android.widget.TextView;\r\nimport android.widget.Toast;\r\n\r\nimport com.bumptech.glide.Glide;\r\nimport com.google.firebase.auth.FirebaseAuth;\r\nimport com.google.firebase.auth.FirebaseUser;\r\nimport com.google.firebase.database.DataSnapshot;\r\nimport com.google.firebase.database.DatabaseError;\r\nimport com.google.firebase.database.DatabaseReference;\r\nimport com.google.firebase.database.FirebaseDatabase;\r\nimport com.google.firebase.database.Query;\r\nimport com.google.firebase.database.ValueEventListener;\r\nimport com.google.gson.Gson;\r\nimport com.ittianyu.bottomnavigationviewex.BottomNavigationViewEx;\r\nimport com.orion.orion.R;\r\nimport com.orion.orion.login.LoginActivity;\r\nimport com.orion.orion.models.Photo;\r\nimport com.orion.orion.models.users;\r\nimport com.orion.orion.profile.Account.AccountSettingActivity;\r\nimport com.orion.orion.util.BottomNaavigationViewHelper;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.Objects;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.annotation.Nullable;\r\nimport androidx.annotation.RequiresApi;\r\nimport androidx.appcompat.app.AppCompatActivity;\r\nimport androidx.recyclerview.widget.GridLayoutManager;\r\nimport androidx.recyclerview.widget.RecyclerView;\r\nimport de.hdodenhof.circleimageview.CircleImageView;\r\n\r\n\r\npublic class ProfileActivity extends AppCompatActivity {\r\n\r\n    public static final int VERIFY_PERMISSION_REQUEST = 1;\r\n    private static final String TAG = \"ProfileFragment\";\r\n    private static final int ACTIVITY_NUM = 4;\r\n    FirebaseUser user;\r\n    int rank = 1;\r\n    int mResults;\r\n    private Context mContext;\r\n    private FirebaseAuth mAuth;\r\n    private FirebaseAuth.AuthStateListener mAuthListener;\r\n    private DatabaseReference myRef;\r\n    ScrollView scrollView;\r\n    private ArrayList<Photo> imgURLsList;\r\n    private ArrayList<Photo> paginatedimgURLsList;\r\n    boolean isKitKat;\r\n    //    Profile Widgets\r\n    private ImageView menu;\r\n    private TextView mUsername;\r\n    private TextView mDomain;\r\n    private CircleImageView mProfilePhoto;\r\n    private ProgressDialog dialog;\r\n\r\n    private ImageView mGmailLink;\r\n    private ImageView mInstagramLink;\r\n    private ImageView mFacebookLink;\r\n    private ImageView mTwitterLink;\r\n    private ImageView mWhatsappLink;\r\n\r\n    private String gmail;\r\n    private String instagramProfile;\r\n    private String facebookProfile;\r\n    private String twitterProfile;\r\n\r\n    private TextView mPosts;\r\n    private TextView mFans;\r\n    private TextView mWins;\r\n    private TextView mCreations;\r\n    private TextView mParticipation;\r\n    private TextView mRank;\r\n\r\n    private TextView judges;\r\n    private TextView gp;\r\n\r\n    private TextView noPost;\r\n\r\n    private TextView mDisplayName;\r\n    private TextView mDescription;\r\n    private TextView mLink1;\r\n    private TextView mLink2;\r\n    private TextView mLink3;\r\n    //    private TextView mWebsite;\r\n    private String whatsappNo;\r\n    private LinearLayout share_btn;\r\n    private RecyclerView gridRv;\r\n    private BottomNavigationViewEx bottomNavigationView;\r\n//    private AdapterGridImage adapterGridImage;\r\n    int c = 0;\r\n    //    SP\r\n    Gson gson;\r\n    SharedPreferences sp;\r\n\r\n    //firebase\r\n\r\n    @RequiresApi(api = Build.VERSION_CODES.LOLLIPOP)\r\n    @Override\r\n    protected void onCreate(@Nullable Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        setContentView(R.layout.fragment_profile);\r\n\r\n        dialog = ProgressDialog.show(this, \"\", \"Loading Profile...\", true);\r\n        mContext = ProfileActivity.this;\r\n        noPost = findViewById(R.id.noPost);\r\n        scrollView = findViewById(R.id.scroll);\r\n        menu = findViewById(R.id.menu);\r\n        mUsername = findViewById(R.id.username);\r\n        mDomain = findViewById(R.id.domain);\r\n        mProfilePhoto = findViewById(R.id.profile_photo);\r\n\r\n        mGmailLink = findViewById(R.id.gmail_link);\r\n        mInstagramLink = findViewById(R.id.instagram_link);\r\n        mFacebookLink = findViewById(R.id.facebook_link);\r\n        mTwitterLink = findViewById(R.id.twitter_link);\r\n        mWhatsappLink = findViewById(R.id.whatsapp_link);\r\n\r\n\r\n        mPosts = findViewById(R.id.posts);\r\n        mFans = findViewById(R.id.fans);\r\n        mWins = findViewById(R.id.win);\r\n        mCreations = findViewById(R.id.creations);\r\n        mParticipation = findViewById(R.id.participations);\r\n        mRank = findViewById(R.id.rank);\r\n\r\n        judges = findViewById(R.id.judge);\r\n        gp = findViewById(R.id.gp);\r\n\r\n        mDisplayName = findViewById(R.id.display_name);\r\n        mDescription = findViewById(R.id.description);\r\n        mLink1 = findViewById(R.id.link1);\r\n        mLink2 = findViewById(R.id.link2);\r\n        mLink3 = findViewById(R.id.link3);\r\n\r\n        share_btn = findViewById(R.id.share_skill_btn);\r\n\r\n        gridRv = findViewById(R.id.gridRv);\r\n\r\n        bottomNavigationView = findViewById(R.id.BottomNavViewBar);\r\n\r\n\r\n        gridRv.setHasFixedSize(true);\r\n        GridLayoutManager linearLayoutManager = new GridLayoutManager(this, 3);\r\n        gridRv.setLayoutManager(linearLayoutManager);\r\n        gridRv.setDrawingCacheQuality(View.DRAWING_CACHE_QUALITY_LOW);\r\n        linearLayoutManager.setItemPrefetchEnabled(true);\r\n        linearLayoutManager.setInitialPrefetchItemCount(20);\r\n        gridRv.setItemViewCacheSize(9);\r\n        gridRv.setDrawingCacheEnabled(true);\r\n        gridRv.setDrawingCacheQuality(View.DRAWING_CACHE_QUALITY_LOW);\r\n        gridRv.setLayoutManager(linearLayoutManager);\r\n\r\n        imgURLsList = new ArrayList<>();\r\n\r\n\r\n//          Initialize SharedPreference variables\r\n        sp = getSharedPreferences(\"shared preferences\", Context.MODE_PRIVATE);\r\n        gson = new Gson();\r\n        setupBottomNavigationView();\r\n        setupFirebaseAuth();\r\n//        fetchPhotosFromSp();\r\n//        SetupGridView();\r\n//        scrollView.getViewTreeObserver()\r\n//                .addOnScrollChangedListener(new ViewTreeObserver.OnScrollChangedListener() {\r\n//                    @Override\r\n//                    public void onScrollChanged() {\r\n//\r\n//                        if (scrollView.getChildAt(0).getBottom()\r\n//                                == (scrollView.getHeight() + scrollView.getScrollY()) && c != 0) {\r\n//\r\n//\r\n//                            //scroll view is at bottom\r\n//\r\n//                            Log.d(TAG, \"onScrollChanged: j\");\r\n//                            displayMorePhotos();\r\n////                            checkLoading();\r\n//\r\n//                        } else {\r\n////                            bottomProgress.setVisibility(View.GONE);\r\n//\r\n//                            //scroll view is not at bottom\r\n//                        }\r\n//                        c++;\r\n//                    }\r\n//\r\n//\r\n//                });\r\n\r\n        mGmailLink.setOnClickListener(v -> {\r\n            if (gmail != null && !gmail.equals(\"\")) {\r\n                Intent i = new Intent(Intent.ACTION_SEND);\r\n                i.setPackage(\"com.google.android.gm\");\r\n                i.setType(\"message/rfc822\");\r\n                i.putExtra(Intent.EXTRA_EMAIL, new String[]{gmail});\r\n                i.putExtra(Intent.EXTRA_SUBJECT, \"Orion\");\r\n                i.putExtra(Intent.EXTRA_TEXT, \"We from Orion would like to help and connect u with others out there\");\r\n                try {\r\n                    startActivity(Intent.createChooser(i, \"Send mail...\"));\r\n                } catch (android.content.ActivityNotFoundException ex) {\r\n                    Toast.makeText(mContext, \"There are no email clients installed.\", Toast.LENGTH_SHORT).show();\r\n                }\r\n            }\r\n        });\r\n        mInstagramLink.setOnClickListener(v -> {\r\n            Uri uri = Uri.parse(\"http://instagram.com/_u/\" + instagramProfile);\r\n            Intent likeIng = new Intent(Intent.ACTION_VIEW, uri);\r\n            likeIng.setPackage(\"com.instagram.android\");\r\n            try {\r\n                startActivity(likeIng);\r\n            } catch (ActivityNotFoundException e) {\r\n                startActivity(new Intent(Intent.ACTION_VIEW, Uri.parse(\"http://instagram.com/xxx\")));\r\n            }\r\n        });\r\n        mFacebookLink.setOnClickListener(v -> {\r\n            try {\r\n                Intent intent = new Intent(Intent.ACTION_VIEW, Uri.parse(\"fb://profile/426253597411506\"));\r\n                startActivity(intent);\r\n            } catch (Exception e) {\r\n                startActivity(new Intent(Intent.ACTION_VIEW, Uri.parse(\"http://www.facebook.com/appetizerandroid\")));\r\n            }\r\n        });\r\n        mTwitterLink.setOnClickListener(v -> {\r\n            Intent intent;\r\n            try {\r\n                this.getPackageManager().getPackageInfo(\"com.twitter.android\", 0);\r\n                intent = new Intent(Intent.ACTION_VIEW, Uri.parse(\"twitter://user?screen_name=\" + twitterProfile));\r\n                intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);\r\n            } catch (Exception e) {\r\n                intent = new Intent(Intent.ACTION_VIEW, Uri.parse(\"https://twitter.com/USERID_OR_PROFILENAME\"));\r\n            }\r\n            this.startActivity(intent);\r\n        });\r\n        mWhatsappLink.setOnClickListener(v -> {\r\n            if (whatsappNo != null && !whatsappNo.equals(\"\")) {\r\n                String url = \"https://api.whatsapp.com/send?phone=\" + whatsappNo;\r\n                Intent i = new Intent(Intent.ACTION_VIEW);\r\n                i.setData(Uri.parse(url));\r\n                startActivity(i);\r\n            }\r\n        });\r\n        mLink1.setOnClickListener(v -> {\r\n            try {\r\n                Uri uri = Uri.parse(String.valueOf(mLink1.getText()));\r\n                if (!URLUtil.isValidUrl(String.valueOf(mLink1.getText()))) {\r\n                    Toast.makeText(mContext, \" This is not a valid link\", Toast.LENGTH_LONG).show();\r\n                } else {\r\n                    Intent intent = new Intent(Intent.ACTION_VIEW);\r\n                    intent.setData(uri);\r\n                    mContext.startActivity(intent);\r\n                }\r\n            } catch (ActivityNotFoundException e) {\r\n                Toast.makeText(mContext, \" You don't have any browser to open web page\", Toast.LENGTH_LONG).show();\r\n            }\r\n        });\r\n        mLink2.setOnClickListener(v -> {\r\n            try {\r\n                Uri uri = Uri.parse(String.valueOf(mLink2.getText()));\r\n                if (!URLUtil.isValidUrl(String.valueOf(mLink2.getText()))) {\r\n                    Toast.makeText(mContext, \" This is not a valid link\", Toast.LENGTH_LONG).show();\r\n                } else {\r\n                    Intent intent = new Intent(Intent.ACTION_VIEW);\r\n                    intent.setData(uri);\r\n                    mContext.startActivity(intent);\r\n                }\r\n            } catch (ActivityNotFoundException e) {\r\n                Toast.makeText(mContext, \" You don't have any browser to open web page\", Toast.LENGTH_LONG).show();\r\n            }\r\n        });\r\n        mLink3.setOnClickListener(v -> {\r\n            try {\r\n                Uri uri = Uri.parse(String.valueOf(mLink3.getText()));\r\n                if (!URLUtil.isValidUrl(String.valueOf(mLink3.getText()))) {\r\n                    Toast.makeText(mContext, \" This is not a valid link\", Toast.LENGTH_LONG).show();\r\n                } else {\r\n                    Intent intent = new Intent(Intent.ACTION_VIEW);\r\n                    intent.setData(uri);\r\n                    mContext.startActivity(intent);\r\n                }\r\n            } catch (ActivityNotFoundException e) {\r\n                Toast.makeText(mContext, \" You don't have any browser to open web page\", Toast.LENGTH_LONG).show();\r\n            }\r\n        });\r\n//        share_btn.setOnClickListener(v -> {\r\n//            YoYo.with(Techniques.FadeIn).duration(500).playOn(share_btn);\r\n//            if (checkPermissionArray(Permissions.PERMISSIONS)) {\r\n//\r\n//                DialogPostSelection dialogPostSelection = new DialogPostSelection(ProfileActivity.this);\r\n//                dialogPostSelection.show();\r\n//            } else verifyPermission(Permissions.PERMISSIONS);\r\n//        });\r\n        menu.setOnClickListener(v -> {\r\n            Intent intent = new Intent(this, AccountSettingActivity.class);\r\n            startActivity(intent);\r\n            overridePendingTransition(R.anim.fade_in, R.anim.fade_out);\r\n        });\r\n    }\r\n\r\n    private void setUpInfoBox() {\r\n        getFans();\r\n        getPosts();\r\n        getWins();\r\n        getCreations();\r\n        getParticipation();\r\n        getGP();\r\n        getJudges();\r\n        mRank.setText(String.valueOf(rank));\r\n        getRank();\r\n        dialog.dismiss();\r\n    }\r\n\r\n    private void getJudges() {\r\n        Query query = myRef.child(getString(R.string.dbname_contests))\r\n                .child(mAuth.getCurrentUser().getUid())\r\n                .child(getString(R.string.field_contest_judged));\r\n        query.addValueEventListener(new ValueEventListener() {\r\n            @Override\r\n            public void onDataChange(@NonNull DataSnapshot snapshot) {\r\n                if (snapshot.exists()) {\r\n                    long size = (long) snapshot.getValue();\r\n//                mCreations.setText((int) size);\r\n                    judges.setText(String.valueOf(size));\r\n                } else {\r\n                    judges.setText(\"0\");\r\n                }\r\n            }\r\n\r\n            @Override\r\n            public void onCancelled(@NonNull DatabaseError error) {\r\n                mCreations.setText(\"?\");\r\n            }\r\n        });\r\n\r\n    }\r\n\r\n    private void getGP() {\r\n        Query query = myRef.child(mContext.getString(R.string.dbname_contests))\r\n                .child(mAuth.getCurrentUser().getUid())\r\n                .child(getString(R.string.field_contest_completed));\r\n        query.addListenerForSingleValueEvent(new ValueEventListener() {\r\n            @SuppressLint(\"SetTextI18n\")\r\n            @Override\r\n            public void onDataChange(@NonNull DataSnapshot snapshot) {\r\n                if (snapshot.exists()) {\r\n                    long y = (long) snapshot.getValue();\r\n                    myRef.child(mContext.getString(R.string.dbname_contests))\r\n                            .child(mAuth.getCurrentUser().getUid())\r\n                            .child(getString(R.string.field_contest_reports))\r\n                            .addListenerForSingleValueEvent(new ValueEventListener() {\r\n                                @Override\r\n                                public void onDataChange(@NonNull DataSnapshot snapshot) {\r\n                                    if (snapshot.exists()) {\r\n                                        long x = (long) snapshot.getValue();\r\n                                        gp.setText((100 - (((x * 100) / y))) + \"%\");\r\n                                    } else gp.setText(\"100%\");\r\n                                }\r\n\r\n                                @Override\r\n                                public void onCancelled(@NonNull DatabaseError error) {\r\n                                    gp.setText(\"100%\");\r\n                                }\r\n                            });\r\n\r\n                } else gp.setText(\"100%\");\r\n\r\n            }\r\n\r\n            @Override\r\n            public void onCancelled(@NonNull DatabaseError error) {\r\n\r\n            }\r\n        });\r\n    }\r\n\r\n    private void getFans() {\r\n        Query query = myRef.child(getString(R.string.dbname_follower)).child(user.getUid());\r\n        query.addValueEventListener(new ValueEventListener() {\r\n            @Override\r\n            public void onDataChange(@NonNull DataSnapshot snapshot) {\r\n                if (snapshot.exists()) {\r\n                    int size = (int) snapshot.getChildrenCount();\r\n                    Log.d(TAG, \"setUpInfoBox: fansCount\" + size);\r\n                    if (size == 0) mFans.setText(\"0\");\r\n                    else mFans.setText(String.valueOf(size));\r\n                } else {\r\n                    mFans.setText(\"0\");\r\n                }\r\n            }\r\n\r\n            @Override\r\n            public void onCancelled(@NonNull DatabaseError error) {\r\n                mFans.setText(\"?\");\r\n            }\r\n        });\r\n    }\r\n\r\n    private void getPosts() {\r\n        Query query = myRef.child(getString(R.string.dbname_user_photos)).child(user.getUid());\r\n        query.addValueEventListener(new ValueEventListener() {\r\n            @Override\r\n            public void onDataChange(@NonNull DataSnapshot snapshot) {\r\n                if (snapshot.exists()) {\r\n                    int size = (int) snapshot.getChildrenCount();\r\n                    Log.d(TAG, \"setUpInfoBox: postsCount\" + size);\r\n                    if (size == 0) mPosts.setText(\"0\");\r\n                    else mPosts.setText(String.valueOf(size));\r\n                } else {\r\n                    mPosts.setText(\"0\");\r\n                }\r\n            }\r\n\r\n            @Override\r\n            public void onCancelled(@NonNull DatabaseError error) {\r\n                mPosts.setText(\"?\");\r\n            }\r\n        });\r\n    }\r\n\r\n    private void getWins() {\r\n        Query query = myRef.child(getString(R.string.dbname_contests)).child(user.getUid()).child(getString(R.string.field_contest_wins));\r\n        query.addValueEventListener(new ValueEventListener() {\r\n            @Override\r\n            public void onDataChange(@NonNull DataSnapshot snapshot) {\r\n                if (snapshot.exists()) {\r\n                    long size = (long) snapshot.getValue();\r\n                    Log.d(TAG, \"setUpInfoBox: creations\" + size);\r\n//                mCreations.setText((int) size);\r\n                    mWins.setText(String.valueOf(size));\r\n                } else {\r\n                    mWins.setText(\"0\");\r\n                }\r\n            }\r\n\r\n            @Override\r\n            public void onCancelled(@NonNull DatabaseError error) {\r\n                mCreations.setText(\"?\");\r\n            }\r\n        });\r\n    }\r\n\r\n    private void getCreations() {\r\n        Query query = myRef.child(getString(R.string.dbname_contests)).child(user.getUid()).child(getString(R.string.field_contest_completed));\r\n        query.addValueEventListener(new ValueEventListener() {\r\n            @Override\r\n            public void onDataChange(@NonNull DataSnapshot snapshot) {\r\n                if (snapshot.exists()) {\r\n                    long size = (long) snapshot.getValue();\r\n                    Log.d(TAG, \"setUpInfoBox: creations\" + size);\r\n//                mCreations.setText((int) size);\r\n                    mCreations.setText(String.valueOf(size));\r\n                } else {\r\n                    mCreations.setText(\"0\");\r\n                }\r\n            }\r\n\r\n            @Override\r\n            public void onCancelled(@NonNull DatabaseError error) {\r\n                mCreations.setText(\"?\");\r\n            }\r\n        });\r\n    }\r\n\r\n    private void getParticipation() {\r\n        Query query = myRef.child(getString(R.string.dbname_contests)).child(user.getUid()).child(getString(R.string.field_contest_participated));\r\n        query.addValueEventListener(new ValueEventListener() {\r\n            @Override\r\n            public void onDataChange(@NonNull DataSnapshot snapshot) {\r\n                if (snapshot.exists()) {\r\n                    long size = (long) snapshot.getValue();\r\n                    Log.d(TAG, \"setUpInfoBox: participationsCount\" + size);\r\n//                mParticipation.setText((int) size);\r\n                    mParticipation.setText(String.valueOf(size));\r\n                } else {\r\n                    mParticipation.setText(\"0\");\r\n\r\n                }\r\n            }\r\n\r\n            @Override\r\n            public void onCancelled(@NonNull DatabaseError error) {\r\n                mParticipation.setText(\"?\");\r\n            }\r\n        });\r\n    }\r\n\r\n    private void getRank() {\r\n        Query query = myRef.child(getString(R.string.dbname_leaderboard)).child(user.getUid());\r\n        query.addListenerForSingleValueEvent(new ValueEventListener() {\r\n            @Override\r\n            public void onDataChange(@NonNull DataSnapshot snapshot) {\r\n                int userRating = (int) (long) snapshot.child(getString(R.string.field_all_time)).child(getString(R.string.field_followers)).getValue()\r\n                        + (int) (long) snapshot.child(getString(R.string.field_all_time)).child(getString(R.string.field_contest)).getValue();\r\n                Query query1 = myRef.child(getString(R.string.dbname_leaderboard));\r\n                query1.addListenerForSingleValueEvent(new ValueEventListener() {\r\n                    @Override\r\n                    public void onDataChange(@NonNull DataSnapshot snapshot) {\r\n                        for (DataSnapshot singleSnapshot : snapshot.getChildren()) {\r\n                            int rating = (int) (long) singleSnapshot.child(getString(R.string.field_all_time)).child(getString(R.string.field_followers)).getValue()\r\n                                    + (int) (long) singleSnapshot.child(getString(R.string.field_all_time)).child(getString(R.string.field_contest)).getValue();\r\n                            if (rating >= userRating && !user.getUid().equals(singleSnapshot.getKey()) && !singleSnapshot.getKey().equals(getString(R.string.orion_team_user_id)))\r\n                                updateRank();\r\n                        }\r\n                    }\r\n\r\n                    @Override\r\n                    public void onCancelled(@NonNull DatabaseError error) {\r\n                        mRank.setText(\"?\");\r\n                    }\r\n                });\r\n            }\r\n\r\n            @Override\r\n            public void onCancelled(@NonNull DatabaseError error) {\r\n                mRank.setText(\"?\");\r\n            }\r\n        });\r\n    }\r\n\r\n    private void updateRank() {\r\n        rank += 1;\r\n        mRank.setText(String.valueOf(rank));\r\n    }\r\n\r\n//    private void fetchPhotosFromSp() {\r\n//        String json = sp.getString(\"myMedia\", null);\r\n//        Type type = new TypeToken<ArrayList<Photo>>() {\r\n//        }.getType();\r\n//        imgURLsList = gson.fromJson(json, type);\r\n////        Log.d(TAG, \"fetchPhotosFromSp: \"+imgURLsList.size());\r\n//        if (imgURLsList == null || imgURLsList.size() == 0) {\r\n//            Log.d(TAG, \"fetchPhotosFromSp: 1\");\r\n//            imgURLsList = new ArrayList<>();\r\n//            SetupGridView();\r\n//        } else {\r\n//            Log.d(TAG, \"fetchPhotosFromSp: 2\");\r\n//\r\n//            checkUpdate();\r\n//        }\r\n//    }\r\n//\r\n//    private void checkUpdate() {\r\n////        noPost.setVisibility(View.GONE);\r\n//\r\n//        Log.d(TAG, \"checkUpdate: started\");\r\n//        FirebaseUser user = FirebaseAuth.getInstance().getCurrentUser();\r\n//        assert user != null;\r\n//        DatabaseReference reference = FirebaseDatabase.getInstance().getReference(getString(R.string.dbname_user_photos)).child(user.getUid());\r\n//\r\n//        Log.d(TAG, \"checkUpdate: user\" + user.getUid());\r\n//        Query query = reference.limitToLast(1);\r\n//        query.addListenerForSingleValueEvent(new ValueEventListener() {\r\n//            @Override\r\n//            public void onDataChange(@NonNull DataSnapshot snapshot) {\r\n//                for (DataSnapshot dataSnapshot : snapshot.getChildren()) {\r\n//                    if (imgURLsList.get(0).getPi().equals(dataSnapshot.getKey())) {\r\n//\r\n//                        reference.addValueEventListener(new ValueEventListener() {\r\n//                            @Override\r\n//                            public void onDataChange(@NonNull DataSnapshot snapshot) {\r\n//                                if (snapshot.getChildrenCount() == imgURLsList.size()) {\r\n//\r\n//                                    if (imgURLsList != null && imgURLsList.size() != 0) {\r\n//                                        displayPhotos();\r\n//                                    } else {\r\n////                                        noPost.setVisibility(View.VISIBLE);\r\n//                                    }\r\n//                                } else {\r\n//                                    SetupGridView();\r\n//\r\n//                                }\r\n//                            }\r\n//\r\n//                            @Override\r\n//                            public void onCancelled(@NonNull DatabaseError error) {\r\n//\r\n//                            }\r\n//                        });\r\n//\r\n//                    } else {\r\n//                        SetupGridView();\r\n//                    }\r\n//                }\r\n//            }\r\n//\r\n//            @Override\r\n//            public void onCancelled(@NonNull DatabaseError error) {\r\n//\r\n//            }\r\n//        });\r\n//\r\n//    }\r\n//\r\n//    public void verifyPermission(String[] permissions) {\r\n//        ActivityCompat.requestPermissions(this, permissions, VERIFY_PERMISSION_REQUEST);\r\n//    }\r\n//\r\n//    public boolean checkPermissionArray(String[] permissions) {\r\n//        for (String check : permissions) if (!checkPermissions(check)) return false;\r\n//        return true;\r\n//    }\r\n//\r\n//    public boolean checkPermissions(String permission) {\r\n//        int permissionRequest = ActivityCompat.checkSelfPermission(this, permission);\r\n//        return permissionRequest == PackageManager.PERMISSION_GRANTED;\r\n//    }\r\n\r\n//    @TargetApi(19)\r\n//    @Override\r\n//    public void onActivityResult(int requestCode, int resultCode, Intent data) {\r\n//        String imgPath = \"\";\r\n//        if (data != null && data.getData() != null && resultCode == RESULT_OK) {\r\n//            Uri uri = data.getData();\r\n//            if (isKitKat && DocumentsContract.isDocumentUri(this, uri)) {\r\n//                if (\"com.android.externalstorage.documents\".equals(uri.getAuthority())) {\r\n//                    String docId = DocumentsContract.getDocumentId(uri);\r\n//                    String[] split = docId.split(\":\");\r\n//                    String type = split[0];\r\n//                    if (\"primary\".equalsIgnoreCase(type)) {\r\n//                        imgPath = Environment.getExternalStorageDirectory() + \"/\" + split[1];\r\n//                        Intent intent = new Intent(this, PostPhotoActivity.class);\r\n//                        intent.putExtra(getString(R.string.selected_image), imgPath);\r\n//                        startActivity(intent);\r\n//                    } else {\r\n//                        Pattern DIR_SEPORATOR = Pattern.compile(\"/\");\r\n//                        Set<String> rv = new HashSet<>();\r\n//                        String rawExternalStorage = System.getenv(\"EXTERNAL_STORAGE\");\r\n//                        String rawSecondaryStoragesStr = System.getenv(\"SECONDARY_STORAGE\");\r\n//                        String rawEmulatedStorageTarget = System.getenv(\"EMULATED_STORAGE_TARGET\");\r\n//                        if (TextUtils.isEmpty(rawEmulatedStorageTarget)) {\r\n//                            if (TextUtils.isEmpty(rawExternalStorage)) {\r\n//                                rv.add(\"/storage/sdcard0\");\r\n//                            } else {\r\n//                                rv.add(rawExternalStorage);\r\n//                            }\r\n//                        } else {\r\n//                            String rawUserId;\r\n//                            String path = Environment.getExternalStorageDirectory().getAbsolutePath();\r\n//                            String[] folders = DIR_SEPORATOR.split(path);\r\n//                            String lastFolder = folders[folders.length - 1];\r\n//                            boolean isDigit = false;\r\n//                            try {\r\n//                                Integer.valueOf(lastFolder);\r\n//                                isDigit = true;\r\n//                            } catch (NumberFormatException ignored) {\r\n//                            }\r\n//                            rawUserId = isDigit ? lastFolder : \"\";\r\n//                            if (TextUtils.isEmpty(rawUserId)) {\r\n//                                rv.add(rawEmulatedStorageTarget);\r\n//                            } else {\r\n//                                rv.add(rawEmulatedStorageTarget + File.separator + rawUserId);\r\n//                            }\r\n//                        }\r\n//                        if (!TextUtils.isEmpty(rawSecondaryStoragesStr)) {\r\n//                            assert rawSecondaryStoragesStr != null;\r\n//                            String[] rawSecondaryStorages = rawSecondaryStoragesStr.split(File.pathSeparator);\r\n//                            Collections.addAll(rv, rawSecondaryStorages);\r\n//                        }\r\n//                        String[] temp = rv.toArray(new String[0]);\r\n//                        for (String s : temp) {\r\n//                            File tempf = new File(s + \"/\" + split[1]);\r\n//                            if (tempf.exists()) {\r\n//                                imgPath = s + \"/\" + split[1];\r\n//                                Intent intent = new Intent(this, PostPhotoActivity.class);\r\n//                                intent.putExtra(getString(R.string.selected_image), imgPath);\r\n//                                startActivity(intent);\r\n//                            }\r\n//                        }\r\n//                    }\r\n//                } else if (\"com.android.providers.downloads.documents\".equals(uri.getAuthority())) {\r\n//                    String id = DocumentsContract.getDocumentId(uri);\r\n//                    Uri contentUri = ContentUris.withAppendedId(Uri.parse(\"content://downloads/public_downloads\"), Long.parseLong(id));\r\n//                    Cursor cursor = null;\r\n//                    String column = \"_data\";\r\n//                    String[] projection = {column};\r\n//                    try {\r\n//                        cursor = this.getContentResolver().query(contentUri, projection, null, null,\r\n//                                null);\r\n//                        if (cursor != null && cursor.moveToFirst()) {\r\n//                            int column_index = cursor.getColumnIndexOrThrow(column);\r\n//                            imgPath = cursor.getString(column_index);\r\n//                        }\r\n//                    } finally {\r\n//                        if (cursor != null)\r\n//                            cursor.close();\r\n//                    }\r\n//                } else if (\"com.android.providers.media.documents\".equals(uri.getAuthority())) {\r\n//                    String docId = DocumentsContract.getDocumentId(uri);\r\n//                    String[] split = docId.split(\":\");\r\n//                    String type = split[0];\r\n//\r\n//                    Uri contentUri = null;\r\n//                    if (\"image\".equals(type)) {\r\n//                        contentUri = MediaStore.Images.Media.EXTERNAL_CONTENT_URI;\r\n//                    } else if (\"video\".equals(type)) {\r\n//                        contentUri = MediaStore.Video.Media.EXTERNAL_CONTENT_URI;\r\n//                    } else if (\"audio\".equals(type)) {\r\n//                        contentUri = MediaStore.Audio.Media.EXTERNAL_CONTENT_URI;\r\n//                    }\r\n//\r\n//                    String selection = \"_id=?\";\r\n//                    String[] selectionArgs = new String[]{split[1]};\r\n//\r\n//                    Cursor cursor = null;\r\n//                    String column = \"_data\";\r\n//                    String[] projection = {column};\r\n//\r\n//                    try {\r\n//                        assert contentUri != null;\r\n//                        cursor = this.getContentResolver().query(contentUri, projection, selection, selectionArgs, null);\r\n//                        if (cursor != null && cursor.moveToFirst()) {\r\n//                            int column_index = cursor.getColumnIndexOrThrow(column);\r\n//                            imgPath = cursor.getString(column_index);\r\n//                            Intent intent = new Intent(this, PostPhotoActivity.class);\r\n//                            intent.putExtra(getString(R.string.selected_image), imgPath);\r\n//                            startActivity(intent);\r\n//                        }\r\n//                    } finally {\r\n//                        if (cursor != null)\r\n//                            cursor.close();\r\n//                    }\r\n//                } else if (\"com.google.android.apps.docs.storage\".equals(uri.getAuthority())) {\r\n//                    Intent intent = new Intent(this, PostPhotoActivity.class);\r\n//                    intent.putExtra(getString(R.string.selected_image), imgPath);\r\n//                    startActivity(intent);\r\n//                }\r\n//            } else if (\"content\".equalsIgnoreCase(uri.getScheme())) {\r\n//                Cursor cursor = null;\r\n//                String column = \"_data\";\r\n//                String[] projection = {column};\r\n//\r\n//                try {\r\n//                    cursor = this.getContentResolver().query(uri, projection, null, null, null);\r\n//                    if (cursor != null && cursor.moveToFirst()) {\r\n//                        int column_index = cursor.getColumnIndexOrThrow(column);\r\n//                        imgPath = cursor.getString(column_index);\r\n//                        Intent intent = new Intent(this, PostPhotoActivity.class);\r\n//                        intent.putExtra(getString(R.string.selected_image), imgPath);\r\n//                        startActivity(intent);\r\n//                    }\r\n//                } finally {\r\n//                    if (cursor != null)\r\n//                        cursor.close();\r\n//                }\r\n//            } else if (\"file\".equalsIgnoreCase(uri.getScheme())) {\r\n//                imgPath = uri.getPath();\r\n//                Intent intent = new Intent(this, PostPhotoActivity.class);\r\n//                intent.putExtra(getString(R.string.selected_image), imgPath);\r\n//                startActivity(intent);\r\n//            }\r\n//        }\r\n//        super.onActivityResult(requestCode, resultCode, data);\r\n//    }\r\n//\r\n//    private void SetupGridView() {\r\n////        noPost.setVisibility(View.GONE);\r\n//\r\n//        final ArrayList<Photo> photos = new ArrayList<>();\r\n//        imgURLsList = new ArrayList<>();\r\n//\r\n//        DatabaseReference reference = FirebaseDatabase.getInstance().getReference();\r\n//        Query query = reference.child(getString(R.string.dbname_user_photos)).child(FirebaseAuth.getInstance().getCurrentUser().getUid());\r\n//        query.addListenerForSingleValueEvent(new ValueEventListener() {\r\n//            @Override\r\n//            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {\r\n//                for (DataSnapshot singleSnapshot : dataSnapshot.getChildren()) {\r\n//                    Photo photo = new Photo();\r\n//                    Map<String, Object> objectMap = (Map<String, Object>) singleSnapshot.getValue();\r\n//\r\n//                    photo.setCap(objectMap.get(getString(R.string.field_caption)).toString());\r\n//                    photo.setTg(objectMap.get(getString(R.string.field_tags)).toString());\r\n//                    photo.setPi(objectMap.get(getString(R.string.field_photo_id)).toString());\r\n//                    photo.setUi(objectMap.get(getString(R.string.field_user_id)).toString());\r\n//                    photo.setDc(objectMap.get(getString(R.string.field_date_createdr)).toString());\r\n//                    photo.setIp(objectMap.get(getString(R.string.field_image_path)).toString());\r\n//                    if (objectMap.get(getString(R.string.thumbnail)) != null)\r\n//                        photo.setT(objectMap.get(getString(R.string.thumbnail)).toString());\r\n//                    photo.setTy(objectMap.get(getString(R.string.type)).toString());\r\n//                    ArrayList<Comment> comments = new ArrayList<>();\r\n//                    for (DataSnapshot dSnapshot : singleSnapshot.child(getString(R.string.field_comment)).getChildren()) {\r\n//                        Comment comment = new Comment();\r\n//                        comment.setUi(dSnapshot.getValue(Comment.class).getUi());\r\n//                        comment.setC(dSnapshot.getValue(Comment.class).getC());\r\n//                        comment.setDc(dSnapshot.getValue(Comment.class).getDc());\r\n//                        comments.add(comment);\r\n//                    }\r\n//                    photo.setComments(comments);\r\n//                    List<Like> likeList = new ArrayList<Like>();\r\n//                    for (DataSnapshot dSnapshot : singleSnapshot.child(getString(R.string.field_likes)).getChildren()) {\r\n//                        Like like = new Like();\r\n//                        like.setUi(dSnapshot.getValue(Like.class).getUi());\r\n//                        likeList.add(like);\r\n//                    }\r\n//                    photos.add(photo);\r\n//\r\n//                }\r\n//                imgURLsList.addAll(photos);\r\n//                Collections.reverse(imgURLsList);\r\n//                //    Add newly Created ArrayList to Shared Preferences\r\n//                SharedPreferences.Editor editor = sp.edit();\r\n//                String json = gson.toJson(imgURLsList);\r\n//                editor.putString(\"myMedia\", json);\r\n//                editor.apply();\r\n//\r\n//                if (imgURLsList != null && imgURLsList.size() != 0) {\r\n//                    displayPhotos();\r\n//                } else {\r\n////                    noPost.setVisibility(View.VISIBLE);\r\n//                }\r\n//            }\r\n//\r\n//            @Override\r\n//            public void onCancelled(@NonNull DatabaseError databaseError) {\r\n//                Log.d(TAG, \"Query Cancelled\");\r\n//            }\r\n//        });\r\n//    }\r\n\r\n    private void setProfileWidgets(users userSetting) {\r\n        Log.d(TAG, \"onDataChange: \" + userSetting.toString());\r\n        Glide.with(getApplicationContext())\r\n                .load(userSetting.getPp())\r\n                .placeholder(R.drawable.load)\r\n                .error(R.drawable.default_image2)\r\n                .placeholder(R.drawable.load)\r\n                .thumbnail(0.2f)\r\n                .into(mProfilePhoto);\r\n\r\n        mUsername.setText(userSetting.getU());\r\n        mDomain.setText(userSetting.getD());\r\n\r\n        if (userSetting.getDn() == null || userSetting.getDn().equals(\"\"))\r\n            mDisplayName.setVisibility(View.GONE);\r\n        else {\r\n            mDisplayName.setText(userSetting.getDn());\r\n        }\r\n        if (userSetting.getDes() == null || userSetting.getDes().equals(\"\"))\r\n            mDescription.setVisibility(View.GONE);\r\n        else {\r\n            mDescription.setVisibility(View.VISIBLE);\r\n            mDescription.setText(userSetting.getDes());\r\n        }\r\n\r\n        if (userSetting.getl1() == null || userSetting.getl1().equals(\"\"))\r\n            mLink1.setVisibility(View.GONE);\r\n        else mLink1.setText(userSetting.getl1());\r\n        if (userSetting.getl2() == null || userSetting.getl2().equals(\"\"))\r\n            mLink2.setVisibility(View.GONE);\r\n        else mLink2.setText(userSetting.getl2());\r\n        if (userSetting.getl3() == null || userSetting.getl3().equals(\"\"))\r\n            mLink3.setVisibility(View.GONE);\r\n        else mLink3.setText(userSetting.getl3());\r\n\r\n        if (userSetting.getE() == null || userSetting.getE().equals(\"\")) {\r\n//            mWebsite.setVisibility(View.GONE);\r\n            mGmailLink.setClickable(false);\r\n            mGmailLink.setAlpha(0.5f);\r\n        } else {\r\n//            mWebsite.setVisibility(View.VISIBLE);\r\n//            mWebsite.setText(userSetting.getE());\r\n            gmail = userSetting.getE();\r\n        }\r\n\r\n        if (userSetting.getIn() == null || userSetting.getIn().equals(\"\")) {\r\n            mInstagramLink.setClickable(false);\r\n            mInstagramLink.setAlpha(0.5f);\r\n        } else {\r\n            instagramProfile = userSetting.getIn();\r\n        }\r\n\r\n        if (userSetting.getFb() == null || userSetting.getFb().equals(\"\")) {\r\n            mFacebookLink.setClickable(false);\r\n            mFacebookLink.setAlpha(0.5f);\r\n        } else {\r\n            facebookProfile = userSetting.getFb();\r\n\r\n        }\r\n        if (userSetting.getTw() == null || userSetting.getTw().equals(\"\")) {\r\n            mTwitterLink.setClickable(false);\r\n            mTwitterLink.setAlpha(0.5f);\r\n        } else {\r\n            twitterProfile = userSetting.getTw();\r\n        }\r\n\r\n        if (userSetting.getWa() == null || userSetting.getWa().equals(\"\")) {\r\n            mWhatsappLink.setClickable(false);\r\n            mWhatsappLink.setAlpha(0.5f);\r\n        } else {\r\n            whatsappNo = userSetting.getWa();\r\n        }\r\n//        dialog.dismiss();\r\n    }\r\n\r\n    private void setupBottomNavigationView() {\r\n        Log.d(TAG, \" setupBottomNavigationView:setting up BottomNavigationView\");\r\n        BottomNaavigationViewHelper.setupBottomNavigationView(bottomNavigationView, this);\r\n        BottomNaavigationViewHelper.enableNavigation(this, this, bottomNavigationView);\r\n        Menu menu = bottomNavigationView.getMenu();\r\n        MenuItem menuItem = menu.getItem(ACTIVITY_NUM);\r\n        menuItem.setChecked(true);\r\n    }\r\n\r\n    private void setupFirebaseAuth() {\r\n        Log.d(TAG, \"setup FirebaseAuth: setting up firebase auth.\");\r\n        FirebaseDatabase mFirebaseDatabase = FirebaseDatabase.getInstance();\r\n        myRef = mFirebaseDatabase.getReference();\r\n        mAuth = FirebaseAuth.getInstance();\r\n        mAuthListener = firebaseAuth -> {\r\n            user = firebaseAuth.getCurrentUser();\r\n            if (user != null) {\r\n                Log.d(TAG, \"onAuthStateChanged:signed in:\" + user.getUid());\r\n                myRef.addValueEventListener(new ValueEventListener() {\r\n                    @Override\r\n                    public void onDataChange(@NonNull DataSnapshot dataSnapshot) {\r\n                        //retrieve user information from the database\r\n                        setProfileWidgets(Objects.requireNonNull(dataSnapshot.child(getString(R.string.dbname_users)).child(Objects.requireNonNull(FirebaseAuth.getInstance().getCurrentUser()).getUid()).getValue(users.class)));\r\n                        //retrieve image for the user in question\r\n                        setUpInfoBox();\r\n                    }\r\n\r\n                    @Override\r\n                    public void onCancelled(@NonNull DatabaseError databaseError) {\r\n\r\n                    }\r\n                });\r\n            } else {\r\n\r\n                Log.d(TAG, \"onAuthStateChanged:signed_out\");\r\n                Log.d(TAG, \"onAuthStateChanged: navigating to login\");\r\n                SharedPreferences settings = getSharedPreferences(\"shared preferences\", Context.MODE_PRIVATE);\r\n                new AlertDialog.Builder(mContext)\r\n                        .setTitle(\"No user logon found\")\r\n                        .setMessage(\"We will be logging you out. \\n Please try to log in again\")\r\n                        .setPositiveButton(android.R.string.ok, (dialog, which) -> {\r\n                            Intent intent = new Intent(mContext, LoginActivity.class);\r\n                            intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_CLEAR_TASK | Intent.FLAG_ACTIVITY_CLEAR_TOP);\r\n                            settings.edit().clear().apply();\r\n                            if (mAuthListener != null) mAuth.removeAuthStateListener(mAuthListener);\r\n                            startActivity(intent);\r\n                        })\r\n                        .show();\r\n            }\r\n        };\r\n\r\n    }\r\n\r\n//    private void displayPhotos() {\r\n////        noPost.setVisibility(View.GONE);\r\n//        Log.d(TAG, \"display first 10 photo\");\r\n//        paginatedimgURLsList = new ArrayList<>();\r\n//        if (imgURLsList != null && imgURLsList.size() != 0) {\r\n//\r\n//            try {\r\n//\r\n//                int iteration = imgURLsList.size();\r\n//                if (iteration > 10) {\r\n//                    iteration = 10;\r\n//                }\r\n//                mResults = 10;\r\n//                for (int i = 0; i < iteration; i++) {\r\n//                    paginatedimgURLsList.add(imgURLsList.get(i));\r\n//                }\r\n//                Log.d(TAG, \"displayPhotos: sss\" + paginatedimgURLsList.size());\r\n//                adapterGridImage = new AdapterGridImage(ProfileActivity.this, paginatedimgURLsList);\r\n//                adapterGridImage.setHasStableIds(true);\r\n//                gridRv.setAdapter(adapterGridImage);\r\n//\r\n//            } catch (NullPointerException e) {\r\n//                Log.e(TAG, \"Null pointer exception\" + e.getMessage());\r\n//\r\n//            } catch (IndexOutOfBoundsException e) {\r\n//                Log.e(TAG, \"index out of bound\" + e.getMessage());\r\n//\r\n//            }\r\n//\r\n//        } else {\r\n////            noPost.setVisibility(View.VISIBLE);\r\n////            bottomProgress.setVisibility(View.GONE);\r\n//\r\n//        }\r\n//    }\r\n\r\n//    public void displayMorePhotos() {\r\n//        Log.d(TAG, \"display next 10 photo\");\r\n//\r\n//        try {\r\n//            if (imgURLsList.size() > mResults && imgURLsList.size() > 0) {\r\n//\r\n//                int iterations;\r\n//                if (imgURLsList.size() > (mResults + 6)) {\r\n//                    Log.d(TAG, \"display next 10 photo\");\r\n//                    iterations = 6;\r\n//                } else {\r\n//                    Log.d(TAG, \"display less tha 10 photo\");\r\n//                    iterations = imgURLsList.size() - mResults;\r\n//                }\r\n//                for (int i = mResults; i < mResults + iterations; i++) {\r\n//                    paginatedimgURLsList.add(imgURLsList.get(i));\r\n//\r\n//                }\r\n//                gridRv.post(new Runnable() {\r\n//                    @Override\r\n//                    public void run() {\r\n//                        Log.d(TAG, \"run: \" + mResults + iterations);\r\n//                        adapterGridImage.notifyDataSetChanged();\r\n//\r\n//\r\n//                    }\r\n//                });\r\n//                mResults = mResults + iterations;\r\n//\r\n//\r\n//            } else {\r\n////                bottomProgress.setVisibility(View.GONE);\r\n//\r\n//            }\r\n//\r\n//        } catch (NullPointerException e) {\r\n//            Log.e(TAG, \"Null pointer exception\" + e.getMessage());\r\n//\r\n//        } catch (IndexOutOfBoundsException e) {\r\n//            Log.e(TAG, \"index out of bound\" + e.getMessage());\r\n//\r\n//        }\r\n//\r\n//    }\r\n//\r\n//    @Override\r\n//    public void onBackPressed() {\r\n//        super.onBackPressed();\r\n//\r\n//        moveTaskToBack(\r\n//                true\r\n//        );\r\n//    }\r\n\r\n    @Override\r\n    public void onStart() {\r\n        super.onStart();\r\n        mAuth.addAuthStateListener(mAuthListener);\r\n    }\r\n\r\n    @Override\r\n    public void onStop() {\r\n        super.onStop();\r\n        if (mAuthListener != null) {\r\n            mAuth.removeAuthStateListener(mAuthListener);\r\n        }\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/orion/orion/profile/ProfileActivity.java	(revision cf7597ca1ff027f96fc145e942172638654ff2b2)
+++ app/src/main/java/com/orion/orion/profile/ProfileActivity.java	(date 1623647160441)
@@ -10,6 +10,7 @@
 import android.net.Uri;
 import android.os.Build;
 import android.os.Bundle;
+import android.os.Handler;
 import android.util.Log;
 import android.view.Menu;
 import android.view.MenuItem;
@@ -1066,5 +1067,23 @@
             mAuth.removeAuthStateListener(mAuthListener);
         }
     }
+    private Boolean exit = false;
+
+    @Override
+    public void onBackPressed() {
+        if (exit) {
+            moveTaskToBack(true); // finish activity
+        } else {
+            Toast.makeText(this, "Press Back again to Exit.",
+                    Toast.LENGTH_SHORT).show();
+            exit = true;
+            new Handler().postDelayed(new Runnable() {
+                @Override
+                public void run() {
+                    exit = false;
+                }
+            }, 2 * 1000);
 
-}
+        }
+
+    }}
Index: app/src/main/java/com/orion/orion/contest/ViewContestDetails.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.orion.orion.contest;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.appcompat.app.AppCompatActivity;\r\nimport androidx.cardview.widget.CardView;\r\n\r\nimport android.app.AlertDialog;\r\nimport android.content.ClipboardManager;\r\nimport android.content.Context;\r\nimport android.content.Intent;\r\nimport android.content.SharedPreferences;\r\nimport android.os.Bundle;\r\nimport android.util.Log;\r\nimport android.view.View;\r\nimport android.widget.Button;\r\nimport android.widget.ImageView;\r\nimport android.widget.LinearLayout;\r\nimport android.widget.PopupMenu;\r\nimport android.widget.TableLayout;\r\nimport android.widget.TextView;\r\nimport android.widget.Toast;\r\n\r\nimport com.bumptech.glide.Glide;\r\nimport com.google.android.gms.tasks.OnCompleteListener;\r\nimport com.google.android.gms.tasks.Task;\r\nimport com.google.firebase.auth.FirebaseAuth;\r\nimport com.google.firebase.auth.FirebaseUser;\r\nimport com.google.firebase.database.DataSnapshot;\r\nimport com.google.firebase.database.DatabaseError;\r\nimport com.google.firebase.database.DatabaseReference;\r\nimport com.google.firebase.database.FirebaseDatabase;\r\nimport com.google.firebase.database.Query;\r\nimport com.google.firebase.database.ValueEventListener;\r\nimport com.orion.orion.R;\r\nimport com.orion.orion.contest.joined.JoiningFormActivity;\r\nimport com.orion.orion.login.LoginActivity;\r\nimport com.orion.orion.models.CreateForm;\r\nimport com.orion.orion.models.users;\r\nimport com.orion.orion.profile.profile;\r\n\r\n\r\npublic class ViewContestDetails extends AppCompatActivity {\r\n\r\n    private static final String TAG = \"ViewContestDetails\";\r\n\r\n    private TextView contestType;\r\n    private TextView quizDateTime;\r\n    private TableLayout publicVotingContainer;\r\n    private TextView entryfee;\r\n    private TextView title;\r\n    private TextView descrip;\r\n    private TextView rules;\r\n    private TextView totalprize;\r\n    private TextView maxPart;\r\n    private TextView voteType;\r\n    private TextView gp;\r\n    private TextView userTv;\r\n    private TextView regBegin;\r\n    private TextView regEnd;\r\n    private TextView voteBegin;\r\n    private TextView voteEnd;\r\n    private TextView domain;\r\n    private TextView openfor;\r\n    private TextView juryname1;\r\n    private TextView juryname2;\r\n    private TextView juryname3;\r\n    private TextView jury;\r\n    private TextView jurypl1;\r\n    private TextView jurypl2;\r\n    private TextView jurypl3;\r\n    private TextView hostedby;\r\n    private TextView filetype;\r\n    private TextView windate;\r\n    private TextView p1Tv;\r\n    private TextView p2Tv;\r\n    private TextView p3Tv;\r\n    private ImageView poster;\r\n    private ImageView jurypic1;\r\n    private ImageView jurypic2;\r\n    private ImageView jurypic3;\r\n    private ImageView options;\r\n    private String mAppend = \"\";\r\n    private String posterlink = \"\";\r\n    private CardView cardView;\r\n    private Button participateBtn, VoteBtn;\r\n    String username = \"\", currentUser = \"\", hostUsername = \"\";\r\n    Boolean ok = false;\r\n    ImageView backArrrow;\r\n    private TextView jcTv, jcTv2;\r\n    private String judgingCriterias = \"\";\r\n    private CardView jcCard;\r\n    CreateForm mCreateForm;\r\n    int p = 0;\r\n\r\n\r\n    private String juryusername1 = \"\", juryusername2 = \"\", juryusername3 = \"\";\r\n    private LinearLayout prizeLinear;\r\n    String userId, contestId, vot, reg;\r\n\r\n    //firebase\r\n    private FirebaseAuth mAuth;\r\n    private FirebaseAuth.AuthStateListener mAuthListener;\r\n    private DatabaseReference myRef;\r\n    private FirebaseDatabase mFirebaseDatabase;\r\n\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        setContentView(R.layout.activity_contest_details);\r\n\r\n        setupFirebaseAuth();\r\n        contestType = findViewById(R.id.contestTypeTv);\r\n        quizDateTime = findViewById(R.id.quizDateTime);\r\n        publicVotingContainer = findViewById(R.id.publicVotingContainer);\r\n        jcTv = findViewById(R.id.jc);\r\n        jcTv2 = findViewById(R.id.jcTv2);\r\n        jcCard = findViewById(R.id.jccard);\r\n        entryfee = findViewById(R.id.entryfeeTv);\r\n        title = findViewById(R.id.titleTv);\r\n        descrip = findViewById(R.id.descripTv);\r\n        rules = findViewById(R.id.ruleTv);\r\n        totalprize = findViewById(R.id.totalprizeTv);\r\n        maxPart = findViewById(R.id.maxPartTv);\r\n        voteType = findViewById(R.id.voteTypeTv);\r\n        regBegin = findViewById(R.id.regB);\r\n        regEnd = findViewById(R.id.regE);\r\n        voteBegin = findViewById(R.id.votB);\r\n        voteEnd = findViewById(R.id.votE);\r\n        domain = findViewById(R.id.domainTV);\r\n        openfor = findViewById(R.id.openForTv);\r\n        juryname1 = findViewById(R.id.jname1Tv);\r\n        juryname2 = findViewById(R.id.jname2Tv);\r\n        juryname3 = findViewById(R.id.jname3Tv);\r\n        jurypl1 = findViewById(R.id.jpl1Tv);\r\n        jurypl2 = findViewById(R.id.jpl2Tv);\r\n        jurypl3 = findViewById(R.id.jpl3Tv);\r\n        jurypic1 = findViewById(R.id.jpic1);\r\n        jurypic2 = findViewById(R.id.jpic2);\r\n        jurypic3 = findViewById(R.id.jpic3);\r\n        hostedby = findViewById(R.id.hostedbyTv);\r\n        filetype = findViewById(R.id.fileTv);\r\n        windate = findViewById(R.id.winDate);\r\n        poster = findViewById(R.id.posterIv);\r\n        jury = findViewById(R.id.jury);\r\n        cardView = findViewById(R.id.jurydetail);\r\n        p1Tv = findViewById(R.id.p1Tv);\r\n        p2Tv = findViewById(R.id.p2Tv);\r\n        p3Tv = findViewById(R.id.p3Tv);\r\n        prizeLinear = findViewById(R.id.prizell);\r\n        participateBtn = findViewById(R.id.participateBtn);\r\n        VoteBtn = findViewById(R.id.voteBtn);\r\n        options = findViewById(R.id.optionC);\r\n        gp = findViewById(R.id.gp);\r\n        userTv = findViewById(R.id.usernameCreator);\r\n\r\n\r\n        Intent i = getIntent();\r\n        userId = i.getStringExtra(\"userId\");\r\n        contestId = i.getStringExtra(\"contestId\");\r\n        vot = i.getStringExtra(\"Vote\");\r\n        reg = i.getStringExtra(\"reg\");\r\n\r\n        setgp(userId, gp);\r\n        backArrrow = findViewById(R.id.backarrow);\r\n\r\n        backArrrow.setOnClickListener(view -> finish());\r\n        DatabaseReference db = FirebaseDatabase.getInstance().getReference(getString(R.string.dbname_participantList));\r\n        db.child(contestId).addListenerForSingleValueEvent(new ValueEventListener() {\r\n            @Override\r\n            public void onDataChange(@NonNull DataSnapshot snapshot) {\r\n                p = (int) snapshot.getChildrenCount();\r\n            }\r\n\r\n            @Override\r\n            public void onCancelled(@NonNull DatabaseError error) {\r\n\r\n            }\r\n        });\r\n        DatabaseReference ref8 = FirebaseDatabase.getInstance().getReference();\r\n        ref8.child(getString(R.string.dbname_users))\r\n                .child(FirebaseAuth.getInstance().getCurrentUser().getUid())\r\n                .child(getString(R.string.field_username))\r\n                .addListenerForSingleValueEvent(new ValueEventListener() {\r\n                    @Override\r\n                    public void onDataChange(@NonNull DataSnapshot dataSnapshot) {\r\n                        currentUser = dataSnapshot.getValue().toString();\r\n\r\n                    }\r\n\r\n                    @Override\r\n                    public void onCancelled(@NonNull DatabaseError databaseError) {\r\n\r\n                    }\r\n                });\r\n        ref8.child(getString(R.string.dbname_users))\r\n                .child(userId)\r\n                .child(getString(R.string.field_username))\r\n                .addListenerForSingleValueEvent(new ValueEventListener() {\r\n                    @Override\r\n                    public void onDataChange(@NonNull DataSnapshot dataSnapshot) {\r\n                        hostUsername = dataSnapshot.getValue().toString();\r\n                    }\r\n\r\n                    @Override\r\n                    public void onCancelled(@NonNull DatabaseError databaseError) {\r\n\r\n                    }\r\n                });\r\n\r\n        DatabaseReference ref = FirebaseDatabase.getInstance().getReference(getString(R.string.dbname_contestlist));\r\n        ref.child(contestId)\r\n                .child(getString(R.string.field_Participant_List))\r\n                .child(FirebaseAuth.getInstance().getCurrentUser().getUid())\r\n                .addListenerForSingleValueEvent(new ValueEventListener() {\r\n                    @Override\r\n                    public void onDataChange(@NonNull DataSnapshot dataSnapshot) {\r\n                        if (dataSnapshot.exists()) {\r\n                            ok = true;\r\n\r\n                        }\r\n\r\n                    }\r\n\r\n                    @Override\r\n                    public void onCancelled(@NonNull DatabaseError databaseError) {\r\n\r\n                    }\r\n                });\r\n        options.setOnClickListener(v -> {\r\n            PopupMenu popupMenu = new PopupMenu(ViewContestDetails.this, options);\r\n            popupMenu.getMenuInflater().inflate(R.menu.post_menu_contest, popupMenu.getMenu());\r\n            if (!ok) {\r\n                popupMenu.getMenu().getItem(2).setVisible(false);\r\n            }\r\n            popupMenu.setOnMenuItemClickListener(item -> {\r\n                if (item.getItemId() == R.id.ic_house) {\r\n                    int sdk = android.os.Build.VERSION.SDK_INT;\r\n                    ClipboardManager clipboard = (ClipboardManager) ViewContestDetails.this.getSystemService(Context.CLIPBOARD_SERVICE);\r\n                    if (sdk < android.os.Build.VERSION_CODES.HONEYCOMB) {\r\n                        clipboard.setText(contestId);\r\n                    } else {\r\n                        android.content.ClipData clip = android.content.ClipData.newPlainText(\"Key\", contestId);\r\n                        clipboard.setPrimaryClip(clip);\r\n                    }\r\n                } else if (item.getItemId() == R.id.ic_house1) {\r\n                    String message =\r\n                            \"https://play.google.com/store/apps/details?id=\" + ViewContestDetails.this.getPackageName() +\r\n                                    \"Download ORION and share,participate in your domains contests.\"\r\n                                    + \"Enter Contest key \" + contestId + \" in Contest\"\r\n                                    + \"Vote or Participate\";\r\n                    Intent share = new Intent(Intent.ACTION_SEND);\r\n                    share.setType(\"text/plain\");\r\n                    share.putExtra(Intent.EXTRA_TEXT, message);\r\n\r\n                    ViewContestDetails.this.startActivity(Intent.createChooser(share, \"Select\"));\r\n                } else {\r\n\r\n                    AlertDialog.Builder builder = new AlertDialog.Builder(ViewContestDetails.this);\r\n                    builder.setTitle(\"Report\");\r\n                    builder.setMessage(\"Are you sure, you want to Report this Contest?\");\r\n\r\n//                set buttons\r\n                    builder.setPositiveButton(\"Report\", (dialog, which) -> {\r\n                        Log.d(TAG, \"DeleteMessage: deleteing message\");\r\n                        ReportPost(contestId, userId, p);\r\n\r\n                    });\r\n                    builder.setNegativeButton(\"No\", (dialog, which) -> dialog.dismiss());\r\n                    builder.create().show();\r\n                }\r\n                return true;\r\n            });\r\n\r\n            popupMenu.show();\r\n\r\n        });\r\n\r\n        DatabaseReference ref2 = FirebaseDatabase.getInstance().getReference(getString(R.string.dbname_contests))\r\n                .child(userId)\r\n                .child(getString(R.string.created_contest))\r\n                .child(contestId);\r\n        ref2.addValueEventListener(new ValueEventListener() {\r\n            @Override\r\n            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {\r\n                mCreateForm = dataSnapshot.getValue(CreateForm.class);\r\n                assert mCreateForm != null;\r\n                DatabaseReference ref = FirebaseDatabase.getInstance().getReference(getString(R.string.dbname_users));\r\n                ref.child(mCreateForm.getUi())\r\n                        .child(getString(R.string.field_username))\r\n                        .addListenerForSingleValueEvent(new ValueEventListener() {\r\n                            @Override\r\n                            public void onDataChange(@NonNull DataSnapshot snapshot) {\r\n                                userTv.setText(snapshot.getValue().toString());\r\n                            }\r\n\r\n                            @Override\r\n                            public void onCancelled(@NonNull DatabaseError error) {\r\n\r\n                            }\r\n                        });\r\n\r\n\r\n                title.setText(mCreateForm.getCt());\r\n                hostedby.setText(mCreateForm.getHst());\r\n                descrip.setText(mCreateForm.getDes());\r\n                rules.setText(mCreateForm.getRul());\r\n                domain.setText(mCreateForm.getD());\r\n                openfor.setText(mCreateForm.getOf());\r\n                contestType.setText(mCreateForm.getCty());\r\n                if (mCreateForm.getEf().equals(\"\"))\r\n                    entryfee.setText(\"Free\");\r\n                else\r\n                    entryfee.setText(mCreateForm.getEf());\r\n                if (mCreateForm.getTp().equals(\"\")) {\r\n                    prizeLinear.setVisibility(View.GONE);\r\n                    totalprize.setText(\"-\");\r\n                } else {\r\n                    totalprize.setText(mCreateForm.getTp());\r\n                    prizeLinear.setVisibility(View.VISIBLE);\r\n                }\r\n                if (mCreateForm.getCty()!=null && mCreateForm.getCty().equals(\"Quiz\"))\r\n                    publicVotingContainer.setVisibility(View.GONE);\r\n                else\r\n                    publicVotingContainer.setVisibility(View.VISIBLE);\r\n                //voting type\r\n                if (mCreateForm.getVt().equals(\"\"))\r\n                    voteType.setText(\"-\");\r\n                else\r\n                    voteType.setText(mCreateForm.getVt());\r\n                domain.setText(mCreateForm.getD());\r\n                openfor.setText(mCreateForm.getOf());\r\n                //participant\r\n                if (mCreateForm.getMlt().equals(\"\"))\r\n                    maxPart.setText(\"Unlimited\");\r\n                else\r\n                    maxPart.setText(mCreateForm.getMlt());\r\n                filetype.setText(mCreateForm.getFt());\r\n                regBegin.setText(mCreateForm.getRb());\r\n                regEnd.setText(mCreateForm.getRe());\r\n                //vote dates\r\n                if (mCreateForm.getVb().equals(\"\") || mCreateForm.getVe().equals(\"\")) {\r\n                    voteBegin.setText(\"-\");\r\n                    voteEnd.setText(\"-\");\r\n                } else {\r\n                    voteBegin.setText(mCreateForm.getVb());\r\n                    voteEnd.setText(mCreateForm.getVe());\r\n                }\r\n                windate.setText(mCreateForm.getWd());\r\n                quizDateTime.setText(mCreateForm.getQdt());\r\n\r\n                p1Tv.setText(mCreateForm.getP1());\r\n                p2Tv.setText(mCreateForm.getP2());\r\n                p3Tv.setText(mCreateForm.getP3());\r\n\r\n\r\n                juryusername1 = mCreateForm.getJn1();\r\n                juryusername2 = mCreateForm.getJn2();\r\n                juryusername3 = mCreateForm.getJn3();\r\n\r\n                if (mCreateForm.getJn1().equals(\"\")) {\r\n                    jury.setVisibility(View.GONE);\r\n                    cardView.setVisibility(View.GONE);\r\n                }\r\n                if (!mCreateForm.getJn1().equals(\"\") && mCreateForm.getJn2().equals(\"\")) {\r\n                    jury.setVisibility(View.VISIBLE);\r\n                    cardView.setVisibility(View.VISIBLE);\r\n                    jurypic1.setVisibility(View.VISIBLE);\r\n                    juryname1.setVisibility(View.VISIBLE);\r\n                    jurypl1.setVisibility(View.VISIBLE);\r\n                    jurypic2.setVisibility(View.GONE);\r\n                    juryname2.setVisibility(View.GONE);\r\n                    jurypl2.setVisibility(View.GONE);\r\n                    jurypic3.setVisibility(View.GONE);\r\n                    juryname3.setVisibility(View.GONE);\r\n                    jurypl3.setVisibility(View.GONE);\r\n\r\n                    DatabaseReference db = FirebaseDatabase.getInstance().getReference();\r\n                    db.child(getString(R.string.dbname_username))\r\n                            .child(mCreateForm.getJn1())\r\n                            .addListenerForSingleValueEvent(new ValueEventListener() {\r\n                                @Override\r\n                                public void onDataChange(@NonNull DataSnapshot dataSnapshot) {\r\n                                    if (dataSnapshot.exists()) {\r\n\r\n                                        db.child(getString(R.string.dbname_users))\r\n                                                .child(dataSnapshot.getValue().toString())\r\n                                                .addListenerForSingleValueEvent(new ValueEventListener() {\r\n                                                    @Override\r\n                                                    public void onDataChange(@NonNull DataSnapshot snapshot) {\r\n                                                        users user = snapshot.getValue(users.class);\r\n\r\n\r\n                                                        juryname1.setText(user.getDn());\r\n                                                        jurypl1.setText(user.getU());\r\n                                                        Log.d(TAG, \"onDataChange: \" + user.getDn());\r\n\r\n                                                        Glide.with(getApplicationContext())\r\n                                                                .load(user.getPp())\r\n                                                                .placeholder(R.drawable.load)\r\n                                                                .error(R.drawable.default_image2)\r\n                                                                .placeholder(R.drawable.load)\r\n                                                                .thumbnail(0.5f)\r\n                                                                .into(jurypic1);\r\n                                                    }\r\n\r\n                                                    @Override\r\n                                                    public void onCancelled(@NonNull DatabaseError error) {\r\n\r\n                                                    }\r\n                                                });\r\n                                    }\r\n\r\n                                }\r\n\r\n                                @Override\r\n                                public void onCancelled(@NonNull DatabaseError databaseError) {\r\n\r\n                                }\r\n                            });\r\n\r\n\r\n                }\r\n                if (!mCreateForm.getJn1().equals(\"\")\r\n                        && !mCreateForm.getJn2().equals(\"\")\r\n                        && mCreateForm.getJn3().equals(\"\")) {\r\n                    jury.setVisibility(View.VISIBLE);\r\n                    cardView.setVisibility(View.VISIBLE);\r\n                    jurypic1.setVisibility(View.VISIBLE);\r\n                    juryname1.setVisibility(View.VISIBLE);\r\n                    jurypl1.setVisibility(View.VISIBLE);\r\n                    jurypic2.setVisibility(View.VISIBLE);\r\n                    juryname2.setVisibility(View.VISIBLE);\r\n                    jurypl2.setVisibility(View.VISIBLE);\r\n                    jurypic3.setVisibility(View.GONE);\r\n                    juryname3.setVisibility(View.GONE);\r\n                    jurypl3.setVisibility(View.GONE);\r\n                    DatabaseReference db = FirebaseDatabase.getInstance().getReference();\r\n                    db.child(getString(R.string.dbname_username))\r\n                            .child(mCreateForm.getJn1())\r\n                            .addListenerForSingleValueEvent(new ValueEventListener() {\r\n                                @Override\r\n                                public void onDataChange(@NonNull DataSnapshot dataSnapshot) {\r\n                                    if (dataSnapshot.exists()) {\r\n\r\n                                        db.child(getString(R.string.dbname_users))\r\n                                                .child(dataSnapshot.getValue().toString())\r\n                                                .addListenerForSingleValueEvent(new ValueEventListener() {\r\n                                                    @Override\r\n                                                    public void onDataChange(@NonNull DataSnapshot snapshot) {\r\n                                                        users user = snapshot.getValue(users.class);\r\n\r\n\r\n                                                        juryname1.setText(user.getDn());\r\n                                                        jurypl1.setText(user.getU());\r\n                                                        Log.d(TAG, \"onDataChange: \" + user.getDn());\r\n\r\n                                                        Glide.with(getApplicationContext())\r\n                                                                .load(user.getPp())\r\n                                                                .placeholder(R.drawable.load)\r\n                                                                .error(R.drawable.default_image2)\r\n                                                                .placeholder(R.drawable.load)\r\n                                                                .thumbnail(0.5f)\r\n                                                                .into(jurypic1);\r\n\r\n                                                    }\r\n\r\n                                                    @Override\r\n                                                    public void onCancelled(@NonNull DatabaseError error) {\r\n\r\n                                                    }\r\n                                                });\r\n                                    }\r\n\r\n                                }\r\n\r\n                                @Override\r\n                                public void onCancelled(@NonNull DatabaseError databaseError) {\r\n\r\n                                }\r\n                            });\r\n\r\n                    db.child(getString(R.string.dbname_username))\r\n                            .child(mCreateForm.getJn2())\r\n                            .addListenerForSingleValueEvent(new ValueEventListener() {\r\n                                @Override\r\n                                public void onDataChange(@NonNull DataSnapshot dataSnapshot) {\r\n                                    if (dataSnapshot.exists()) {\r\n\r\n                                        db.child(getString(R.string.dbname_users))\r\n                                                .child(dataSnapshot.getValue().toString())\r\n                                                .addListenerForSingleValueEvent(new ValueEventListener() {\r\n                                                    @Override\r\n                                                    public void onDataChange(@NonNull DataSnapshot snapshot) {\r\n                                                        users user = snapshot.getValue(users.class);\r\n\r\n\r\n                                                        juryname2.setText(user.getDn());\r\n                                                        jurypl2.setText(user.getU());\r\n                                                        Log.d(TAG, \"onDataChange: \" + user.getDn());\r\n\r\n\r\n                                                        Glide.with(getApplicationContext())\r\n                                                                .load(user.getPp())\r\n                                                                .placeholder(R.drawable.load)\r\n                                                                .error(R.drawable.default_image2)\r\n                                                                .placeholder(R.drawable.load)\r\n                                                                .thumbnail(0.5f)\r\n                                                                .into(jurypic2);\r\n                                                    }\r\n\r\n                                                    @Override\r\n                                                    public void onCancelled(@NonNull DatabaseError error) {\r\n\r\n                                                    }\r\n                                                });\r\n                                    }\r\n\r\n                                }\r\n\r\n                                @Override\r\n                                public void onCancelled(@NonNull DatabaseError databaseError) {\r\n\r\n                                }\r\n                            });\r\n                }\r\n                if (!mCreateForm.getJn1().equals(\"\")\r\n                        && !mCreateForm.getJn2().equals(\"\")\r\n                        && !mCreateForm.getJn3().equals(\"\")) {\r\n                    jury.setVisibility(View.VISIBLE);\r\n                    cardView.setVisibility(View.VISIBLE);\r\n                    jurypic1.setVisibility(View.VISIBLE);\r\n                    juryname1.setVisibility(View.VISIBLE);\r\n                    jurypl1.setVisibility(View.VISIBLE);\r\n                    jurypic2.setVisibility(View.VISIBLE);\r\n                    juryname2.setVisibility(View.VISIBLE);\r\n                    jurypl2.setVisibility(View.VISIBLE);\r\n                    jurypic3.setVisibility(View.VISIBLE);\r\n                    juryname3.setVisibility(View.VISIBLE);\r\n                    jurypl3.setVisibility(View.VISIBLE);\r\n\r\n\r\n                    DatabaseReference db = FirebaseDatabase.getInstance().getReference();\r\n                    db.child(getString(R.string.dbname_username))\r\n                            .child(mCreateForm.getJn1())\r\n                            .addListenerForSingleValueEvent(new ValueEventListener() {\r\n                                @Override\r\n                                public void onDataChange(@NonNull DataSnapshot dataSnapshot) {\r\n                                    if (dataSnapshot.exists()) {\r\n\r\n                                        db.child(getString(R.string.dbname_users))\r\n                                                .child(dataSnapshot.getValue().toString())\r\n                                                .addListenerForSingleValueEvent(new ValueEventListener() {\r\n                                                    @Override\r\n                                                    public void onDataChange(@NonNull DataSnapshot snapshot) {\r\n                                                        users user = snapshot.getValue(users.class);\r\n\r\n\r\n                                                        juryname1.setText(user.getDn());\r\n                                                        jurypl1.setText(user.getU());\r\n                                                        Log.d(TAG, \"onDataChange: \" + user.getDn());\r\n\r\n\r\n                                                        Glide.with(getApplicationContext())\r\n                                                                .load(user.getPp())\r\n                                                                .placeholder(R.drawable.load)\r\n                                                                .error(R.drawable.default_image2)\r\n                                                                .placeholder(R.drawable.load)\r\n                                                                .thumbnail(0.5f)\r\n                                                                .into(jurypic1);\r\n                                                    }\r\n\r\n                                                    @Override\r\n                                                    public void onCancelled(@NonNull DatabaseError error) {\r\n\r\n                                                    }\r\n                                                });\r\n                                    }\r\n\r\n                                }\r\n\r\n                                @Override\r\n                                public void onCancelled(@NonNull DatabaseError databaseError) {\r\n\r\n                                }\r\n                            });\r\n                    db.child(getString(R.string.dbname_username))\r\n                            .child(mCreateForm.getJn2())\r\n                            .addListenerForSingleValueEvent(new ValueEventListener() {\r\n                                @Override\r\n                                public void onDataChange(@NonNull DataSnapshot dataSnapshot) {\r\n                                    if (dataSnapshot.exists()) {\r\n\r\n                                        db.child(getString(R.string.dbname_users))\r\n                                                .child(dataSnapshot.getValue().toString())\r\n                                                .addListenerForSingleValueEvent(new ValueEventListener() {\r\n                                                    @Override\r\n                                                    public void onDataChange(@NonNull DataSnapshot snapshot) {\r\n                                                        users user = snapshot.getValue(users.class);\r\n\r\n\r\n                                                        juryname2.setText(user.getDn());\r\n                                                        jurypl2.setText(user.getU());\r\n                                                        Log.d(TAG, \"onDataChange: \" + user.getDn());\r\n\r\n\r\n                                                        Glide.with(getApplicationContext())\r\n                                                                .load(user.getPp())\r\n                                                                .placeholder(R.drawable.load)\r\n                                                                .error(R.drawable.default_image2)\r\n                                                                .placeholder(R.drawable.load)\r\n                                                                .thumbnail(0.5f)\r\n                                                                .into(jurypic2);\r\n                                                    }\r\n\r\n                                                    @Override\r\n                                                    public void onCancelled(@NonNull DatabaseError error) {\r\n\r\n                                                    }\r\n                                                });\r\n                                    }\r\n\r\n                                }\r\n\r\n                                @Override\r\n                                public void onCancelled(@NonNull DatabaseError databaseError) {\r\n\r\n                                }\r\n                            });\r\n\r\n                    db.child(getString(R.string.dbname_username))\r\n                            .child(mCreateForm.getJn3())\r\n                            .addListenerForSingleValueEvent(new ValueEventListener() {\r\n                                @Override\r\n                                public void onDataChange(@NonNull DataSnapshot dataSnapshot) {\r\n                                    if (dataSnapshot.exists()) {\r\n\r\n                                        db.child(getString(R.string.dbname_users))\r\n                                                .child(dataSnapshot.getValue().toString())\r\n                                                .addListenerForSingleValueEvent(new ValueEventListener() {\r\n                                                    @Override\r\n                                                    public void onDataChange(@NonNull DataSnapshot snapshot) {\r\n                                                        users user = snapshot.getValue(users.class);\r\n\r\n\r\n                                                        juryname3.setText(user.getDn());\r\n                                                        jurypl3.setText(user.getU());\r\n                                                        Log.d(TAG, \"onDataChange: \" + user.getDn());\r\n\r\n\r\n                                                        Glide.with(getApplicationContext())\r\n                                                                .load(user.getPp())\r\n                                                                .placeholder(R.drawable.load)\r\n                                                                .error(R.drawable.default_image2)\r\n                                                                .placeholder(R.drawable.load)\r\n                                                                .thumbnail(0.5f)\r\n                                                                .into(jurypic3);\r\n                                                    }\r\n\r\n                                                    @Override\r\n                                                    public void onCancelled(@NonNull DatabaseError error) {\r\n\r\n                                                    }\r\n                                                });\r\n                                    }\r\n\r\n                                }\r\n\r\n                                @Override\r\n                                public void onCancelled(@NonNull DatabaseError databaseError) {\r\n\r\n                                }\r\n                            });\r\n                }\r\n                posterlink = mCreateForm.getPo();\r\n\r\n                if (mCreateForm.getVt().equals(\"Jury\") || mCreateForm.getVt().equals(\"Jury and Public\")) {\r\n                    String f_string = \"\";\r\n                    jcCard.setVisibility(View.VISIBLE);\r\n                    jcTv.setVisibility(View.VISIBLE);\r\n                    judgingCriterias = mCreateForm.getCr();\r\n                    String[] array = judgingCriterias.split(\"///\");\r\n                    for (String a : array)\r\n                        f_string = f_string + \"\\n\" + a;\r\n                    Log.d(TAG, \"onCreate: \" + f_string);\r\n                    jcTv2.setText(f_string);\r\n                }\r\n                Glide.with(getApplicationContext())\r\n                        .load(posterlink)\r\n                        .placeholder(R.drawable.load)\r\n                        .error(R.drawable.default_image2)\r\n                        .placeholder(R.drawable.load)\r\n                        .into(poster);\r\n            }\r\n\r\n            @Override\r\n            public void onCancelled(@NonNull DatabaseError databaseError) {\r\n\r\n            }\r\n        });\r\n\r\n        jurypic1.setOnClickListener(v -> juryProfile(jurypl1.getText().toString()));\r\n        juryname1.setOnClickListener(v -> juryProfile(jurypl1.getText().toString()));\r\n        userTv.setOnClickListener(v -> juryProfile(userTv.getText().toString()));\r\n        jurypl1.setOnClickListener(v -> juryProfile(jurypl1.getText().toString()));\r\n\r\n        jurypic2.setOnClickListener(v -> juryProfile(jurypl2.getText().toString()));\r\n        juryname2.setOnClickListener(v -> juryProfile(jurypl2.getText().toString()));\r\n        jurypl2.setOnClickListener(v -> juryProfile(jurypl2.getText().toString()));\r\n\r\n        jurypic3.setOnClickListener(v -> juryProfile(jurypl3.getText().toString()));\r\n        juryname3.setOnClickListener(v -> juryProfile(jurypl3.getText().toString()));\r\n        jurypl3.setOnClickListener(v -> juryProfile(jurypl3.getText().toString()));\r\n\r\n        if (reg.equals(\"yes\")) {\r\n            participateBtn.setVisibility(View.VISIBLE);\r\n            participateBtn.setOnClickListener(v -> {\r\n                if (currentUser.equals(juryusername1) || currentUser.equals(juryusername2)\r\n                        || currentUser.equals(juryusername3) || currentUser.equals(hostUsername)) {\r\n                    Intent i1 = new Intent(getApplicationContext(), JoiningFormActivity.class);\r\n                    i1.putExtra(\"userId\", userId);\r\n                    i1.putExtra(\"contestId\", contestId);\r\n                    i1.putExtra(\"isJuryOrHost\", \"true\");\r\n                    startActivity(i1);\r\n                } else {\r\n                    Intent i1 = new Intent(getApplicationContext(), JoiningFormActivity.class);\r\n                    i1.putExtra(\"userId\", userId);\r\n                    i1.putExtra(\"contestId\", contestId);\r\n                    i1.putExtra(\"isJuryOrHost\", \"false\");\r\n                    startActivity(i1);\r\n                }\r\n            });\r\n        } else participateBtn.setVisibility(View.GONE);\r\n\r\n        if (vot.equals(\"yes\")) {\r\n            VoteBtn.setVisibility(View.VISIBLE);\r\n            VoteBtn.setOnClickListener(v -> {\r\n                DatabaseReference ref1 = FirebaseDatabase.getInstance().getReference();\r\n                ref1.child(getString(R.string.dbname_users))\r\n                        .child(FirebaseAuth.getInstance().getCurrentUser().getUid())\r\n                        .addListenerForSingleValueEvent(new ValueEventListener() {\r\n                            @Override\r\n                            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {\r\n                                users user = new users();\r\n                                user = dataSnapshot.getValue(users.class);\r\n                                String username = user.getU();\r\n                                if (username.equals(juryusername1)) {\r\n                                    Intent i12 = new Intent(ViewContestDetails.this, jury_voting_Activity.class);\r\n                                    i12.putExtra(\"userId\", userId);\r\n                                    i12.putExtra(\"contestId\", contestId);\r\n                                    i12.putExtra(\"jury\", \"jury1\");\r\n                                    i12.putExtra(\"comment\", \"comment1\");\r\n                                    i12.putExtra(\"mediaType\", mCreateForm.getMlt());\r\n                                    startActivity(i12);\r\n                                } else if (username.equals(juryusername2)) {\r\n                                    Intent i12 = new Intent(ViewContestDetails.this, jury_voting_Activity.class);\r\n                                    i12.putExtra(\"userId\", userId);\r\n                                    i12.putExtra(\"contestId\", contestId);\r\n                                    i12.putExtra(\"jury\", \"jury2\");\r\n                                    i12.putExtra(\"comment\", \"comment2\");\r\n                                    i12.putExtra(\"mediaType\", mCreateForm.getMlt());\r\n                                    startActivity(i12);\r\n                                } else if (username.equals(juryusername3)) {\r\n                                    Intent i12 = new Intent(ViewContestDetails.this, jury_voting_Activity.class);\r\n                                    i12.putExtra(\"userId\", userId);\r\n                                    i12.putExtra(\"contestId\", contestId);\r\n                                    i12.putExtra(\"jury\", \"jury3\");\r\n                                    i12.putExtra(\"comment\", \"comment3\");\r\n                                    i12.putExtra(\"mediaType\", mCreateForm.getMlt());\r\n                                    startActivity(i12);\r\n                                } else {\r\n                                    Intent i12 = new Intent(ViewContestDetails.this, public_voting_media.class);\r\n                                    i12.putExtra(\"userId\", userId);\r\n                                    i12.putExtra(\"contestId\", contestId);\r\n                                    startActivity(i12);\r\n                                }\r\n                            }\r\n\r\n                            @Override\r\n                            public void onCancelled(@NonNull DatabaseError databaseError) {\r\n\r\n                            }\r\n                        });\r\n            });\r\n\r\n        } else VoteBtn.setVisibility(View.GONE);\r\n    }\r\n\r\n    private void juryProfile(String toString) {\r\n        DatabaseReference ref = FirebaseDatabase.getInstance().getReference();\r\n        Query userquery = ref\r\n                .child(getString(R.string.dbname_username))\r\n                .child(toString);\r\n        userquery.addListenerForSingleValueEvent(new ValueEventListener() {\r\n            @Override\r\n            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {\r\n                if (dataSnapshot.exists()) {\r\n                    username = dataSnapshot.getValue().toString();\r\n                    Intent i = new Intent(ViewContestDetails.this, profile.class);\r\n                    i.putExtra(getString(R.string.calling_activity), getString(R.string.home));\r\n                    i.putExtra(getString(R.string.intent_user), username);\r\n                    startActivity(i);\r\n                }\r\n            }\r\n\r\n            @Override\r\n            public void onCancelled(@NonNull DatabaseError databaseError) {\r\n                Log.d(TAG, \"Query Cancelled\");\r\n            }\r\n        });\r\n    }\r\n\r\n    private void setgp(String userid, TextView gp) {\r\n        DatabaseReference reference = FirebaseDatabase.getInstance().getReference();\r\n        reference.child(getString(R.string.dbname_contests))\r\n                .child(userid)\r\n                .child(getString(R.string.field_contest_completed))\r\n                .addListenerForSingleValueEvent(new ValueEventListener() {\r\n                    @Override\r\n                    public void onDataChange(@NonNull DataSnapshot snapshot) {\r\n                        if (snapshot.exists()) {\r\n                            long y = (long) snapshot.getValue();\r\n                            DatabaseReference reference = FirebaseDatabase.getInstance().getReference();\r\n                            reference.child(getString(R.string.dbname_contests))\r\n                                    .child(userid)\r\n                                    .child(getString(R.string.field_contest_reports))\r\n                                    .addListenerForSingleValueEvent(new ValueEventListener() {\r\n                                        @Override\r\n                                        public void onDataChange(@NonNull DataSnapshot snapshot) {\r\n\r\n                                            if (snapshot.exists()) {\r\n                                                long x = (long) snapshot.getValue();\r\n                                                gp.setText(String.valueOf(100 - (((x * 100) / y))) + \"%\");\r\n                                            } else {\r\n                                                gp.setText(\"100%\");\r\n\r\n                                            }\r\n                                        }\r\n\r\n                                        @Override\r\n                                        public void onCancelled(@NonNull DatabaseError error) {\r\n\r\n                                        }\r\n                                    });\r\n\r\n                        } else {\r\n                            gp.setText(\"100%\");\r\n                        }\r\n\r\n                    }\r\n\r\n                    @Override\r\n                    public void onCancelled(@NonNull DatabaseError error) {\r\n\r\n                    }\r\n                });\r\n    }\r\n\r\n    private void ReportPost(String contestId, String userId, int p) {\r\n\r\n        DatabaseReference reference = FirebaseDatabase.getInstance().getReference(getString(R.string.dbname_contestlist))\r\n                .child(contestId)\r\n                .child(getString(R.string.field_contest_report_list));\r\n        reference.addListenerForSingleValueEvent(new ValueEventListener() {\r\n            @Override\r\n            public void onDataChange(@NonNull DataSnapshot snapshot) {\r\n                if (snapshot.hasChild(FirebaseAuth.getInstance().getCurrentUser().getUid())) {\r\n                    Toast.makeText(ViewContestDetails.this, \"You already reported this contest.\", Toast.LENGTH_SHORT).show();\r\n\r\n                } else {\r\n\r\n\r\n                    reference.child(FirebaseAuth.getInstance().getCurrentUser().getUid())\r\n                            .setValue(true)\r\n                            .addOnCompleteListener(new OnCompleteListener<Void>() {\r\n                                @Override\r\n                                public void onComplete(@NonNull Task<Void> task) {\r\n\r\n                                    reference.addListenerForSingleValueEvent(new ValueEventListener() {\r\n                                        @Override\r\n                                        public void onDataChange(@NonNull DataSnapshot snapshot) {\r\n                                            long i = snapshot.getChildrenCount();\r\n                                            if ((((i + 1) / p) * 100) > 60) {\r\n                                                DatabaseReference reference1 = FirebaseDatabase.getInstance().getReference(getString(R.string.dbname_contests))\r\n                                                        .child(userId)\r\n                                                        .child(getString(R.string.field_contest_reports));\r\n                                                reference1.addListenerForSingleValueEvent(new ValueEventListener() {\r\n                                                    @Override\r\n                                                    public void onDataChange(@NonNull DataSnapshot snapshot) {\r\n                                                        if (snapshot.exists()) {\r\n                                                            long x = (long) snapshot.getValue();\r\n                                                            reference1\r\n                                                                    .setValue(x + 1);\r\n                                                        } else {\r\n                                                            reference1\r\n                                                                    .setValue(1);\r\n                                                        }\r\n                                                    }\r\n\r\n                                                    @Override\r\n                                                    public void onCancelled(@NonNull DatabaseError error) {\r\n\r\n                                                    }\r\n                                                });\r\n                                            }\r\n\r\n                                        }\r\n\r\n                                        @Override\r\n                                        public void onCancelled(@NonNull DatabaseError error) {\r\n\r\n                                        }\r\n                                    });\r\n\r\n\r\n                                }\r\n                            });\r\n\r\n                }\r\n            }\r\n\r\n\r\n            @Override\r\n            public void onCancelled(@NonNull DatabaseError error) {\r\n\r\n            }\r\n        });\r\n    }\r\n\r\n    private void setupFirebaseAuth() {\r\n        Log.d(TAG, \"setup FirebaseAuth: setting up firebase auth.\");\r\n        mFirebaseDatabase = FirebaseDatabase.getInstance();\r\n        myRef = mFirebaseDatabase.getReference();\r\n        mAuth = FirebaseAuth.getInstance();\r\n\r\n        mAuthListener = new FirebaseAuth.AuthStateListener() {\r\n            @Override\r\n            public void onAuthStateChanged(@NonNull FirebaseAuth firebaseAuth) {\r\n                FirebaseUser user = firebaseAuth.getCurrentUser();\r\n\r\n                if (user != null) {\r\n                    Log.d(TAG, \"onAuthStateChanged:signed in:\" + user.getUid());\r\n                } else {\r\n                    Log.d(TAG, \"onAuthStateChanged:signed_out\");\r\n                    Log.d(TAG, \"onAuthStateChanged: navigating to login\");\r\n                    SharedPreferences settings = getSharedPreferences(\"shared preferences\", Context.MODE_PRIVATE);\r\n                    new android.app.AlertDialog.Builder(getApplicationContext())\r\n                            .setTitle(\"No user logon found\")\r\n                            .setMessage(\"We will be logging u out. \\n Please try to log in again\")\r\n                            .setPositiveButton(android.R.string.ok, (dialog, which) -> {\r\n                                Intent intent = new Intent(getApplicationContext(), LoginActivity.class);\r\n                                intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_CLEAR_TASK | Intent.FLAG_ACTIVITY_CLEAR_TOP);\r\n                                settings.edit().clear().apply();\r\n                                if (mAuthListener != null)\r\n                                    mAuth.removeAuthStateListener(mAuthListener);\r\n                                startActivity(intent);\r\n                            })\r\n                            .show();\r\n                }\r\n            }\r\n        };\r\n        myRef.addValueEventListener(new ValueEventListener() {\r\n            @Override\r\n            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {\r\n\r\n\r\n                //retrieve user information from the database\r\n                //retrieve image for the user in question\r\n            }\r\n\r\n            @Override\r\n            public void onCancelled(@NonNull DatabaseError databaseError) {\r\n\r\n            }\r\n        });\r\n    }\r\n\r\n    @Override\r\n    public void onStart() {\r\n        super.onStart();\r\n        mAuth.addAuthStateListener(mAuthListener);\r\n\r\n\r\n    }\r\n\r\n    @Override\r\n    public void onStop() {\r\n        super.onStop();\r\n        if (mAuthListener != null) {\r\n            mAuth.removeAuthStateListener(mAuthListener);\r\n        }\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/orion/orion/contest/ViewContestDetails.java	(revision cf7597ca1ff027f96fc145e942172638654ff2b2)
+++ app/src/main/java/com/orion/orion/contest/ViewContestDetails.java	(date 1623649390934)
@@ -674,15 +674,20 @@
                 posterlink = mCreateForm.getPo();
 
                 if (mCreateForm.getVt().equals("Jury") || mCreateForm.getVt().equals("Jury and Public")) {
-                    String f_string = "";
-                    jcCard.setVisibility(View.VISIBLE);
-                    jcTv.setVisibility(View.VISIBLE);
-                    judgingCriterias = mCreateForm.getCr();
-                    String[] array = judgingCriterias.split("///");
-                    for (String a : array)
-                        f_string = f_string + "\n" + a;
-                    Log.d(TAG, "onCreate: " + f_string);
-                    jcTv2.setText(f_string);
+                    try{
+                        String f_string = "";
+                        jcCard.setVisibility(View.VISIBLE);
+                        jcTv.setVisibility(View.VISIBLE);
+                        judgingCriterias = mCreateForm.getCr();
+                        String[] array = judgingCriterias.split("///");
+                        for (String a : array)
+                            f_string = f_string + "\n" + a;
+                        Log.d(TAG, "onCreate: " + f_string);
+                        jcTv2.setText(f_string);
+                    }catch(NullPointerException e){
+
+                    }
+
                 }
                 Glide.with(getApplicationContext())
                         .load(posterlink)
Index: app/src/main/java/com/orion/orion/contest/upcoming/UpcomingContestActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.orion.orion.contest.upcoming;\r\n\r\nimport android.animation.Animator;\r\nimport android.animation.ValueAnimator;\r\nimport android.content.Context;\r\nimport android.content.Intent;\r\nimport android.content.SharedPreferences;\r\nimport android.os.Bundle;\r\nimport android.os.Handler;\r\nimport android.os.Looper;\r\nimport android.text.Editable;\r\nimport android.text.TextWatcher;\r\nimport android.util.Log;\r\nimport android.view.Menu;\r\nimport android.view.MenuItem;\r\nimport android.view.View;\r\nimport android.view.animation.DecelerateInterpolator;\r\nimport android.view.inputmethod.InputMethodManager;\r\nimport android.widget.AbsListView;\r\nimport android.widget.AdapterView;\r\nimport android.widget.EditText;\r\nimport android.widget.ImageView;\r\nimport android.widget.LinearLayout;\r\nimport android.widget.ProgressBar;\r\nimport android.widget.RelativeLayout;\r\nimport android.widget.Spinner;\r\nimport android.widget.TextView;\r\nimport android.widget.Toast;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.appcompat.app.AppCompatActivity;\r\nimport androidx.recyclerview.widget.GridLayoutManager;\r\nimport androidx.recyclerview.widget.LinearLayoutManager;\r\nimport androidx.recyclerview.widget.RecyclerView;\r\nimport androidx.swiperefreshlayout.widget.SwipeRefreshLayout;\r\n\r\nimport com.google.firebase.auth.FirebaseAuth;\r\nimport com.google.firebase.auth.FirebaseUser;\r\nimport com.google.firebase.database.DataSnapshot;\r\nimport com.google.firebase.database.DatabaseError;\r\nimport com.google.firebase.database.DatabaseReference;\r\nimport com.google.firebase.database.FirebaseDatabase;\r\nimport com.google.firebase.database.Query;\r\nimport com.google.firebase.database.ValueEventListener;\r\nimport com.google.gson.Gson;\r\nimport com.google.gson.reflect.TypeToken;\r\nimport com.ittianyu.bottomnavigationviewex.BottomNavigationViewEx;\r\nimport com.orion.orion.Adapters.AdapterContestSearch;\r\nimport com.orion.orion.Adapters.AdapterContestUpcoming;\r\nimport com.orion.orion.Adapters.AdapterContestUpcomingGrid;\r\nimport com.orion.orion.Adapters.AdapterMainFeedContest;\r\nimport com.orion.orion.QuizActivity;\r\nimport com.orion.orion.R;\r\nimport com.orion.orion.contest.create.CreatedActivity;\r\nimport com.orion.orion.contest.joined.JoinedActivity;\r\nimport com.orion.orion.login.LoginActivity;\r\nimport com.orion.orion.models.ContestDetail;\r\nimport com.orion.orion.util.BottomNaavigationViewHelper;\r\nimport com.orion.orion.util.SNTPClient;\r\nimport com.orion.orion.util.StringManipilation;\r\n\r\nimport java.lang.reflect.Type;\r\nimport java.text.ParseException;\r\nimport java.text.SimpleDateFormat;\r\nimport java.util.ArrayList;\r\nimport java.util.Collections;\r\nimport java.util.Comparator;\r\nimport java.util.Date;\r\nimport java.util.TimeZone;\r\n\r\nimport static java.security.AccessController.getContext;\r\n\r\npublic class UpcomingContestActivity extends AppCompatActivity {\r\n    private static final String TAG = \"UPCOMING FRAGMENT\";\r\n    RecyclerView upcomingContestRv, contestSearchRv, upcomingFilterRv;\r\n    private ArrayList<ContestDetail> contestlist;\r\n    private ArrayList<ContestDetail> contestlist4;\r\n\r\n    private FirebaseAuth fAuth;\r\n    private EditText searchBox;\r\n    int prevHeight;\r\n\r\n    int height, dummyHeight;\r\n    TextView noPost, joined, created;\r\n    LinearLayout blurBg;\r\n    int x = 0, y = 0;\r\n    private int mResults;\r\n    ProgressBar bottomProgress;\r\n    private static final int ACTIVITY_NUM = 0;\r\n    private static final int CREATE_CONTEST = 1;\r\n    private int mResults2;\r\n    private ArrayList<String> mFollowing;\r\n    RelativeLayout relativeLayout;\r\n    ImageView gridB, gridY, colY, colB, filterB, filterY, cross;\r\n    private ArrayList<ContestDetail> contestlist2;\r\n    private ArrayList<ContestDetail> contestlist3;\r\n    private ArrayList<ContestDetail> paginatedcontestlist;\r\n    private ArrayList<ContestDetail> paginatedcontestSearch;\r\n    SwipeRefreshLayout contesRefresh;\r\n    boolean flag1 = false, flag3 = false, flag4 = false;\r\n    private Context mContext;\r\n    private FirebaseAuth mAuth;\r\n    private FirebaseAuth.AuthStateListener mAuthListener;\r\n    private FirebaseUser mUser;\r\n    private static int RETRY_DURATION = 1000;\r\n    private static final Handler handler = new Handler(Looper.getMainLooper());\r\n    private RecyclerView contestRv;\r\n    private Spinner domainspinner, entryfeeSpinner;\r\n    String domain = \"Overall\", entryfee = \"Overall\";\r\n    private AdapterContestUpcoming contestUpcoming;\r\n    private AdapterMainFeedContest contestUpcoming2;\r\n    //    SP\r\n    Gson gson;\r\n    SharedPreferences sp;\r\n\r\n\r\n    private AdapterContestUpcomingGrid adapterContestUpcomingGrid;\r\n    private AdapterContestSearch adapterContestSearch;\r\n\r\n\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        setContentView(R.layout.activity_upcoming_contest);\r\n        initWidgets();\r\n        setupBottomNavigationView();\r\n        setupFirebaseAuth();\r\n        checkCurrentuser(mAuth.getCurrentUser());\r\n        hideSoftKeyboard();\r\n\r\n\r\n        //          Initialize SharedPreference variables\r\n        sp = getSharedPreferences(\"shared preferences\", Context.MODE_PRIVATE);\r\n        gson = new Gson();\r\n\r\n\r\n        contestRv.setHasFixedSize(true);\r\n        LinearLayoutManager linearLayoutManager2 = new LinearLayoutManager(this, LinearLayoutManager.HORIZONTAL, false);\r\n        contestRv.setLayoutManager(linearLayoutManager2);\r\n\r\n        linearLayoutManager2.setItemPrefetchEnabled(true);\r\n        linearLayoutManager2.setInitialPrefetchItemCount(20);\r\n        contestRv.setItemViewCacheSize(9);\r\n        contestRv.setDrawingCacheEnabled(true);\r\n        contestRv.setDrawingCacheQuality(View.DRAWING_CACHE_QUALITY_LOW);\r\n\r\n        contestlist4 = new ArrayList<>();\r\n\r\n        joined.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n                Intent i = new Intent(UpcomingContestActivity.this, JoinedActivity.class);\r\n                startActivity(i);\r\n            }\r\n        });\r\n        created.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n                Intent i = new Intent(UpcomingContestActivity.this, CreatedActivity.class);\r\n                startActivity(i);\r\n            }\r\n        });\r\n\r\n\r\n        final GridLayoutManager[] linearLayoutManager1 = {new GridLayoutManager(this, 1)};\r\n        contestlist2 = new ArrayList<>();\r\n        adapterContestSearch = new AdapterContestSearch(this, contestlist2);\r\n\r\n        contestSearchRv.setHasFixedSize(true);\r\n        contestSearchRv.setLayoutManager(linearLayoutManager1[0]);\r\n        contestSearchRv.setAdapter(adapterContestSearch);\r\n\r\n        final GridLayoutManager[] linearLayoutManager = {new GridLayoutManager(this, 1)};\r\n        contestlist = new ArrayList<>();\r\n        contestUpcoming = new AdapterContestUpcoming(this, contestlist);\r\n\r\n        upcomingContestRv.setHasFixedSize(true);\r\n        upcomingContestRv.setLayoutManager(linearLayoutManager[0]);\r\n        contestUpcoming.setHasStableIds(true);\r\n        upcomingContestRv.setAdapter(contestUpcoming);\r\n\r\n\r\n        gridB.setOnClickListener(v -> {\r\n            gridB.setVisibility(View.GONE);\r\n            gridY.setVisibility(View.VISIBLE);\r\n            colY.setVisibility(View.GONE);\r\n            colB.setVisibility(View.VISIBLE);\r\n            linearLayoutManager[0] = new GridLayoutManager(this, 2);\r\n            upcomingContestRv.setLayoutManager(linearLayoutManager[0]);\r\n            adapterContestUpcomingGrid = new AdapterContestUpcomingGrid(this, paginatedcontestlist);\r\n            adapterContestUpcomingGrid.setHasStableIds(true);\r\n            upcomingContestRv.setAdapter(adapterContestUpcomingGrid);\r\n\r\n        });\r\n        filterB.setOnClickListener(v -> {\r\n            filterY.setVisibility(View.VISIBLE);\r\n            filterB.setVisibility(View.GONE);\r\n            new Handler().post(new Runnable() {\r\n                @Override\r\n                public void run() {\r\n                    expand(relativeLayout, 1000);\r\n\r\n                }\r\n            });\r\n        });\r\n\r\n        filterY.setOnClickListener(v -> {\r\n            filterY.setVisibility(View.GONE);\r\n            filterB.setVisibility(View.VISIBLE);\r\n            new Handler().post(new Runnable() {\r\n                @Override\r\n                public void run() {\r\n                    expand(relativeLayout, 1000);\r\n                }\r\n            });\r\n        });\r\n        colB.setOnClickListener(v -> {\r\n            gridB.setVisibility(View.VISIBLE);\r\n            gridY.setVisibility(View.GONE);\r\n            colY.setVisibility(View.VISIBLE);\r\n            colB.setVisibility(View.GONE);\r\n            linearLayoutManager[0] = new GridLayoutManager(this, 1);\r\n            upcomingContestRv.setLayoutManager(linearLayoutManager[0]);\r\n            contestUpcoming = new AdapterContestUpcoming(this, paginatedcontestlist);\r\n            contestUpcoming.setHasStableIds(true);\r\n            upcomingContestRv.setAdapter(contestUpcoming);\r\n        });\r\n        cross.setOnClickListener(view1 -> {\r\n            paginatedcontestSearch.clear();\r\n            adapterContestSearch.notifyDataSetChanged();\r\n            searchBox.setText(\"\");\r\n            blurBg.setVisibility(View.GONE);\r\n        });\r\n\r\n\r\n        upcomingContestRv.addOnScrollListener(new RecyclerView.OnScrollListener() {\r\n            @Override\r\n            public void onScrolled(@NonNull RecyclerView recyclerView, int dx, int dy) {\r\n                if (!recyclerView.canScrollVertically(1) && dy > 0) {\r\n                    //scrolled to BOTTOM\r\n                } else if (!recyclerView.canScrollVertically(-1) && dy < 0) {\r\n                    //scrolled to TOP\r\n                    if(relativeLayout.getVisibility() != View.VISIBLE) {\r\n                        expand(relativeLayout, 500);\r\n\r\n                    }\r\n\r\n                }else if(dy>0&&recyclerView.getScrollState()== RecyclerView.SCROLL_STATE_DRAGGING){\r\n                    if(relativeLayout.getVisibility() == View.VISIBLE){\r\n                        expand(relativeLayout, 500);\r\n\r\n\r\n                    }\r\n                }\r\n            }\r\n        });\r\n\r\n\r\n\r\n        contestSearchRv.addOnScrollListener(new RecyclerView.OnScrollListener() {\r\n            @Override\r\n            public void onScrollStateChanged(RecyclerView recyclerView, int newState) {\r\n                super.onScrollStateChanged(recyclerView, newState);\r\n                if (!recyclerView.canScrollVertically(1) && newState == RecyclerView.SCROLL_STATE_IDLE)\r\n                    displayMoreSearch();\r\n            }\r\n        });\r\n        contestlist3 = new ArrayList<>();\r\n        fAuth = FirebaseAuth.getInstance();\r\n        upcomingContestRv.addOnScrollListener(new RecyclerView.OnScrollListener() {\r\n            @Override\r\n            public void onScrollStateChanged(RecyclerView recyclerView, int newState) {\r\n                super.onScrollStateChanged(recyclerView, newState);\r\n                if (!recyclerView.canScrollVertically(1) && newState == RecyclerView.SCROLL_STATE_IDLE) {\r\n                    if (contestlist.size() != paginatedcontestlist.size())\r\n                        bottomProgress.setVisibility(View.VISIBLE);\r\n                    displayMoreContest();\r\n                } else bottomProgress.setVisibility(View.GONE);\r\n            }\r\n        });\r\n        domainspinner.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {\r\n            @Override\r\n            public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {\r\n                domain = domainspinner.getSelectedItem().toString();\r\n                getContestFiltered(domain, entryfee);\r\n            }\r\n\r\n            @Override\r\n            public void onNothingSelected(AdapterView<?> parent) {\r\n\r\n            }\r\n        });\r\n        entryfeeSpinner.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {\r\n            @Override\r\n            public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {\r\n                entryfee = entryfeeSpinner.getSelectedItem().toString();\r\n                getContestFiltered(domain, entryfee);\r\n            }\r\n\r\n            @Override\r\n            public void onNothingSelected(AdapterView<?> parent) {\r\n\r\n            }\r\n        });\r\n        searchBox.addTextChangedListener(new TextWatcher() {\r\n            @Override\r\n            public void beforeTextChanged(CharSequence s, int start, int count, int after) {\r\n\r\n            }\r\n\r\n            @Override\r\n            public void onTextChanged(CharSequence s, int start, int before, int count) {\r\n\r\n            }\r\n\r\n            @Override\r\n            public void afterTextChanged(Editable s) {\r\n\r\n                String key = \"\";\r\n                if (!searchBox.getText().toString().contains(\".\") &&\r\n                        !searchBox.getText().toString().contains(\",\") &&\r\n                        !searchBox.getText().toString().contains(\"#\") &&\r\n                        !searchBox.getText().toString().contains(\"$\") &&\r\n                        !searchBox.getText().toString().contains(\"[\") &&\r\n                        !searchBox.getText().toString().contains(\"]\"))\r\n                    key = searchBox.getText().toString();\r\n                searchContest(key);\r\n            }\r\n        });\r\n        contesRefresh.setOnRefreshListener(new SwipeRefreshLayout.OnRefreshListener() {\r\n            @Override\r\n            public void onRefresh() {\r\n                flag1 = false;\r\n                getContestFiltered(domain, entryfee);\r\n                Log.d(TAG, \"onRefresh: 11\");\r\n                checkRefresh();\r\n            }\r\n\r\n            private void checkRefresh() {\r\n                if (contesRefresh.isRefreshing() && flag1) {\r\n                    contesRefresh.setRefreshing(false);\r\n                    handler.removeCallbacks(this::checkRefresh);\r\n                    flag1 = false;\r\n                } else handler.postDelayed(this::checkRefresh, RETRY_DURATION);\r\n            }\r\n        });\r\n\r\n        getFollowerListFromSP();\r\n\r\n        getContestFiltered(domain, entryfee);\r\n\r\n    }\r\n\r\n    //  fetching FollowerList  from SharedPreferences\r\n    private void getFollowerListFromSP() {\r\n        String json = sp.getString(\"fl\", null);\r\n\r\n        Type type = new TypeToken<ArrayList<String>>() {\r\n        }.getType();\r\n        mFollowing = gson.fromJson(json, type);\r\n        if (mFollowing == null) {    //        if no arrayList is present\r\n            mFollowing = new ArrayList<>();\r\n\r\n            Log.d(TAG, \"getFollowerListFromSP: 1\");\r\n            getFollowing();   //            make new Arraylist\r\n\r\n        } else {\r\n            Log.d(TAG, \"getFollowerListFromSP: 1\");\r\n\r\n            checkFollowingUpdate();  //         Check if we followed or unfollowed anyone\r\n\r\n        }\r\n\r\n    }\r\n\r\n    private void getFollowing() {\r\n\r\n        DatabaseReference reference = FirebaseDatabase.getInstance().getReference();\r\n        Query query = reference\r\n                .child(getString(R.string.dbname_following))\r\n                .child(FirebaseAuth.getInstance().getCurrentUser().getUid());\r\n        query.addListenerForSingleValueEvent(new ValueEventListener() {\r\n            @Override\r\n            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {\r\n                if (dataSnapshot.exists()) {\r\n                    int x = 0;\r\n                    for (DataSnapshot singleSnapshot : dataSnapshot.getChildren()) {\r\n                        x++;\r\n                        Log.d(TAG, \"getFollowerListFromSP: 2\");\r\n                        mFollowing.add(singleSnapshot.getKey());\r\n                        if (x == dataSnapshot.getChildrenCount()) {\r\n\r\n//                        Add newly Created ArrayList to Shared Preferences\r\n                            SharedPreferences.Editor editor = sp.edit();\r\n                            String json = gson.toJson(mFollowing);\r\n                            editor.putString(\"fl\", json);\r\n                            editor.apply();\r\n\r\n                            getcontest();\r\n                        }\r\n                    }\r\n\r\n\r\n                } else {\r\n\r\n//                        Add newly Created ArrayList to Shared Preferences\r\n                    SharedPreferences.Editor editor = sp.edit();\r\n                    String json = gson.toJson(mFollowing);\r\n                    editor.putString(\"fl\", json);\r\n                    editor.apply();\r\n\r\n                    getcontest();\r\n\r\n                }\r\n\r\n            }\r\n\r\n\r\n            @Override\r\n            public void onCancelled(@NonNull DatabaseError databaseError) {\r\n                Log.d(TAG, \"Query Cancelled\");\r\n            }\r\n        });\r\n    }\r\n\r\n    private void checkContestUpdate() {\r\n        DatabaseReference db = FirebaseDatabase.getInstance().getReference();\r\n        db.child(getString(R.string.dbname_users))\r\n                .child(FirebaseAuth.getInstance().getCurrentUser().getUid())\r\n                .child(getString(R.string.contest_update))\r\n                .addListenerForSingleValueEvent(new ValueEventListener() {\r\n                    @Override\r\n                    public void onDataChange(@NonNull DataSnapshot snapshot1) {\r\n//                        If snapshot exist,new contest are there\r\n                        if (snapshot1.exists()) {\r\n                            Collections.reverse(contestlist4);\r\n                            for (DataSnapshot snapshot : snapshot1.getChildren()) {\r\n\r\n                                final int[] flag = {0};\r\n                                DatabaseReference db1 = FirebaseDatabase.getInstance().getReference();\r\n                                db1.child(getString(R.string.dbname_contestlist))\r\n                                        .child(snapshot.getKey())\r\n                                        .addListenerForSingleValueEvent(new ValueEventListener() {\r\n                                            @Override\r\n                                            public void onDataChange(@NonNull DataSnapshot snapshot) {\r\n                                                flag[0]++;\r\n                                                ContestDetail contestDetail = snapshot.getValue(ContestDetail.class);\r\n                                                if (contestDetail != null && !contestDetail.getR()) {\r\n                                                    contestlist4.add(contestDetail);\r\n\r\n                                                }\r\n                                                if (flag[0] == snapshot1.getChildrenCount()) {          //when all update added\r\n\r\n                                                    Collections.reverse(contestlist4);\r\n                                                    //                Add newly Created ArrayList to Shared Preferences\r\n                                                    SharedPreferences.Editor editor = sp.edit();\r\n                                                    String json = gson.toJson(contestlist4);\r\n                                                    editor.putString(\"cl\", json);\r\n                                                    editor.apply();\r\n\r\n                                                    contestUpcoming2 = new AdapterMainFeedContest(UpcomingContestActivity.this, contestlist4);\r\n                                                    contestUpcoming2.setHasStableIds(true);\r\n\r\n                                                    contestRv.setAdapter(contestUpcoming2);\r\n\r\n                                                    contestUpcoming2.notifyDataSetChanged();\r\n                                                    flag4 = true;\r\n\r\n\r\n//                                                    delete update\r\n                                                    DatabaseReference db3 = FirebaseDatabase.getInstance().getReference();\r\n                                                    db3.child(getString(R.string.dbname_users))\r\n                                                            .child(FirebaseAuth.getInstance().getCurrentUser().getUid())\r\n                                                            .child(getString(R.string.contest_update))\r\n                                                            .removeValue();\r\n                                                }\r\n                                            }\r\n\r\n\r\n                                            @Override\r\n                                            public void onCancelled(@NonNull DatabaseError error) {\r\n\r\n                                            }\r\n                                        });\r\n\r\n\r\n                            }\r\n                        } else {\r\n                            Log.d(TAG, \"getFollowerListFromSP: 5\");\r\n                            contestUpcoming2 = new AdapterMainFeedContest(UpcomingContestActivity.this, contestlist4);\r\n                            contestUpcoming2.setHasStableIds(true);\r\n\r\n                            contestRv.setAdapter(contestUpcoming2);\r\n\r\n                            contestUpcoming2.notifyDataSetChanged();\r\n                            flag4 = true;\r\n                        }\r\n                    }\r\n\r\n                    @Override\r\n                    public void onCancelled(@NonNull DatabaseError error) {\r\n\r\n                    }\r\n                });\r\n    }\r\n\r\n    private void getcontest() {\r\n        if (contestlist4 == null || contestlist4.size() == 0) {\r\n\r\n            DatabaseReference reference = FirebaseDatabase.getInstance().getReference();\r\n\r\n            for (int i = 0; i < mFollowing.size(); i++) {\r\n\r\n                final int count = i;\r\n\r\n\r\n                Query query = reference\r\n                        .child(getString(R.string.dbname_contestlist))\r\n                        .orderByChild(getString(R.string.field_user_id))\r\n                        .equalTo(mFollowing.get(i));\r\n                query.addListenerForSingleValueEvent(new ValueEventListener() {\r\n                    @Override\r\n                    public void onDataChange(@NonNull DataSnapshot dataSnapshot) {\r\n\r\n                        for (DataSnapshot snapshot : dataSnapshot.getChildren()) {\r\n                            ContestDetail contestDetail = snapshot.getValue(ContestDetail.class);\r\n                            if (!contestDetail.getR()) {\r\n                                contestlist4.add(contestDetail);\r\n                            }\r\n                        }\r\n\r\n                        Collections.sort(contestlist4, new Comparator<ContestDetail>() {\r\n                            @Override\r\n                            public int compare(ContestDetail o1, ContestDetail o2) {\r\n                                return o2.getTim().compareTo(o1.getTim());\r\n                            }\r\n                        });\r\n//                Add newly Created ArrayList to Shared Preferences\r\n                        SharedPreferences.Editor editor = sp.edit();\r\n                        String json = gson.toJson(contestlist4);\r\n                        editor.putString(\"cl\", json);\r\n                        editor.apply();\r\n\r\n                        contestUpcoming2 = new AdapterMainFeedContest(UpcomingContestActivity.this, contestlist4);\r\n                        contestUpcoming2.setHasStableIds(true);\r\n\r\n                        contestRv.setAdapter(contestUpcoming2);\r\n\r\n                        contestUpcoming2.notifyDataSetChanged();\r\n                        flag3 = true;\r\n\r\n                    }\r\n\r\n\r\n                    @Override\r\n                    public void onCancelled(@NonNull DatabaseError databaseError) {\r\n\r\n                    }\r\n                });\r\n\r\n            }\r\n\r\n            if (mFollowing.size() == 0) {\r\n                flag3 = true;\r\n            }\r\n        } else {\r\n            checkContestUpdate();\r\n        }\r\n\r\n    }\r\n\r\n\r\n    private void checkFollowingUpdate() {\r\n        Log.d(TAG, \"getFollowerListFromSP: 2\");\r\n        int c = 0;\r\n\r\n        String json = sp.getString(\"addfollowing\", null);\r\n        Type type = new TypeToken<ArrayList<String>>() {\r\n        }.getType();\r\n        ArrayList<String> list = new ArrayList<>();\r\n        list = gson.fromJson(json, type);\r\n        if (list == null || list.size() == 0) {    //        not followed anyone\r\n            c++;\r\n        } else {              //    we followed someone....update everylist\r\n\r\n            addToContestList(list);\r\n            Log.d(TAG, \"getFollowerListFromSP: 21\");\r\n\r\n        }\r\n\r\n        json = sp.getString(\"removefollowing\", null);\r\n        type = new TypeToken<ArrayList<String>>() {\r\n        }.getType();\r\n        ArrayList<String> ulist = new ArrayList<>();\r\n        ulist = gson.fromJson(json, type);\r\n        if (ulist == null || ulist.size() == 0) {    //         not unfollowed anyone\r\n            c++;\r\n        } else {                  //    we unfollowed someone....update everylist\r\n\r\n            Log.d(TAG, \"getFollowerListFromSP: 22\");\r\n            removeFromContestList(ulist);\r\n\r\n        }\r\n\r\n        if (c == 2) {    //  if ther is no update\r\n            Log.d(TAG, \"getFollowerListFromSP: 3\");\r\n            getContestListFromSP();\r\n\r\n        } else {\r\n            SharedPreferences.Editor editor = sp.edit();\r\n            json = gson.toJson(null);\r\n            editor.putString(\"addfollowing\", json);\r\n            editor.apply();\r\n            json = gson.toJson(null);\r\n            editor.putString(\"removefollowing\", json);\r\n            editor.apply();\r\n        }\r\n    }\r\n\r\n\r\n    //  fetching ContestList  from SharedPreferences\r\n    private void getContestListFromSP() {\r\n        String json = sp.getString(\"cl\", null);\r\n        Type type = new TypeToken<ArrayList<ContestDetail>>() {\r\n        }.getType();\r\n        contestlist4 = gson.fromJson(json, type);\r\n        if (contestlist4 == null || contestlist4.size() == 0) {    //        if no arrayList is present\r\n\r\n            contestlist4 = new ArrayList<>();\r\n            Log.d(TAG, \"checkContestUpdate: 00\");\r\n            getcontest();   //            make new Arraylist\r\n\r\n        } else {\r\n            Log.d(TAG, \"getFollowerListFromSP: 4\");\r\n            checkContestUpdate();\r\n\r\n\r\n        }\r\n\r\n    }\r\n\r\n    private void removeFromContestList(ArrayList<String> list) {\r\n\r\n        String json = sp.getString(\"cl\", null);\r\n        Type type = new TypeToken<ArrayList<ContestDetail>>() {\r\n        }.getType();\r\n        ArrayList<ContestDetail> list1 = new ArrayList<>();\r\n        list1 = gson.fromJson(json, type);\r\n        if (list1 == null) {\r\n            list1 = new ArrayList<>();\r\n        }\r\n\r\n\r\n        if (list1.size() != 0) {\r\n            for (int i = 0; i < list.size(); i++) {\r\n                for (int x = 0; x < list1.size(); x++) {\r\n                    if (list1.get(x).getUi().equals(list.get(i))) {\r\n                        list1.remove(list1.get(x));\r\n                        x--;\r\n                    }\r\n                }\r\n\r\n            }\r\n        }\r\n\r\n//                        Add newly Created ArrayList to Shared Preferences\r\n        SharedPreferences.Editor editor = sp.edit();\r\n        json = gson.toJson(list1);\r\n        editor.putString(\"cl\", json);\r\n        editor.apply();\r\n\r\n        contestUpcoming2 = new AdapterMainFeedContest(UpcomingContestActivity.this, contestlist4);\r\n        contestUpcoming2.setHasStableIds(true);\r\n\r\n        contestRv.setAdapter(contestUpcoming2);\r\n\r\n        contestUpcoming2.notifyDataSetChanged();\r\n        flag3 = true;\r\n\r\n\r\n    }\r\n\r\n    private void addToContestList(ArrayList<String> list) {\r\n        String json = sp.getString(\"cl\", null);\r\n        Type type = new TypeToken<ArrayList<ContestDetail>>() {\r\n        }.getType();\r\n        contestlist4 = gson.fromJson(json, type);\r\n        if (contestlist4 == null || contestlist4.size() == 0) {    //        if no arrayList is present\r\n            contestlist4 = new ArrayList<>();\r\n\r\n        }\r\n\r\n        DatabaseReference reference = FirebaseDatabase.getInstance().getReference();\r\n\r\n        for (int i = 0; i < list.size(); i++) {\r\n\r\n            final int count = i;\r\n\r\n\r\n            Query query = reference\r\n                    .child(getString(R.string.dbname_contestlist))\r\n                    .orderByChild(getString(R.string.field_user_id))\r\n                    .equalTo(list.get(i));\r\n            query.addListenerForSingleValueEvent(new ValueEventListener() {\r\n                @Override\r\n                public void onDataChange(@NonNull DataSnapshot dataSnapshot) {\r\n\r\n                    if (dataSnapshot.exists()) {\r\n                        Collections.reverse(contestlist4);\r\n                        int x = 0;\r\n                        for (DataSnapshot snapshot : dataSnapshot.getChildren()) {\r\n                            x++;\r\n                            ContestDetail contestDetail = snapshot.getValue(ContestDetail.class);\r\n                            if (!contestDetail.getR()) {\r\n                                contestlist4.add(contestDetail);\r\n                            }\r\n                            if (x == dataSnapshot.getChildrenCount() && count == list.size() - 1) {\r\n\r\n                                Collections.reverse(contestlist4);\r\n\r\n//                        Add newly Created ArrayList to Shared Preferences\r\n                                SharedPreferences.Editor editor = sp.edit();\r\n                                String json = gson.toJson(contestlist4);\r\n                                editor.putString(\"cl\", json);\r\n                                editor.apply();\r\n\r\n                                contestUpcoming2 = new AdapterMainFeedContest(UpcomingContestActivity.this, contestlist4);\r\n                                contestUpcoming2.setHasStableIds(true);\r\n\r\n                                contestRv.setAdapter(contestUpcoming2);\r\n\r\n                                contestUpcoming2.notifyDataSetChanged();\r\n                                flag3 = true;\r\n\r\n                            }\r\n                        }\r\n\r\n\r\n                    } else {\r\n                        contestUpcoming2 = new AdapterMainFeedContest(UpcomingContestActivity.this, contestlist4);\r\n                        contestUpcoming2.setHasStableIds(true);\r\n\r\n                        contestRv.setAdapter(contestUpcoming2);\r\n\r\n                        contestUpcoming2.notifyDataSetChanged();\r\n                        flag3 = true;\r\n                    }\r\n                }\r\n\r\n                @Override\r\n                public void onCancelled(@NonNull DatabaseError databaseError) {\r\n\r\n                }\r\n            });\r\n\r\n        }\r\n\r\n\r\n    }\r\n\r\n    public void initWidgets() {\r\n        contestRv = findViewById(R.id.recyclerContest);\r\n        upcomingContestRv = findViewById(R.id.recycler_view1);\r\n        contestSearchRv = findViewById(R.id.recyclerKey);\r\n        searchBox = findViewById(R.id.search);\r\n        domainspinner = findViewById(R.id.domainspinner);\r\n        entryfeeSpinner = findViewById(R.id.entryfeeSpinner);\r\n        gridB = findViewById(R.id.gridB);\r\n        gridY = findViewById(R.id.gridY);\r\n        colB = findViewById(R.id.columnB);\r\n        colY = findViewById(R.id.columnY);\r\n        filterB = findViewById(R.id.filter);\r\n        filterY = findViewById(R.id.filteryellow);\r\n        relativeLayout = findViewById(R.id.relparent);\r\n        contesRefresh = findViewById(R.id.contest_refresh);\r\n        blurBg = findViewById(R.id.pro);\r\n        cross = findViewById(R.id.cross);\r\n        bottomProgress = findViewById(R.id.pro2);\r\n        noPost = findViewById(R.id.noPost);\r\n        joined = findViewById(R.id.joined);\r\n        created = findViewById(R.id.created);\r\n\r\n\r\n    }\r\n\r\n    public void expand(final View v, int duration) {\r\n        final boolean expand = v.getVisibility() != View.VISIBLE;\r\n\r\n        prevHeight = v.getHeight();\r\n        if (x == 0) {\r\n            x++;\r\n            dummyHeight = v.getHeight();\r\n        }\r\n        if (prevHeight == 0) {\r\n            int measureSpecParams = View.MeasureSpec.getSize(View.MeasureSpec.UNSPECIFIED);\r\n            v.measure(measureSpecParams, measureSpecParams);\r\n            height = dummyHeight;\r\n        } else {\r\n            height = 0;\r\n        }\r\n        ValueAnimator valueAnimator = ValueAnimator.ofInt(prevHeight, height);\r\n        int finalHeight = height;\r\n        valueAnimator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() {\r\n            @Override\r\n            public void onAnimationUpdate(ValueAnimator animation) {\r\n                v.getLayoutParams().height = (int) animation.getAnimatedValue();\r\n                v.requestLayout();\r\n\r\n            }\r\n        });\r\n\r\n        valueAnimator.addListener(new Animator.AnimatorListener() {\r\n            @Override\r\n            public void onAnimationStart(Animator animation) {\r\n                if (expand) {\r\n                    v.setVisibility(View.VISIBLE);\r\n                }\r\n            }\r\n\r\n            @Override\r\n            public void onAnimationEnd(Animator animation) {\r\n                if (!expand) {\r\n                    v.setVisibility(View.INVISIBLE);\r\n                }\r\n            }\r\n\r\n            @Override\r\n            public void onAnimationCancel(Animator animation) {\r\n\r\n            }\r\n\r\n            @Override\r\n            public void onAnimationRepeat(Animator animation) {\r\n\r\n            }\r\n        });\r\n        valueAnimator.setInterpolator(new DecelerateInterpolator());\r\n        valueAnimator.setDuration(duration);\r\n        valueAnimator.start();\r\n    }\r\n\r\n    private void getContestFiltered(String domain, String entryfee) {\r\n        final String[] timestamp = new String[1];\r\n        SNTPClient.getDate(TimeZone.getTimeZone(\"Asia/Colombo\"), new SNTPClient.Listener() {\r\n            @Override\r\n            public void onTimeReceived(String rawDate) {\r\n                // rawDate -> 2019-11-05T17:51:01+0530\r\n\r\n                //*************************************************************************\r\n                String currentTime = StringManipilation.getTime(rawDate);\r\n                java.text.DateFormat formatter1 = new SimpleDateFormat(\"dd-MM-yyyy\");\r\n                Date date1 = null;\r\n                try {\r\n                    date1 = (Date) formatter1.parse(currentTime);\r\n                } catch (ParseException e) {\r\n                    e.printStackTrace();\r\n                }\r\n\r\n                timestamp[0] = String.valueOf(date1.getTime());\r\n\r\n                if (!domain.equals(\"Overall\")) {\r\n\r\n\r\n                    DatabaseReference reference = FirebaseDatabase.getInstance().getReference();\r\n                    reference.child(getString(R.string.dbname_contestlist))\r\n                            .orderByChild(getString(R.string.field_domain)).equalTo(domain)\r\n                            .addListenerForSingleValueEvent(new ValueEventListener() {\r\n                                @Override\r\n                                public void onDataChange(@NonNull DataSnapshot dataSnapshot) {\r\n                                    contestlist.clear();\r\n                                    for (DataSnapshot snapshot : dataSnapshot.getChildren()) {\r\n\r\n                                        String resDate = snapshot.child(getString(R.string.field_winners_declare)).getValue().toString();\r\n                                        java.text.DateFormat formatter5 = new SimpleDateFormat(\"dd-MM-yyyy\");\r\n                                        Date date5 = null;\r\n                                        try {\r\n                                            date5 = (Date) formatter5.parse(resDate);\r\n                                        } catch (ParseException e) {\r\n                                            e.printStackTrace();\r\n                                        }\r\n                                        String resDate2 = String.valueOf(date5.getTime());\r\n                                        if ((Long.parseLong(resDate2) + 604800000) >= Long.parseLong(timestamp[0])) {\r\n                                            ContestDetail contestDetail = snapshot.getValue(ContestDetail.class);\r\n\r\n                                            contestlist.add(contestDetail);\r\n                                        }\r\n                                    }\r\n                                    if (!entryfee.equals(\"Overall\")) {\r\n\r\n                                        contestlist3.clear();\r\n                                        for (int x = 0; x < contestlist.size(); x++) {\r\n                                            ContestDetail contestDetail = contestlist.get(x);\r\n                                            if (entryfee.equals(\"Free\")) {\r\n                                                if (contestDetail.getEf().equals(entryfee)) {\r\n\r\n                                                    contestlist3.add(contestDetail);\r\n                                                }\r\n                                            }\r\n                                            if (!entryfee.equals(\"Free\"))\r\n                                                if (!contestDetail.getEf().equals(\"Free\")) {\r\n                                                    contestlist3.add(contestDetail);\r\n                                                }\r\n                                        }\r\n                                        contestlist.clear();\r\n                                        contestlist.addAll(contestlist3);\r\n                                        Collections.reverse(contestlist);\r\n                                        displaycontest();\r\n                                    } else {\r\n                                        Collections.reverse(contestlist);\r\n\r\n                                        displaycontest();\r\n                                    }\r\n\r\n\r\n                                }\r\n\r\n                                @Override\r\n                                public void onCancelled(@NonNull DatabaseError databaseError) {\r\n\r\n                                }\r\n                            });\r\n\r\n                } else {\r\n                    DatabaseReference reference = FirebaseDatabase.getInstance().getReference();\r\n                    reference.child(getString(R.string.dbname_contestlist))\r\n                            .addListenerForSingleValueEvent(new ValueEventListener() {\r\n                                @Override\r\n                                public void onDataChange(@NonNull DataSnapshot dataSnapshot) {\r\n                                    contestlist.clear();\r\n                                    for (DataSnapshot snapshot : dataSnapshot.getChildren()) {\r\n                                        String resDate = snapshot.child(getString(R.string.field_winners_declare)).getValue().toString();\r\n                                        java.text.DateFormat formatter5 = new SimpleDateFormat(\"dd-MM-yyyy\");\r\n                                        Date date5 = null;\r\n                                        try {\r\n                                            date5 = (Date) formatter5.parse(resDate);\r\n                                        } catch (ParseException e) {\r\n                                            e.printStackTrace();\r\n                                        }\r\n                                        String resDate2 = String.valueOf(date5.getTime());\r\n                                        if ((Long.parseLong(resDate2) + 604800000) >= Long.parseLong(timestamp[0])) {\r\n                                            ContestDetail contestDetail = snapshot.getValue(ContestDetail.class);\r\n\r\n                                            contestlist.add(contestDetail);\r\n                                        }\r\n                                    }\r\n\r\n                                    if (!entryfee.equals(\"Overall\")) {\r\n                                        contestlist3.clear();\r\n                                        for (int x = 0; x < contestlist.size(); x++) {\r\n                                            ContestDetail contestDetail = contestlist.get(x);\r\n                                            if (entryfee.equals(\"Free\")) {\r\n                                                if (contestDetail.getEf().equals(entryfee)) {\r\n\r\n                                                    contestlist3.add(contestDetail);\r\n                                                }\r\n                                            }\r\n                                            if (!entryfee.equals(\"Free\"))\r\n                                                if (!contestDetail.getEf().equals(\"Free\")) {\r\n                                                    contestlist3.add(contestDetail);\r\n                                                }\r\n                                        }\r\n                                        contestlist.clear();\r\n                                        contestlist.addAll(contestlist3);\r\n                                        Collections.reverse(contestlist);\r\n                                        displaycontest();\r\n                                    } else {\r\n                                        Collections.reverse(contestlist);\r\n                                        displaycontest();\r\n                                    }\r\n\r\n\r\n                                }\r\n\r\n                                @Override\r\n                                public void onCancelled(@NonNull DatabaseError databaseError) {\r\n\r\n                                }\r\n                            });\r\n                }\r\n            }\r\n\r\n\r\n            @Override\r\n            public void onError(Exception ex) {\r\n                Log.e(SNTPClient.TAG, ex.getMessage());\r\n            }\r\n        });\r\n    }\r\n\r\n\r\n    private void searchContest(String key) {\r\n\r\n        if (key.length() < 20) {\r\n\r\n        } else {\r\n            DatabaseReference reference = FirebaseDatabase.getInstance().getReference();\r\n            reference.child(getString(R.string.dbname_contestlist))\r\n                    .child(key)\r\n                    .addListenerForSingleValueEvent(new ValueEventListener() {\r\n                        @Override\r\n                        public void onDataChange(@NonNull DataSnapshot dataSnapshot) {\r\n                            if (dataSnapshot.exists()) {\r\n                                contestlist2.clear();\r\n                                ContestDetail contestDetail = dataSnapshot.getValue(ContestDetail.class);\r\n\r\n                                contestlist2.add(contestDetail);\r\n                                Collections.reverse(contestlist2);\r\n                                displaysearch();\r\n                            }\r\n\r\n\r\n                        }\r\n\r\n                        @Override\r\n                        public void onCancelled(@NonNull DatabaseError databaseError) {\r\n\r\n                        }\r\n                    });\r\n\r\n\r\n        }\r\n\r\n    }\r\n\r\n    private void displaycontest() {\r\n        noPost.setVisibility(View.GONE);\r\n        bottomProgress.setVisibility(View.GONE);\r\n\r\n        flag1 = true;\r\n        paginatedcontestlist = new ArrayList<>();\r\n\r\n        if (contestlist != null && contestlist.size() != 0) {\r\n\r\n            try {\r\n\r\n\r\n                int iteration = contestlist.size();\r\n                if (iteration > 5) {\r\n                    iteration = 5;\r\n                }\r\n                mResults = 5;\r\n                for (int i = 0; i < iteration; i++) {\r\n                    paginatedcontestlist.add(contestlist.get(i));\r\n                }\r\n                if (upcomingContestRv.getAdapter().getClass().equals(contestUpcoming.getClass())) {\r\n\r\n                    contestUpcoming = new AdapterContestUpcoming(this, paginatedcontestlist);\r\n                    contestUpcoming.setHasStableIds(true);\r\n\r\n                    upcomingContestRv.setAdapter(contestUpcoming);\r\n\r\n                } else {\r\n\r\n                    adapterContestUpcomingGrid = new AdapterContestUpcomingGrid(this, paginatedcontestlist);\r\n                    adapterContestUpcomingGrid.setHasStableIds(true);\r\n\r\n                    upcomingContestRv.setAdapter(adapterContestUpcomingGrid);\r\n                }\r\n\r\n\r\n            } catch (NullPointerException e) {\r\n                Log.e(TAG, \"Null pointer exception\" + e.getMessage());\r\n\r\n            } catch (IndexOutOfBoundsException e) {\r\n                Log.e(TAG, \"index out of bound\" + e.getMessage());\r\n\r\n            }\r\n\r\n        } else {\r\n            bottomProgress.setVisibility(View.GONE);\r\n            noPost.setVisibility(View.VISIBLE);\r\n            if (upcomingContestRv.getAdapter().getClass().equals(contestUpcoming.getClass())) {\r\n\r\n                contestUpcoming = new AdapterContestUpcoming(this, contestlist);\r\n                contestUpcoming.setHasStableIds(true);\r\n\r\n                upcomingContestRv.setAdapter(contestUpcoming);\r\n\r\n            } else {\r\n\r\n                adapterContestUpcomingGrid = new AdapterContestUpcomingGrid(this, contestlist);\r\n                adapterContestUpcomingGrid.setHasStableIds(true);\r\n\r\n                upcomingContestRv.setAdapter(adapterContestUpcomingGrid);\r\n\r\n\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n    public void displayMoreContest() {\r\n\r\n        try {\r\n            if (contestlist.size() > mResults && contestlist.size() > 0) {\r\n\r\n                int iterations;\r\n                if (contestlist.size() > (mResults + 10)) {\r\n                    iterations = 10;\r\n                } else {\r\n                    iterations = contestlist.size() - mResults;\r\n                }\r\n                for (int i = mResults; i < mResults + iterations; i++) {\r\n                    paginatedcontestlist.add(contestlist.get(i));\r\n\r\n                }\r\n                upcomingContestRv.post(new Runnable() {\r\n                    @Override\r\n                    public void run() {\r\n                        if (upcomingContestRv.getAdapter().getClass().equals(contestUpcoming.getClass())) {\r\n                            contestUpcoming.notifyItemRangeInserted(mResults, iterations);\r\n\r\n\r\n                        } else {\r\n                            adapterContestUpcomingGrid.notifyItemRangeInserted(mResults, iterations);\r\n                        }\r\n                    }\r\n                });\r\n                mResults = mResults + iterations;\r\n\r\n\r\n            } else {\r\n                bottomProgress.setVisibility(View.GONE);\r\n\r\n            }\r\n\r\n        } catch (NullPointerException e) {\r\n            Log.e(TAG, \"Null pointer exception\" + e.getMessage());\r\n\r\n        } catch (IndexOutOfBoundsException e) {\r\n            Log.e(TAG, \"index out of bound\" + e.getMessage());\r\n\r\n        }\r\n\r\n    }\r\n\r\n    private void displaysearch() {\r\n        blurBg.setVisibility(View.VISIBLE);\r\n        paginatedcontestSearch = new ArrayList<>();\r\n        if (contestlist2 != null) {\r\n\r\n            try {\r\n\r\n\r\n                int iteration = contestlist2.size();\r\n                if (iteration > 5) {\r\n                    iteration = 5;\r\n                }\r\n                mResults2 = 5;\r\n                for (int i = 0; i < iteration; i++) {\r\n                    paginatedcontestSearch.add(contestlist2.get(i));\r\n                }\r\n                adapterContestSearch = new AdapterContestSearch(this, paginatedcontestSearch);\r\n                contestSearchRv.setAdapter(adapterContestSearch);\r\n\r\n            } catch (NullPointerException e) {\r\n                Log.e(TAG, \"Null pointer exception\" + e.getMessage());\r\n\r\n            } catch (IndexOutOfBoundsException e) {\r\n                Log.e(TAG, \"index out of bound\" + e.getMessage());\r\n\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n    public void displayMoreSearch() {\r\n\r\n        try {\r\n            if (contestlist2.size() > mResults2 && contestlist2.size() > 0) {\r\n\r\n                int iterations;\r\n                if (contestlist2.size() > (mResults2 + 10)) {\r\n                    iterations = 10;\r\n                } else {\r\n                    iterations = contestlist2.size() - mResults2;\r\n                }\r\n                for (int i = mResults2; i < mResults2 + iterations; i++) {\r\n                    paginatedcontestSearch.add(contestlist2.get(i));\r\n\r\n                }\r\n                mResults2 = mResults2 + iterations;\r\n                contestSearchRv.post(new Runnable() {\r\n                    @Override\r\n                    public void run() {\r\n                        adapterContestSearch.notifyDataSetChanged();\r\n                    }\r\n                });\r\n\r\n            }\r\n\r\n        } catch (NullPointerException e) {\r\n            Log.e(TAG, \"Null pointer exception\" + e.getMessage());\r\n\r\n        } catch (IndexOutOfBoundsException e) {\r\n            Log.e(TAG, \"index out of bound\" + e.getMessage());\r\n\r\n        }\r\n\r\n    }\r\n\r\n    private void setupBottomNavigationView() {\r\n        Log.d(TAG, \" setupBottomNavigationView:setting up BottomNavigationView\");\r\n        BottomNavigationViewEx bottomNavigationViewEx = (BottomNavigationViewEx) findViewById(R.id.BottomNavViewBar);\r\n        BottomNaavigationViewHelper.setupBottomNavigationView(bottomNavigationViewEx, this);\r\n        BottomNaavigationViewHelper.enableNavigation(UpcomingContestActivity.this, this, bottomNavigationViewEx);\r\n\r\n        Menu menu = bottomNavigationViewEx.getMenu();\r\n        MenuItem menuItem = menu.getItem(ACTIVITY_NUM);\r\n        menuItem.setChecked(true);\r\n\r\n    }\r\n\r\n    private void checkCurrentuser(FirebaseUser user) {\r\n        Log.d(TAG, \"checkCurrentuser:check if current user logged in\");\r\n        if (user == null)\r\n            startActivity(new Intent(UpcomingContestActivity.this, LoginActivity.class));\r\n    }\r\n\r\n    private void setupFirebaseAuth() {\r\n        Log.d(TAG, \"setup FirebaseAuth: setting up firebase auth.\");\r\n        mAuth = FirebaseAuth.getInstance();\r\n        mAuthListener = firebaseAuth -> {\r\n            mUser = firebaseAuth.getCurrentUser();\r\n            if (mUser == null) {\r\n                Log.d(TAG, \"onAuthStateChanged:signed_out\");\r\n                Log.d(TAG, \"onAuthStateChanged: navigating to login\");\r\n                SharedPreferences settings = getSharedPreferences(\"shared preferences\", Context.MODE_PRIVATE);\r\n                new android.app.AlertDialog.Builder(mContext)\r\n                        .setTitle(\"No user logon found\")\r\n                        .setMessage(\"We will be logging u out. \\n Please try to log in again\")\r\n                        .setPositiveButton(android.R.string.ok, (dialog, which) -> {\r\n                            Intent intent = new Intent(mContext, LoginActivity.class);\r\n                            intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_CLEAR_TASK | Intent.FLAG_ACTIVITY_CLEAR_TOP);\r\n                            settings.edit().clear().apply();\r\n                            if (mAuthListener != null) mAuth.removeAuthStateListener(mAuthListener);\r\n                            startActivity(intent);\r\n                        })\r\n                        .show();\r\n            } else Log.d(TAG, \"onAuthStateChanged: signed_in:\" + mUser.getUid());\r\n        };\r\n    }\r\n\r\n    private void hideSoftKeyboard() {\r\n        if (getCurrentFocus() != null) {\r\n            InputMethodManager imm = (InputMethodManager) getSystemService(INPUT_METHOD_SERVICE);\r\n            imm.hideSoftInputFromWindow(getCurrentFocus().getWindowToken(), 0);\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void onStart() {\r\n        super.onStart();\r\n        mAuth.addAuthStateListener(mAuthListener);\r\n        checkCurrentuser(mAuth.getCurrentUser());\r\n    }\r\n\r\n    @Override\r\n    public void onStop() {\r\n        super.onStop();\r\n        if (mAuthListener != null) mAuth.removeAuthStateListener(mAuthListener);\r\n    }\r\n\r\n    private Boolean exit = false;\r\n\r\n    @Override\r\n    public void onBackPressed() {\r\n        if (exit) {\r\n            moveTaskToBack(true); // finish activity\r\n        } else {\r\n            Toast.makeText(this, \"Press Back again to Exit.\",\r\n                    Toast.LENGTH_SHORT).show();\r\n            exit = true;\r\n            new Handler().postDelayed(new Runnable() {\r\n                @Override\r\n                public void run() {\r\n                    exit = false;\r\n                }\r\n            }, 2 * 1000);\r\n\r\n        }\r\n\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/orion/orion/contest/upcoming/UpcomingContestActivity.java	(revision cf7597ca1ff027f96fc145e942172638654ff2b2)
+++ app/src/main/java/com/orion/orion/contest/upcoming/UpcomingContestActivity.java	(date 1623646372694)
@@ -408,6 +408,7 @@
                     String json = gson.toJson(mFollowing);
                     editor.putString("fl", json);
                     editor.apply();
+                    contestRv.setVisibility(View.GONE);
 
                     getcontest();
 
@@ -457,13 +458,15 @@
                                                     String json = gson.toJson(contestlist4);
                                                     editor.putString("cl", json);
                                                     editor.apply();
-
-                                                    contestUpcoming2 = new AdapterMainFeedContest(UpcomingContestActivity.this, contestlist4);
-                                                    contestUpcoming2.setHasStableIds(true);
+                                                    if(contestlist4.size()!=0) {
+                                                        contestRv.setVisibility(View.VISIBLE);
+                                                        contestUpcoming2 = new AdapterMainFeedContest(UpcomingContestActivity.this, contestlist4);
+                                                        contestUpcoming2.setHasStableIds(true);
 
-                                                    contestRv.setAdapter(contestUpcoming2);
+                                                        contestRv.setAdapter(contestUpcoming2);
 
-                                                    contestUpcoming2.notifyDataSetChanged();
+                                                        contestUpcoming2.notifyDataSetChanged();
+                                                    }
                                                     flag4 = true;
 
 
@@ -487,12 +490,16 @@
                             }
                         } else {
                             Log.d(TAG, "getFollowerListFromSP: 5");
-                            contestUpcoming2 = new AdapterMainFeedContest(UpcomingContestActivity.this, contestlist4);
-                            contestUpcoming2.setHasStableIds(true);
+                            contestRv.setVisibility(View.VISIBLE);
+                            if(contestlist4.size()!=0) {
+
+                                contestUpcoming2 = new AdapterMainFeedContest(UpcomingContestActivity.this, contestlist4);
+                                contestUpcoming2.setHasStableIds(true);
 
-                            contestRv.setAdapter(contestUpcoming2);
+                                contestRv.setAdapter(contestUpcoming2);
 
-                            contestUpcoming2.notifyDataSetChanged();
+                                contestUpcoming2.notifyDataSetChanged();
+                            }
                             flag4 = true;
                         }
                     }
@@ -540,13 +547,18 @@
                         String json = gson.toJson(contestlist4);
                         editor.putString("cl", json);
                         editor.apply();
+                        if(contestlist4.size()!=0) {
+
+                            contestRv.setVisibility(View.VISIBLE);
 
-                        contestUpcoming2 = new AdapterMainFeedContest(UpcomingContestActivity.this, contestlist4);
-                        contestUpcoming2.setHasStableIds(true);
+                            contestUpcoming2 = new AdapterMainFeedContest(UpcomingContestActivity.this, contestlist4);
+                            contestUpcoming2.setHasStableIds(true);
 
-                        contestRv.setAdapter(contestUpcoming2);
+                            contestRv.setAdapter(contestUpcoming2);
 
-                        contestUpcoming2.notifyDataSetChanged();
+                            contestUpcoming2.notifyDataSetChanged();
+                        }
+
                         flag3 = true;
 
                     }
@@ -668,13 +680,17 @@
         json = gson.toJson(list1);
         editor.putString("cl", json);
         editor.apply();
+        if(contestlist4.size()!=0) {
+
+            contestRv.setVisibility(View.VISIBLE);
 
-        contestUpcoming2 = new AdapterMainFeedContest(UpcomingContestActivity.this, contestlist4);
-        contestUpcoming2.setHasStableIds(true);
+            contestUpcoming2 = new AdapterMainFeedContest(UpcomingContestActivity.this, contestlist4);
+            contestUpcoming2.setHasStableIds(true);
 
-        contestRv.setAdapter(contestUpcoming2);
+            contestRv.setAdapter(contestUpcoming2);
 
-        contestUpcoming2.notifyDataSetChanged();
+            contestUpcoming2.notifyDataSetChanged();
+        }
         flag3 = true;
 
 
@@ -723,13 +739,17 @@
                                 String json = gson.toJson(contestlist4);
                                 editor.putString("cl", json);
                                 editor.apply();
+                                if(contestlist4.size()!=0) {
+
+                                    contestRv.setVisibility(View.VISIBLE);
 
-                                contestUpcoming2 = new AdapterMainFeedContest(UpcomingContestActivity.this, contestlist4);
-                                contestUpcoming2.setHasStableIds(true);
+                                    contestUpcoming2 = new AdapterMainFeedContest(UpcomingContestActivity.this, contestlist4);
+                                    contestUpcoming2.setHasStableIds(true);
 
-                                contestRv.setAdapter(contestUpcoming2);
+                                    contestRv.setAdapter(contestUpcoming2);
 
-                                contestUpcoming2.notifyDataSetChanged();
+                                    contestUpcoming2.notifyDataSetChanged();
+                                }
                                 flag3 = true;
 
                             }
@@ -737,12 +757,17 @@
 
 
                     } else {
-                        contestUpcoming2 = new AdapterMainFeedContest(UpcomingContestActivity.this, contestlist4);
-                        contestUpcoming2.setHasStableIds(true);
+                        if(contestlist4.size()!=0) {
+
+                            contestRv.setVisibility(View.VISIBLE);
+
+                            contestUpcoming2 = new AdapterMainFeedContest(UpcomingContestActivity.this, contestlist4);
+                            contestUpcoming2.setHasStableIds(true);
 
-                        contestRv.setAdapter(contestUpcoming2);
+                            contestRv.setAdapter(contestUpcoming2);
 
-                        contestUpcoming2.notifyDataSetChanged();
+                            contestUpcoming2.notifyDataSetChanged();
+                        }
                         flag3 = true;
                     }
                 }
Index: app/src/main/java/com/orion/orion/NotificationActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.orion.orion;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.appcompat.app.AlertDialog;\r\nimport androidx.appcompat.app.AppCompatActivity;\r\nimport androidx.recyclerview.widget.LinearLayoutManager;\r\nimport androidx.recyclerview.widget.RecyclerView;\r\n\r\nimport android.content.Context;\r\nimport android.content.SharedPreferences;\r\nimport android.os.Bundle;\r\nimport android.util.Log;\r\nimport android.view.Menu;\r\nimport android.view.MenuItem;\r\nimport android.view.View;\r\nimport android.widget.ImageView;\r\nimport android.widget.TextView;\r\n\r\nimport com.google.firebase.auth.FirebaseAuth;\r\nimport com.google.firebase.auth.FirebaseUser;\r\nimport com.google.firebase.database.DataSnapshot;\r\nimport com.google.firebase.database.DatabaseError;\r\nimport com.google.firebase.database.DatabaseReference;\r\nimport com.google.firebase.database.FirebaseDatabase;\r\nimport com.google.firebase.database.ValueEventListener;\r\nimport com.google.gson.Gson;\r\nimport com.google.gson.reflect.TypeToken;\r\nimport com.ittianyu.bottomnavigationviewex.BottomNavigationViewEx;\r\nimport com.orion.orion.Adapters.AdapterNotification2;\r\nimport com.orion.orion.models.Notification;\r\nimport com.orion.orion.util.BottomNaavigationViewHelper;\r\n\r\nimport java.lang.reflect.Type;\r\nimport java.util.ArrayList;\r\nimport java.util.Collections;\r\n\r\nimport static java.security.AccessController.getContext;\r\n\r\npublic class NotificationActivity extends AppCompatActivity {\r\n    private static final String TAG = \"mediafragment\";\r\n    private static final int ACTIVITY_NUM = 3;\r\n\r\n    private Context mContext;\r\n\r\n    RecyclerView notificationRv;\r\n    private TextView clearNotification;\r\n    private int mResults;\r\n\r\n    private FirebaseAuth fAuth;\r\n    private ArrayList<Notification> notifyList;\r\n    private AdapterNotification2 adapterNotification2;\r\n    int x = 0;\r\n    private ArrayList<Notification> paginatedNotifications;\r\n    ImageView emptyNotification;\r\n    //    SP\r\n    Gson gson;\r\n    SharedPreferences sp;\r\n\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        setContentView(R.layout.activity_notification2);\r\n        mContext = NotificationActivity.this;\r\n        notificationRv = findViewById(R.id.recycler_view);\r\n        clearNotification = findViewById(R.id.clearNotification);\r\n        emptyNotification = findViewById(R.id.emptyNotification);\r\n        setupBottomNavigationView();\r\n        Log.d(TAG, \" context\"+this+\"  \"+getContext()+\"  \"+getApplicationContext());\r\n\r\n        //          Initialize SharedPreference variables\r\n        sp = mContext.getSharedPreferences(\"shared preferences\", Context.MODE_PRIVATE);\r\n        gson = new Gson();\r\n        notificationRv.setHasFixedSize(true);\r\n        LinearLayoutManager linearLayoutManager = new LinearLayoutManager(mContext);\r\n        notificationRv.setLayoutManager(linearLayoutManager);\r\n        notifyList = new ArrayList<>();\r\n        notificationRv.addOnScrollListener(new RecyclerView.OnScrollListener() {\r\n            @Override\r\n            public void onScrollStateChanged(RecyclerView recyclerView, int newState) {\r\n                super.onScrollStateChanged(recyclerView, newState);\r\n                if (!recyclerView.canScrollVertically(1) && newState == RecyclerView.SCROLL_STATE_IDLE)\r\n                    displayMoreNotification();\r\n            }\r\n        });\r\n        fAuth = FirebaseAuth.getInstance();\r\n        getNotifcationFromSP();\r\n        clearNotification.setOnClickListener(v -> {\r\n            AlertDialog.Builder builder = new AlertDialog.Builder(mContext);\r\n            builder.setMessage(\"You want to delete all the notification\")\r\n                    .setTitle(\"Are you sure?\")\r\n                    .setCancelable(false)\r\n                    .setPositiveButton(\"Yes\", (dialog, id) -> {\r\n                        notifyList.clear();\r\n                        if (paginatedNotifications != null) paginatedNotifications.clear();\r\n                        SharedPreferences.Editor editor = sp.edit().remove(\"nl\");\r\n                        editor.apply();\r\n                        if (adapterNotification2 != null)\r\n                            adapterNotification2.notifyDataSetChanged();\r\n                        FirebaseUser user = fAuth.getCurrentUser();\r\n                        DatabaseReference reference = FirebaseDatabase.getInstance().getReference(getString(R.string.dbname_users))\r\n                                .child(user.getUid())\r\n                                .child(getString(R.string.field_Notifications));\r\n                        reference.removeValue();\r\n                        //delete from database here then refresh for u naman\r\n                        displayMoreNotification();\r\n                    })\r\n                    .setNegativeButton(\"No\", (dialog, id) -> dialog.cancel())\r\n                    .show();\r\n        });\r\n    }\r\n\r\n    //  fetching filtered notificationList  from SharedPreferences\r\n    private void getNotifcationFromSP() {\r\n        String json = sp.getString(\"nl\", null);\r\n        Type type = new TypeToken<ArrayList<Notification>>() {\r\n        }.getType();\r\n        notifyList = gson.fromJson(json, type);\r\n        if (notifyList == null || notifyList.size() == 0) {    //        if no arrayList is present\r\n            notifyList = new ArrayList<>();\r\n            readNotification();  //            make new Arraylist\r\n        } else checkUpdate();\r\n\r\n    }\r\n\r\n    private void checkUpdate() {\r\n        DatabaseReference refer = FirebaseDatabase.getInstance().getReference(getString(R.string.dbname_users));\r\n        refer.child(FirebaseAuth.getInstance().getCurrentUser().getUid())\r\n                .child(getString(R.string.field_Notifications))\r\n                .orderByKey()\r\n                .limitToLast(1)\r\n                .addValueEventListener(new ValueEventListener() {\r\n                    @Override\r\n                    public void onDataChange(@NonNull DataSnapshot snapshot) {\r\n                        for (DataSnapshot snapshot1 : snapshot.getChildren()) {\r\n                            if (snapshot1.exists() && notifyList.size() != 0) {\r\n                                if (notifyList == null || notifyList.get(0).getTim().equals(snapshot1.getKey()))\r\n                                    displayNotification();\r\n                                else updateNotificationList();\r\n                            }\r\n                            displayNotification();\r\n                        }\r\n                    }\r\n\r\n                    @Override\r\n                    public void onCancelled(@NonNull DatabaseError error) {\r\n\r\n                    }\r\n                });\r\n    }\r\n\r\n    private void updateNotificationList() {\r\n        Collections.reverse(notifyList);\r\n        DatabaseReference refer = FirebaseDatabase.getInstance().getReference(getString(R.string.dbname_users));\r\n        refer.child(FirebaseAuth.getInstance().getCurrentUser().getUid())\r\n                .child(getString(R.string.field_Notifications))\r\n                .orderByKey()\r\n                .startAt(notifyList.get(notifyList.size() - 1).getTim())\r\n                .addListenerForSingleValueEvent(new ValueEventListener() {\r\n                    @Override\r\n                    public void onDataChange(@NonNull DataSnapshot snapshot) {\r\n                        if (snapshot.exists()) {\r\n                            int x = 0;\r\n                            for (DataSnapshot snapshot1 : snapshot.getChildren()) {\r\n                                x++;\r\n                                if (x == 1) continue;\r\n                                Notification notification = snapshot1.getValue(Notification.class);\r\n                                notifyList.add(notification);\r\n                            }\r\n                            Collections.reverse(notifyList);\r\n                            //                        Add newly Created ArrayList to Shared Preferences\r\n                            SharedPreferences.Editor editor = sp.edit();\r\n                            String json = gson.toJson(notifyList);\r\n                            editor.putString(\"nl\", json);\r\n                            editor.apply();\r\n                            displayNotification();\r\n                        } else readNotification();\r\n                    }\r\n\r\n                    @Override\r\n                    public void onCancelled(@NonNull DatabaseError error) {\r\n\r\n                    }\r\n                });\r\n    }\r\n\r\n    private void readNotification() {\r\n        FirebaseUser user = fAuth.getCurrentUser();\r\n        DatabaseReference reference = FirebaseDatabase.getInstance().getReference(getString(R.string.dbname_users))\r\n                .child(user.getUid()).child(getString(R.string.field_Notifications));\r\n        reference.addValueEventListener(new ValueEventListener() {\r\n            @Override\r\n            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {\r\n                notifyList.clear();\r\n                int x = 0;\r\n                for (DataSnapshot snapshot : dataSnapshot.getChildren()) {\r\n                    x++;\r\n                    Notification notification = snapshot.getValue(Notification.class);\r\n                    notifyList.add(notification);\r\n                    if (x == dataSnapshot.getChildrenCount()) {\r\n                        Collections.reverse(notifyList);\r\n//                        Add newly Created ArrayList to Shared Preferences\r\n                        SharedPreferences.Editor editor = sp.edit();\r\n                        String json = gson.toJson(notifyList);\r\n                        editor.putString(\"nl\", json);\r\n                        editor.apply();\r\n                        displayNotification();\r\n                    }\r\n                }\r\n            }\r\n            @Override\r\n            public void onCancelled(@NonNull DatabaseError databaseError) {\r\n\r\n            }\r\n        });\r\n    }\r\n\r\n    private void displayNotification() {\r\n        paginatedNotifications = new ArrayList<>();\r\n        if (notifyList != null) {\r\n\r\n            try {\r\n                int iteration = notifyList.size();\r\n                if (iteration == 0) emptyNotification.setVisibility(View.VISIBLE);\r\n                else {\r\n                    emptyNotification.setVisibility(View.GONE);\r\n                    if (iteration > 10) iteration = 10;\r\n                    mResults = 10;\r\n                    for (int i = 0; i < iteration; i++)\r\n                        paginatedNotifications.add(notifyList.get(i));\r\n                    adapterNotification2 = new AdapterNotification2(mContext, paginatedNotifications);\r\n                    adapterNotification2.setHasStableIds(true);\r\n                    notificationRv.setAdapter(adapterNotification2);\r\n                    x++;\r\n                }\r\n            } catch (NullPointerException e) {\r\n                Log.e(TAG, \"Null pointer exception\" + e.getMessage());\r\n            } catch (IndexOutOfBoundsException e) {\r\n                Log.e(TAG, \"index out of bound\" + e.getMessage());\r\n            }\r\n        }\r\n    }\r\n\r\n    public void displayMoreNotification() {\r\n        try {\r\n            if (notifyList.size() > mResults && notifyList.size() > 0) {\r\n                int iterations;\r\n                if (notifyList.size() > (mResults + 20)) iterations = 20;\r\n                else iterations = notifyList.size() - mResults;\r\n                for (int i = mResults; i < mResults + iterations; i++)\r\n                    paginatedNotifications.add(notifyList.get(i));\r\n                notificationRv.post(() -> adapterNotification2.notifyItemRangeInserted(mResults, iterations));\r\n                mResults = mResults + iterations;\r\n            }\r\n        } catch (NullPointerException e) {\r\n            Log.e(TAG, \"Null pointer exception\" + e.getMessage());\r\n        } catch (IndexOutOfBoundsException e) {\r\n            Log.e(TAG, \"index out of bound\" + e.getMessage());\r\n        }\r\n    }\r\n    private void setupBottomNavigationView() {\r\n        Log.d(TAG, \" setupBottomNavigationView:setting up BottomNavigationView\");\r\n        BottomNavigationViewEx bottomNavigationViewEx = findViewById(R.id.BottomNavViewBar);\r\n        BottomNaavigationViewHelper.setupBottomNavigationView(bottomNavigationViewEx, this);\r\n        BottomNaavigationViewHelper.enableNavigation(NotificationActivity.this, this, bottomNavigationViewEx);\r\n        Menu menu = bottomNavigationViewEx.getMenu();\r\n        MenuItem menuItem = menu.getItem(ACTIVITY_NUM);\r\n        menuItem.setChecked(true);\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/orion/orion/NotificationActivity.java	(revision cf7597ca1ff027f96fc145e942172638654ff2b2)
+++ app/src/main/java/com/orion/orion/NotificationActivity.java	(date 1623647160319)
@@ -9,12 +9,14 @@
 import android.content.Context;
 import android.content.SharedPreferences;
 import android.os.Bundle;
+import android.os.Handler;
 import android.util.Log;
 import android.view.Menu;
 import android.view.MenuItem;
 import android.view.View;
 import android.widget.ImageView;
 import android.widget.TextView;
+import android.widget.Toast;
 
 import com.google.firebase.auth.FirebaseAuth;
 import com.google.firebase.auth.FirebaseUser;
@@ -266,4 +268,24 @@
         MenuItem menuItem = menu.getItem(ACTIVITY_NUM);
         menuItem.setChecked(true);
     }
+    private Boolean exit = false;
+
+    @Override
+    public void onBackPressed() {
+        if (exit) {
+            moveTaskToBack(true); // finish activity
+        } else {
+            Toast.makeText(this, "Press Back again to Exit.",
+                    Toast.LENGTH_SHORT).show();
+            exit = true;
+            new Handler().postDelayed(new Runnable() {
+                @Override
+                public void run() {
+                    exit = false;
+                }
+            }, 2 * 1000);
+
+        }
+
+    }
 }
\ No newline at end of file
Index: .idea/shelf/Uncommitted_changes_before_Update_at_12-06-2021_09_30__Default_Changelist_.xml
===================================================================
--- .idea/shelf/Uncommitted_changes_before_Update_at_12-06-2021_09_30__Default_Changelist_.xml	(revision cf7597ca1ff027f96fc145e942172638654ff2b2)
+++ .idea/shelf/Uncommitted_changes_before_Update_at_12-06-2021_09_30__Default_Changelist_.xml	(revision cf7597ca1ff027f96fc145e942172638654ff2b2)
@@ -1,4 +0,0 @@
-<changelist name="Uncommitted_changes_before_Update_at_12-06-2021_09_30_[Default_Changelist]" date="1623470493033" recycled="true" deleted="true">
-  <option name="PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_12-06-2021_09_30_[Default_Changelist]/shelved.patch" />
-  <option name="DESCRIPTION" value="Uncommitted changes before Update at 12-06-2021 09:30 [Default Changelist]" />
-</changelist>
\ No newline at end of file
Index: .idea/shelf/Uncommitted_changes_before_Update_at_12-06-2021_09_30_[Default_Changelist]/shelved.patch
===================================================================
--- .idea/shelf/Uncommitted_changes_before_Update_at_12-06-2021_09_30_[Default_Changelist]/shelved.patch	(revision cf7597ca1ff027f96fc145e942172638654ff2b2)
+++ .idea/shelf/Uncommitted_changes_before_Update_at_12-06-2021_09_30_[Default_Changelist]/shelved.patch	(revision cf7597ca1ff027f96fc145e942172638654ff2b2)
@@ -1,108 +0,0 @@
-Index: app/src/main/res/layout/activity_created.xml
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<RelativeLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\r\n    android:layout_width=\"match_parent\"\r\n    android:background=\"@color/white\"\r\n    android:layout_height=\"match_parent\"\r\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\">\r\n\r\n    <include layout=\"@layout/snippet_created_contest_bar\"\r\n        android:id=\"@+id/top\"/>\r\n    <androidx.swiperefreshlayout.widget.SwipeRefreshLayout\r\n        android:layout_width=\"match_parent\"\r\n        android:layout_height=\"wrap_content\"\r\n        android:layout_below=\"@+id/top\"\r\n        android:id=\"@+id/contest_refresh\">\r\n        <RelativeLayout\r\n            android:layout_width=\"match_parent\"\r\n            android:layout_height=\"match_parent\">\r\n\r\n\r\n            <androidx.recyclerview.widget.RecyclerView\r\n                android:layout_width=\"match_parent\"\r\n                android:layout_height=\"wrap_content\"\r\n                android:id=\"@+id/recycler_view3\">\r\n\r\n            </androidx.recyclerview.widget.RecyclerView>\r\n            <ProgressBar\r\n                android:id=\"@+id/pro2\"\r\n                style=\"?android:attr/progressBarStyle\"\r\n                android:layout_width=\"25dp\"\r\n                android:layout_height=\"25dp\"\r\n                android:layout_alignParentBottom=\"true\"\r\n                android:layout_centerHorizontal=\"true\"\r\n                android:background=\"@android:color/transparent\"\r\n                android:visibility=\"visible\" />\r\n\r\n        </RelativeLayout>\r\n    </androidx.swiperefreshlayout.widget.SwipeRefreshLayout>\r\n    <com.google.android.material.floatingactionbutton.FloatingActionButton\r\n        android:layout_height=\"wrap_content\"\r\n        android:layout_width=\"wrap_content\"\r\n        android:src=\"@drawable/ic_add\"\r\n        android:elevation=\"6dp\"\r\n        app:backgroundTint=\"@color/colorPrimary\"\r\n        app:fabSize=\"normal\"\r\n        android:layout_margin=\"16dp\"\r\n        android:id=\"@+id/float_btn\"\r\n        android:layout_alignParentEnd=\"true\"\r\n        android:layout_alignParentBottom=\"true\"\r\n        android:layout_gravity=\"end|bottom\"\r\n        android:layout_alignParentRight=\"true\" />\r\n    <TextView\r\n        android:layout_width=\"wrap_content\"\r\n        android:layout_height=\"wrap_content\"\r\n        android:text=\"NO CONTEST CREATED\"\r\n        android:id=\"@+id/noPost\"\r\n        android:visibility=\"gone\"\r\n        android:gravity=\"center\"\r\n        android:layout_centerHorizontal=\"true\"\r\n        android:layout_centerVertical=\"true\"\r\n        android:textSize=\"18sp\"/>\r\n</RelativeLayout>
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
---- app/src/main/res/layout/activity_created.xml	(revision 4e043de0becf43388500d8aa8b5a8edfd23c3f2a)
-+++ app/src/main/res/layout/activity_created.xml	(date 1623166287448)
-@@ -1,6 +1,7 @@
- <?xml version="1.0" encoding="utf-8"?>
- <RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
-     android:layout_width="match_parent"
-+    xmlns:fab="http://schemas.android.com/tools"
-     android:background="@color/white"
-     android:layout_height="match_parent"
-     xmlns:app="http://schemas.android.com/apk/res-auto">
-@@ -35,19 +36,78 @@
- 
-         </RelativeLayout>
-     </androidx.swiperefreshlayout.widget.SwipeRefreshLayout>
--    <com.google.android.material.floatingactionbutton.FloatingActionButton
-+    <com.github.clans.fab.FloatingActionMenu
-+        android:id="@+id/menu"
-+        android:layout_width="wrap_content"
-         android:layout_height="wrap_content"
--        android:layout_width="wrap_content"
--        android:src="@drawable/ic_add"
--        android:elevation="6dp"
--        app:backgroundTint="@color/colorPrimary"
--        app:fabSize="normal"
--        android:layout_margin="16dp"
--        android:id="@+id/float_btn"
--        android:layout_alignParentEnd="true"
--        android:layout_alignParentBottom="true"
--        android:layout_gravity="end|bottom"
--        android:layout_alignParentRight="true" />
-+        android:layout_alignParentBottom="true"
-+        android:layout_alignParentEnd="true"
-+        android:layout_marginRight="10dp"
-+        android:layout_marginBottom="10dp"
-+        android:layout_marginLeft="10dp"
-+        fab:menu_fab_size="normal"
-+        app:menu_colorNormal="@color/colorPrimary"
-+        fab:menu_showShadow="true"
-+        fab:menu_shadowColor="#66000000"
-+        fab:menu_shadowRadius="4dp"
-+        fab:menu_shadowXOffset="1dp"
-+        fab:menu_shadowYOffset="3dp"
-+        fab:menu_colorPressed="#E75043"
-+        fab:menu_colorRipple="#99000000"
-+        fab:menu_animationDelayPerItem="50"
-+        fab:menu_icon="@drawable/fab_add"
-+        fab:menu_buttonSpacing="0dp"
-+        fab:menu_labels_margin="0dp"
-+        fab:menu_labels_showAnimation="@anim/fab_slide_in_from_right"
-+        fab:menu_labels_hideAnimation="@anim/fab_slide_out_to_right"
-+        fab:menu_labels_paddingTop="4dp"
-+        fab:menu_labels_paddingRight="8dp"
-+        fab:menu_labels_paddingBottom="4dp"
-+        fab:menu_labels_paddingLeft="8dp"
-+        fab:menu_labels_padding="8dp"
-+        fab:menu_labels_textColor="#000000"
-+        fab:menu_labels_textSize="14sp"
-+        fab:menu_labels_cornerRadius="3dp"
-+        fab:menu_labels_colorNormal="#333333"
-+        fab:menu_labels_colorPressed="#444444"
-+        fab:menu_labels_colorRipple="#66FFFFFF"
-+        fab:menu_labels_showShadow="true"
-+        fab:menu_labels_singleLine="false"
-+        fab:menu_labels_ellipsize="none"
-+        fab:menu_labels_maxLines="-1"
-+        fab:menu_labels_position="left"
-+        fab:menu_openDirection="up"
-+        fab:menu_backgroundColor="#706D6D"
-+        fab:menu_fab_label="your_label_here"
-+        fab:menu_fab_show_animation="@anim/my_show_animation"
-+        fab:menu_fab_hide_animation="@anim/my_hide_animation">
-+
-+        <com.github.clans.fab.FloatingActionButton
-+            android:id="@+id/menu_item"
-+            android:layout_width="wrap_content"
-+            android:layout_height="wrap_content"
-+            android:src="@drawable/ic_onlineevent"
-+            app:fab_colorNormal="@color/colorPrimary"
-+            fab:fab_size="mini"
-+            fab:fab_label="Menu item 1" />
-+
-+        <com.github.clans.fab.FloatingActionButton
-+            android:id="@+id/menu_item2"
-+            android:layout_width="wrap_content"
-+            android:layout_height="wrap_content"
-+            android:src="@drawable/ic_offline_event"
-+            app:fab_colorNormal="@color/colorPrimary"
-+            fab:fab_size="mini"
-+            fab:fab_label="Menu item 2" />
-+        <com.github.clans.fab.FloatingActionButton
-+            android:id="@+id/menu_item3"
-+            android:layout_width="wrap_content"
-+            android:layout_height="wrap_content"
-+            android:src="@drawable/ic_quizevent__1_"
-+            fab:fab_size="mini"
-+            app:fab_colorNormal="@color/colorPrimary"
-+            fab:fab_label="Menu item 2" />
-+    </com.github.clans.fab.FloatingActionMenu>
-     <TextView
-         android:layout_width="wrap_content"
-         android:layout_height="wrap_content"
Index: app/src/main/res/layout/activity_upcoming_contest.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<RelativeLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\r\n    android:layout_width=\"match_parent\"\r\n    android:layout_height=\"match_parent\"\r\n    xmlns:tools=\"http://schemas.android.com/tools\"\r\n    android:background=\"@color/white\"\r\n\r\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\">\r\n    <RelativeLayout\r\n        android:layout_width=\"match_parent\"\r\n        android:id=\"@+id/top\"\r\n        android:background=\"@color/black\"\r\n        android:layout_height=\"50dp\">\r\n        <TextView\r\n            android:layout_width=\"wrap_content\"\r\n            android:layout_height=\"wrap_content\"\r\n            android:text=\"Created\"\r\n            android:textSize=\"20sp\"\r\n            android:id=\"@+id/created\"\r\n            android:textAllCaps=\"true\"\r\n            android:gravity=\"center\"\r\n            android:layout_marginLeft=\"5dp\"\r\n            android:padding=\"3dp\"\r\n            android:background=\"@drawable/rectangular_border\"\r\n            android:layout_centerVertical=\"true\"\r\n            android:layout_alignParentLeft=\"true\"\r\n            android:fontFamily=\"@font/orion\"\r\n\r\n            android:textColor=\"@color/colorAccent\"/>\r\n        <TextView\r\n            android:layout_width=\"wrap_content\"\r\n            android:layout_height=\"wrap_content\"\r\n            android:text=\"Joined\"\r\n            android:id=\"@+id/joined\"\r\n            android:textSize=\"20sp\"\r\n            android:textAllCaps=\"true\"\r\n            android:gravity=\"center\"\r\n            android:background=\"@drawable/rectangular_border\"\r\n\r\n            android:fontFamily=\"@font/orion\"\r\n            android:layout_marginRight=\"5dp\"\r\n            android:padding=\"3dp\"\r\n            android:layout_centerVertical=\"true\"\r\n           android:layout_alignParentRight=\"true\"\r\n            android:textColor=\"@color/colorAccent\"/>\r\n        <TextView\r\n            android:layout_width=\"wrap_content\"\r\n            android:layout_height=\"wrap_content\"\r\n            android:text=\"ORION\"\r\n            android:textSize=\"40sp\"\r\n            android:gravity=\"center\"\r\n            android:layout_centerVertical=\"true\"\r\n            android:layout_centerHorizontal=\"true\"\r\n            android:fontFamily=\"@font/orion\"\r\n            android:textColor=\"@color/colorAccent\"/>\r\n    </RelativeLayout>\r\n    <androidx.swiperefreshlayout.widget.SwipeRefreshLayout\r\n        android:layout_width=\"match_parent\"\r\n        android:layout_height=\"wrap_content\"\r\n        android:layout_below=\"@+id/top\"\r\n        android:id=\"@+id/contest_refresh\">\r\n\r\n        <RelativeLayout\r\n            android:layout_width=\"match_parent\"\r\n            android:layout_height=\"wrap_content\">\r\n            <RelativeLayout\r\n                android:layout_width=\"match_parent\"\r\n                android:layout_height=\"wrap_content\"\r\n                android:visibility=\"visible\"\r\n\r\n                android:id=\"@+id/relparent\">\r\n\r\n                <RelativeLayout\r\n                    android:layout_width=\"match_parent\"\r\n                    android:background=\"@drawable/pink_round_button\"\r\n                    android:layout_height=\"wrap_content\">\r\n                    <androidx.recyclerview.widget.RecyclerView\r\n                        android:id=\"@+id/recyclerContest\"\r\n                        android:layout_width=\"match_parent\"\r\n                        android:layout_height=\"120dp\"\r\n                        android:nestedScrollingEnabled=\"false\"\r\n                        tools:listitem=\"@layout/layout_contest_item_small\"\r\n                        android:orientation=\"horizontal\"\r\n                        tools:itemCount=\"10\"\r\n                        android:background=\"@color/black\"\r\n                        app:layoutManager=\"androidx.recyclerview.widget.LinearLayoutManager\" />\r\n                    <LinearLayout\r\n                        android:layout_width=\"match_parent\"\r\n                        android:layout_height=\"wrap_content\"\r\n                        android:layout_below=\"@+id/recyclerContest\"\r\n\r\n                        android:gravity=\"center_horizontal\"\r\n                        android:layout_centerHorizontal=\"true\"\r\n                        android:orientation=\"horizontal\">\r\n\r\n                        <LinearLayout\r\n                            android:layout_width=\"wrap_content\"\r\n                            android:layout_height=\"wrap_content\"\r\n                            android:layout_marginTop=\"10dp\"\r\n                            android:layout_marginBottom=\"10dp\"\r\n\r\n                            android:orientation=\"vertical\">\r\n\r\n                            <TextView\r\n                                android:layout_width=\"wrap_content\"\r\n                                android:layout_height=\"wrap_content\"\r\n                                android:paddingLeft=\"10dp\"\r\n                                android:paddingRight=\"10dp\"\r\n                                android:layout_marginTop=\"5dp\"\r\n                                android:textStyle=\"bold\"\r\n\r\n                                android:id=\"@+id/domain\"\r\n                                android:text=\"Domain: \"\r\n                                android:textColor=\"@color/white\"\r\n                                />\r\n                            <TextView\r\n                                android:layout_width=\"wrap_content\"\r\n                                android:layout_height=\"wrap_content\"\r\n                                android:paddingLeft=\"10dp\"\r\n                                android:paddingRight=\"10dp\"\r\n                                android:layout_marginTop=\"5dp\"\r\n\r\n                                android:id=\"@+id/entryfee\"\r\n                                android:textStyle=\"bold\"\r\n                                android:text=\"Entry Fee: \"\r\n                                android:textColor=\"@color/white\"\r\n                                />\r\n\r\n                        </LinearLayout>\r\n\r\n                        <LinearLayout\r\n                            android:layout_width=\"wrap_content\"\r\n                            android:layout_height=\"wrap_content\"\r\n                            android:layout_centerHorizontal=\"true\"\r\n                            android:layout_marginTop=\"5dp\"\r\n\r\n                            android:layout_marginBottom=\"10dp\"\r\n                            android:orientation=\"vertical\">\r\n                            <Spinner\r\n                                android:layout_width=\"wrap_content\"\r\n                                android:background=\"@drawable/white_round_button\"\r\n                                android:layout_height=\"wrap_content\"\r\n                                android:entries=\"@array/domain2\"\r\n                                android:gravity=\"center\"\r\n                                android:layout_marginTop=\"5dp\"\r\n                                android:id=\"@+id/domainspinner\"\r\n                                />\r\n                            <Spinner\r\n                                android:layout_width=\"match_parent\"\r\n                                android:layout_height=\"wrap_content\"\r\n                                android:layout_marginTop=\"5dp\"\r\n                                android:entries=\"@array/entryfee2\"\r\n\r\n                                android:textAlignment=\"center\"\r\n\r\n                                android:background=\"@drawable/white_round_button\"\r\n                                android:id=\"@+id/entryfeeSpinner\"\r\n                                />\r\n                        </LinearLayout>\r\n                    </LinearLayout>\r\n                </RelativeLayout>\r\n\r\n            </RelativeLayout>\r\n\r\n            <EditText\r\n                android:layout_width=\"match_parent\"\r\n                android:id=\"@+id/search\"\r\n                android:layout_below=\"@id/relparent\"\r\n                android:layout_margin=\"10dp\"\r\n                android:hint=\"Enter contest Key\"\r\n                android:gravity=\"center\"\r\n                android:background=\"@drawable/rectangular_round_searchbar\"\r\n                android:layout_height=\"30dp\"/>\r\n            <RelativeLayout\r\n                android:layout_width=\"match_parent\"\r\n                android:layout_height=\"wrap_content\"\r\n                android:layout_below=\"@+id/search\"\r\n                android:background=\"#CCFFFFFF\"\r\n                android:id=\"@+id/drag\">\r\n\r\n                <ImageView\r\n                    android:id=\"@+id/filter\"\r\n                    android:layout_width=\"25dp\"\r\n                    android:layout_height=\"25dp\"\r\n                    android:layout_centerVertical=\"true\"\r\n                    android:layout_centerHorizontal=\"true\"\r\n                    android:layout_marginRight=\"10dp\"\r\n                    android:src=\"@drawable/ic_filter_black\"\r\n                    android:visibility=\"gone\" />\r\n                <ImageView\r\n                    android:layout_width=\"25dp\"\r\n                    android:layout_height=\"25dp\"\r\n                    android:visibility=\"visible\"\r\n                    android:layout_centerVertical=\"true\"\r\n                    android:layout_marginRight=\"10dp\"\r\n                    android:layout_marginEnd=\"10dp\"\r\n                    android:id=\"@+id/filteryellow\"\r\n                    android:src=\"@drawable/ic_filter_peach\"\r\n                    android:layout_centerHorizontal=\"true\"\r\n                    />\r\n\r\n\r\n                <ImageView\r\n                    android:layout_width=\"33dp\"\r\n                    android:layout_height=\"33dp\"\r\n                    android:layout_marginRight=\"10dp\"\r\n                    android:layout_marginEnd=\"10dp\"\r\n                    android:id=\"@+id/gridB\"\r\n                    android:src=\"@drawable/ic_grid_black\"\r\n                    />\r\n\r\n                <ImageView\r\n                    android:layout_width=\"27dp\"\r\n                    android:layout_height=\"27dp\"\r\n                    android:id=\"@+id/columnY\"\r\n                    android:layout_marginLeft=\"10dp\"\r\n                    android:layout_marginStart=\"10dp\"\r\n                    android:layout_centerVertical=\"true\"\r\n                    android:src=\"@drawable/ic_column_yellow\"\r\n                    android:layout_alignParentRight=\"true\"\r\n                    />\r\n                <ImageView\r\n                    android:layout_width=\"33dp\"\r\n                    android:layout_height=\"33dp\"\r\n                    android:id=\"@+id/gridY\"\r\n                    android:visibility=\"gone\"\r\n                    android:layout_marginRight=\"10dp\"\r\n                    android:layout_marginEnd=\"10dp\"\r\n                    android:src=\"@drawable/ic_grid_yellow\"\r\n                    />\r\n\r\n                <ImageView\r\n                    android:layout_width=\"27dp\"\r\n                    android:layout_height=\"27dp\"\r\n                    android:id=\"@+id/columnB\"\r\n                    android:visibility=\"gone\"\r\n                    android:layout_marginLeft=\"10dp\"\r\n                    android:layout_marginStart=\"10dp\"\r\n                    android:layout_centerVertical=\"true\"\r\n                    android:src=\"@drawable/ic_column_black\"\r\n                    android:layout_alignParentRight=\"true\"\r\n                    />\r\n            </RelativeLayout>\r\n\r\n\r\n\r\n            <androidx.recyclerview.widget.RecyclerView\r\n                android:layout_below=\"@+id/drag\"\r\n                android:layout_width=\"match_parent\"\r\n                android:layout_height=\"wrap_content\"\r\n                android:paddingBottom=\"50dp\"\r\n\r\n                android:id=\"@+id/recycler_view1\">\r\n\r\n            </androidx.recyclerview.widget.RecyclerView>\r\n            <ProgressBar\r\n                android:id=\"@+id/pro2\"\r\n                style=\"?android:attr/progressBarStyle\"\r\n                android:layout_width=\"25dp\"\r\n                android:layout_height=\"25dp\"\r\n                android:layout_alignParentBottom=\"true\"\r\n                android:layout_centerHorizontal=\"true\"\r\n                android:background=\"@android:color/transparent\"\r\n                android:visibility=\"visible\" />\r\n        </RelativeLayout>\r\n    </androidx.swiperefreshlayout.widget.SwipeRefreshLayout>\r\n    <LinearLayout\r\n        android:layout_width=\"match_parent\"\r\n        android:layout_height=\"match_parent\"\r\n        android:gravity=\"top|end\"\r\n        android:id=\"@+id/pro\"\r\n        android:background=\"#CC333232\"\r\n        android:visibility=\"gone\"\r\n        android:orientation=\"vertical\">\r\n        <RelativeLayout\r\n            android:layout_width=\"match_parent\"\r\n            android:layout_height=\"wrap_content\"\r\n            android:gravity=\"center_horizontal\"\r\n            android:layout_gravity=\"center_horizontal\">\r\n            <ImageView\r\n                android:layout_width=\"30dp\"\r\n                android:layout_height=\"30dp\"\r\n                android:id=\"@+id/cross\"\r\n                android:layout_centerHorizontal=\"true\"\r\n\r\n                android:src=\"@drawable/ic_white_cross\"\r\n                android:layout_margin=\"10dp\"/>\r\n\r\n            <androidx.recyclerview.widget.RecyclerView\r\n                android:layout_width=\"match_parent\"\r\n                android:layout_height=\"wrap_content\"\r\n                android:layout_centerVertical=\"true\"\r\n                android:layout_below=\"@+id/cross\"\r\n                android:id=\"@+id/recyclerKey\">\r\n\r\n            </androidx.recyclerview.widget.RecyclerView>\r\n        </RelativeLayout>\r\n    </LinearLayout>\r\n\r\n    <TextView\r\n        android:layout_width=\"wrap_content\"\r\n        android:layout_height=\"wrap_content\"\r\n        android:text=\"NO UPCOMING CONTEST\"\r\n        android:id=\"@+id/noPost\"\r\n        android:visibility=\"gone\"\r\n        android:gravity=\"center\"\r\n        android:layout_centerHorizontal=\"true\"\r\n        android:layout_centerVertical=\"true\"\r\n        android:textSize=\"18sp\"/>\r\n\r\n    <include layout=\"@layout/layout_bottom_navigation_view\" />\r\n\r\n</RelativeLayout>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/res/layout/activity_upcoming_contest.xml	(revision cf7597ca1ff027f96fc145e942172638654ff2b2)
+++ app/src/main/res/layout/activity_upcoming_contest.xml	(date 1623645914680)
@@ -73,11 +73,13 @@
                 <RelativeLayout
                     android:layout_width="match_parent"
                     android:background="@drawable/pink_round_button"
+                    android:gravity="center"
                     android:layout_height="wrap_content">
                     <androidx.recyclerview.widget.RecyclerView
                         android:id="@+id/recyclerContest"
                         android:layout_width="match_parent"
-                        android:layout_height="120dp"
+                        android:layout_height="130dp"
+                        android:visibility="gone"
                         android:nestedScrollingEnabled="false"
                         tools:listitem="@layout/layout_contest_item_small"
                         android:orientation="horizontal"
Index: app/src/main/res/layout/layout_contest_item_small.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<androidx.cardview.widget.CardView xmlns:android=\"http://schemas.android.com/apk/res/android\"\r\n    android:layout_width=\"wrap_content\"\r\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\r\n    app:cardBackgroundColor=\"@color/white\"\r\n    app:cardUseCompatPadding=\"true\"\r\n    app:cardCornerRadius=\"10dp\"\r\n    app:cardElevation=\"5dp\"\r\n    app:contentPadding=\"3dp\"\r\n    android:background=\"@drawable/grey_border_bottom\"\r\n    android:layout_height=\"120dp\">\r\n\r\n    <RelativeLayout\r\n        android:layout_width=\"100dp\"\r\n        android:layout_height=\"100dp\"\r\n        android:id=\"@+id/relLayout1\">\r\n    <ImageView\r\n        android:layout_width=\"100dp\"\r\n        android:layout_height=\"70dp\"\r\n        android:id=\"@+id/poster\"\r\n        />\r\n\r\n        <TextView\r\n            android:layout_width=\"wrap_content\"\r\n            android:layout_height=\"wrap_content\"\r\n            android:id=\"@+id/title\"\r\n            android:text=\"title\"\r\n            android:textAlignment=\"center\"\r\n            android:layout_below=\"@+id/poster\"\r\n            android:textColor=\"@color/black\"\r\n            android:textSize=\"10sp\"\r\n            android:layout_marginTop=\"2dp\"\r\n            android:layout_centerHorizontal=\"true\"\r\n            android:gravity=\"center_horizontal\" />\r\n        <TextView\r\n            android:layout_width=\"wrap_content\"\r\n            android:layout_height=\"wrap_content\"\r\n            android:text=\"\"\r\n            android:id=\"@+id/domain\"\r\n            android:textAlignment=\"center\"\r\n            android:layout_below=\"@+id/title\"\r\n            android:textColor=\"@color/grey\"\r\n            android:textSize=\"8sp\"\r\n            android:layout_centerHorizontal=\"true\"\r\n            android:gravity=\"center_horizontal\" />\r\n    </RelativeLayout>\r\n\r\n\r\n\r\n\r\n\r\n</androidx.cardview.widget.CardView>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/res/layout/layout_contest_item_small.xml	(revision cf7597ca1ff027f96fc145e942172638654ff2b2)
+++ app/src/main/res/layout/layout_contest_item_small.xml	(date 1623645914914)
@@ -8,7 +8,7 @@
     app:cardElevation="5dp"
     app:contentPadding="3dp"
     android:background="@drawable/grey_border_bottom"
-    android:layout_height="120dp">
+    android:layout_height="130dp">
 
     <RelativeLayout
         android:layout_width="100dp"
