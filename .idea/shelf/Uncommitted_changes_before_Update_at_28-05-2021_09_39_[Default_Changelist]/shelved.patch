Index: app/src/main/java/com/orion/orion/contest/joined/JoiningForm.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.orion.orion.contest.joined;\r\n\r\nimport android.annotation.TargetApi;\r\nimport android.app.AlertDialog;\r\nimport android.content.ContentUris;\r\nimport android.content.Context;\r\nimport android.content.DialogInterface;\r\nimport android.content.Intent;\r\nimport android.content.SharedPreferences;\r\nimport android.content.pm.PackageManager;\r\nimport android.database.Cursor;\r\nimport android.net.Uri;\r\nimport android.os.Bundle;\r\nimport android.os.Environment;\r\nimport android.provider.DocumentsContract;\r\nimport android.provider.MediaStore;\r\nimport android.util.Log;\r\nimport android.util.Patterns;\r\nimport android.view.View;\r\nimport android.view.WindowManager;\r\nimport android.widget.Button;\r\nimport android.widget.EditText;\r\nimport android.widget.ImageView;\r\nimport android.widget.LinearLayout;\r\nimport android.widget.TextView;\r\nimport android.widget.Toast;\r\n\r\nimport com.bumptech.glide.Glide;\r\nimport com.google.android.gms.tasks.OnSuccessListener;\r\nimport com.google.firebase.auth.FirebaseAuth;\r\nimport com.google.firebase.auth.FirebaseUser;\r\nimport com.google.firebase.database.DataSnapshot;\r\nimport com.google.firebase.database.DatabaseError;\r\nimport com.google.firebase.database.DatabaseReference;\r\nimport com.google.firebase.database.FirebaseDatabase;\r\nimport com.google.firebase.database.ValueEventListener;\r\nimport com.orion.orion.R;\r\nimport com.orion.orion.contest.contestMainActivity;\r\nimport com.orion.orion.login.LoginActivity;\r\nimport com.orion.orion.util.FirebaseMethods;\r\nimport com.orion.orion.util.Permissions;\r\nimport com.orion.orion.util.SNTPClient;\r\n\r\nimport java.io.File;\r\nimport java.text.ParseException;\r\nimport java.text.SimpleDateFormat;\r\nimport java.util.Date;\r\nimport java.util.HashMap;\r\nimport java.util.TimeZone;\r\nimport java.util.regex.Matcher;\r\nimport java.util.regex.Pattern;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.appcompat.app.AppCompatActivity;\r\nimport androidx.core.app.ActivityCompat;\r\n\r\nimport static com.orion.orion.profile.ProfileActivity.VERIFY_PERMISSION_REQUEST;\r\nimport static com.orion.orion.util.FileUtils.generateFileName;\r\nimport static com.orion.orion.util.FileUtils.getDocumentCacheDir;\r\nimport static com.orion.orion.util.FileUtils.getFileName;\r\nimport static com.orion.orion.util.FileUtils.saveFileFromUri;\r\n\r\npublic class JoiningForm extends AppCompatActivity {\r\n    private static final String TAG = \"JoiningForm\";\r\n    private final Context mContext = JoiningForm.this;\r\n\r\n    private TextView mTopBarTitle;\r\n    private EditText collegeEt, urlEt;\r\n    private ImageView idIv, submissionIv, backArrow;\r\n    TextView warn, decline;\r\n    private Button submitBtn, idBtn, mediaBtn;\r\n    boolean isKitKat;\r\n    private String imgurl = \"\";\r\n    private int selectedImage;\r\n    String mediaLink = \"\", idLink = \"\", userId, contestId;\r\n    private FirebaseMethods mFirebaseMethods;\r\n    private LinearLayout a1, a2, a3;\r\n    int imageCount = 0;\r\n    String openfor = \"\";\r\n    LinearLayout mediaLinear, imageLinear;\r\n    String type = \"\";\r\n    String p5 = \"p5\", p6 = \"p6\";\r\n    public LinearLayout linearLayout;\r\n    String isJuryOrHost = \"false\";\r\n\r\n    //firebase\r\n    private FirebaseAuth mAuth;\r\n    private FirebaseAuth.AuthStateListener mAuthListener;\r\n    private FirebaseUser mUser;\r\n    private DatabaseReference myRef;\r\n    private FirebaseDatabase mFirebaseDatabase;\r\n\r\n\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        setContentView(R.layout.activity_joining_form);\r\n        setupFirebaseAuth();\r\n        mTopBarTitle = findViewById(R.id.titleTopBar);\r\n        mTopBarTitle.setText(\"Joining Contest\");\r\n        mFirebaseMethods = new FirebaseMethods(JoiningForm.this);\r\n\r\n        Intent i = getIntent();\r\n        userId = i.getStringExtra(\"userId\");\r\n        contestId = i.getStringExtra(\"contestId\");\r\n        isJuryOrHost = i.getStringExtra(\"isJuryOrHost\");\r\n\r\n        collegeEt = findViewById(R.id.collegeEt);\r\n        urlEt = findViewById(R.id.url_submission);\r\n\r\n        submitBtn = findViewById(R.id.submitBtn);\r\n        idBtn = findViewById(R.id.selectid);\r\n        mediaBtn = findViewById(R.id.selectSubmission);\r\n\r\n        idIv = findViewById(R.id.idIv);\r\n        submissionIv = findViewById(R.id.submisionIv);\r\n        a1 = findViewById(R.id.college);\r\n        a2 = findViewById(R.id.collegeid);\r\n        warn = findViewById(R.id.warn);\r\n        imageLinear = findViewById(R.id.ImageLinearLayout);\r\n        mediaLinear = findViewById(R.id.mediaLinearLayout);\r\n        linearLayout = findViewById(R.id.pro);\r\n        backArrow = findViewById(R.id.backarrow);\r\n        decline = findViewById(R.id.decline);\r\n\r\n        backArrow.setOnClickListener(view -> finish());\r\n        DatabaseReference db = FirebaseDatabase.getInstance().getReference();\r\n        db.child(getString(R.string.dbname_contests))\r\n                .child(userId)\r\n                .child(getString(R.string.created_contest))\r\n                .child(contestId)\r\n                .addValueEventListener(new ValueEventListener() {\r\n                    @Override\r\n                    public void onDataChange(@NonNull DataSnapshot dataSnapshot) {\r\n                        com.orion.orion.models.CreateForm createForm = dataSnapshot.getValue(com.orion.orion.models.CreateForm.class);\r\n                        openfor = createForm.getOf();\r\n                        type = createForm.getFt();\r\n                        if (type.equals(\"Image\")) {\r\n                            imageLinear.setVisibility(View.VISIBLE);\r\n                            submissionIv.setVisibility(View.VISIBLE);\r\n                            mediaLinear.setVisibility(View.GONE);\r\n\r\n                        } else {\r\n                            mediaLinear.setVisibility(View.VISIBLE);\r\n                            imageLinear.setVisibility(View.GONE);\r\n                            submissionIv.setVisibility(View.GONE);\r\n\r\n                        }\r\n                        if (openfor.equals(\"Students\")) {\r\n                            a1.setVisibility(View.VISIBLE);\r\n                            a2.setVisibility(View.VISIBLE);\r\n                            idIv.setVisibility(View.VISIBLE);\r\n                        } else if (openfor.equals(\"All\")) {\r\n                            a1.setVisibility(View.GONE);\r\n                            a2.setVisibility(View.GONE);\r\n                            idIv.setVisibility(View.GONE);\r\n                        }\r\n                    }\r\n\r\n                    @Override\r\n                    public void onCancelled(@NonNull DatabaseError databaseError) {\r\n\r\n                    }\r\n                });\r\n\r\n        DatabaseReference ref = FirebaseDatabase.getInstance().getReference(getString(R.string.dbname_contestlist));\r\n        ref.child(contestId)\r\n                .child(getString(R.string.field_Participant_List))\r\n                .child(FirebaseAuth.getInstance().getCurrentUser().getUid())\r\n                .addListenerForSingleValueEvent(new ValueEventListener() {\r\n                    @Override\r\n                    public void onDataChange(@NonNull DataSnapshot dataSnapshot) {\r\n                        if (dataSnapshot.exists()) {\r\n                            submitBtn.setEnabled(false);\r\n                            warn.setVisibility(View.VISIBLE);\r\n                        } else {\r\n                            DatabaseReference ref1 = FirebaseDatabase.getInstance().getReference();\r\n                            ref1.child(mContext.getString(R.string.dbname_request))\r\n                                    .child(mContext.getString(R.string.dbname_participantList))\r\n                                    .child(contestId)\r\n                                    .orderByChild(getString(R.string.field_user_id))\r\n                                    .equalTo(FirebaseAuth.getInstance().getCurrentUser().getUid())\r\n                                    .addListenerForSingleValueEvent(new ValueEventListener() {\r\n                                        @Override\r\n                                        public void onDataChange(@NonNull DataSnapshot snapshot) {\r\n                                            if (snapshot.exists()) {\r\n                                                submitBtn.setEnabled(false);\r\n                                                warn.setVisibility(View.VISIBLE);\r\n                                            }\r\n                                        }\r\n\r\n                                        @Override\r\n                                        public void onCancelled(@NonNull DatabaseError error) {\r\n\r\n                                        }\r\n                                    });\r\n                        }\r\n                    }\r\n\r\n                    @Override\r\n                    public void onCancelled(@NonNull DatabaseError databaseError) {\r\n\r\n                    }\r\n                });\r\n\r\n        idBtn.setOnClickListener(v -> {\r\n            selectedImage = 1;\r\n            idBtn.setEnabled(true);\r\n            if (checkPermissionArray(Permissions.PERMISSIONS)) {\r\n                isKitKat = true;\r\n                Intent intent = new Intent(Intent.ACTION_OPEN_DOCUMENT);\r\n                intent.addCategory(Intent.CATEGORY_OPENABLE);\r\n                intent.setType(\"image/*\");\r\n                startActivityForResult(Intent.createChooser(intent, \"Select Picture\"), 1);\r\n            } else verifyPermission(Permissions.PERMISSIONS);\r\n        });\r\n        mediaBtn.setOnClickListener(v -> {\r\n            mediaBtn.setEnabled(true);\r\n            selectedImage = 2;\r\n            if (checkPermissionArray(Permissions.PERMISSIONS)) {\r\n                isKitKat = true;\r\n                Intent intent = new Intent(Intent.ACTION_OPEN_DOCUMENT);\r\n                intent.addCategory(Intent.CATEGORY_OPENABLE);\r\n                intent.setType(\"image/*\");\r\n                startActivityForResult(Intent.createChooser(intent, \"Select Picture\"), 1);\r\n            } else {\r\n                verifyPermission(Permissions.PERMISSIONS);\r\n            }\r\n\r\n        });\r\n        if (isJuryOrHost.equals(\"true\")) {\r\n            decline.setVisibility(View.VISIBLE);\r\n            submitBtn.setEnabled(false);\r\n        }\r\n        submitBtn.setOnClickListener(v -> {\r\n            AlertDialog.Builder builder = new AlertDialog.Builder(mContext);\r\n            builder.setTitle(\"Submit Joining Form\");\r\n            builder.setMessage(\"Are you sure you want to submit this CreateForm?\");\r\n\r\n//                set buttons\r\n            builder.setPositiveButton(\"Yes\", (dialog, which) -> {\r\n\r\n                if (mediaLink == null || idLink == null) {\r\n                    boolean ok = checkValidity();\r\n                    if (ok) {\r\n                        getWindow().setFlags(WindowManager.LayoutParams.FLAG_NOT_TOUCHABLE, WindowManager.LayoutParams.FLAG_NOT_TOUCHABLE);\r\n                        linearLayout.setVisibility(View.VISIBLE);\r\n                        SNTPClient.getDate(TimeZone.getTimeZone(\"Asia/Colombo\"), new SNTPClient.Listener() {\r\n                            @Override\r\n                            public void onTimeReceived(String rawDate) {\r\n                                // rawDate -> 2019-11-05T17:51:01+0530\r\n                                String str_date = rawDate;\r\n                                java.text.DateFormat formatter = new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ssZ\");\r\n                                Date date = null;\r\n                                try {\r\n                                    date = formatter.parse(str_date);\r\n                                } catch (ParseException e) {\r\n                                    e.printStackTrace();\r\n                                }\r\n                                String timeStamp = String.valueOf(date.getTime());\r\n                                DatabaseReference db1 = FirebaseDatabase.getInstance().getReference();\r\n                                String JoiningKey = db1.child(getString(R.string.dbname_contests))\r\n                                        .child(FirebaseAuth.getInstance().getCurrentUser().getUid())\r\n                                        .child(getString(R.string.joined_contest))\r\n                                        .push().getKey();\r\n                                if (!type.equals(\"Image\"))\r\n                                    mediaLink = urlEt.getText().toString();\r\n                                HashMap<String, Object> hashMap = new HashMap<>();\r\n                                hashMap.put(getString(R.string.field_college), collegeEt.getText().toString());\r\n                                hashMap.put(getString(R.string.field_status), \"waiting\");\r\n                                hashMap.put(getString(R.string.field_host), userId);\r\n                                hashMap.put(getString(R.string.field_contest_ID), contestId);\r\n                                hashMap.put(getString(R.string.field_timestamp), timeStamp);\r\n                                hashMap.put(getString(R.string.field_joining_ID), JoiningKey);\r\n                                hashMap.put(getString(R.string.field_id_link), idLink);\r\n                                hashMap.put(getString(R.string.field_media_link), mediaLink);\r\n                                hashMap.put(getString(R.string.field_user_id), FirebaseAuth.getInstance().getCurrentUser().getUid());\r\n                                db1.child(getString(R.string.dbname_contests))\r\n                                        .child(FirebaseAuth.getInstance().getCurrentUser().getUid())\r\n                                        .child(getString(R.string.joined_contest))\r\n                                        .child(JoiningKey)\r\n                                        .setValue(hashMap).addOnSuccessListener(aVoid -> {\r\n                                    DatabaseReference db2 = FirebaseDatabase.getInstance().getReference();\r\n                                    HashMap<String, Object> hashMap2 = new HashMap<>();\r\n                                    hashMap2.put(getString(R.string.field_timestamp), timeStamp);\r\n                                    hashMap2.put(getString(R.string.field_joining_ID), JoiningKey);\r\n                                    hashMap2.put(getString(R.string.field_total_score), 0);\r\n                                    hashMap2.put(getString(R.string.field_contest_ID), contestId);\r\n                                    hashMap2.put(getString(R.string.field_media_link), mediaLink);\r\n                                    hashMap2.put(getString(R.string.field_user_id), FirebaseAuth.getInstance().getCurrentUser().getUid());\r\n                                    db2.child(getString(R.string.dbname_request))\r\n                                            .child(getString(R.string.dbname_participantList))\r\n                                            .child(contestId)\r\n                                            .child(JoiningKey)\r\n                                            .setValue(hashMap2).addOnSuccessListener(aVoid1 -> {\r\n                                        int c = 0;\r\n                                        if (!idLink.equals(\"\")) {\r\n                                            mFirebaseMethods.uploadContest(imageCount, idLink, null, contestId, p5, JoiningKey);\r\n                                        } else {\r\n                                            c++;\r\n                                        }\r\n                                        if (type.equals(\"Image\")) {\r\n                                            mFirebaseMethods.uploadContest(imageCount, mediaLink, null, contestId, p6, JoiningKey);\r\n                                        } else {\r\n                                            c++;\r\n                                        }\r\n                                        if (c == 2) {\r\n                                            linearLayout.setVisibility(View.GONE);\r\n                                            getWindow().clearFlags(WindowManager.LayoutParams.FLAG_NOT_TOUCHABLE);\r\n                                            Intent i1 = new Intent(JoiningForm.this, contestMainActivity.class);\r\n                                            startActivity(i1);\r\n                                            Toast.makeText(JoiningForm.this, \"Your submission has been submitted.\", Toast.LENGTH_SHORT).show();\r\n                                        }\r\n                                    });\r\n                                });\r\n\r\n                                Log.e(SNTPClient.TAG, rawDate);\r\n\r\n                            }\r\n\r\n                            @Override\r\n                            public void onError(Exception ex) {\r\n                                Log.e(SNTPClient.TAG, ex.getMessage());\r\n                            }\r\n                        });\r\n\r\n\r\n                    } else {\r\n                        Toast.makeText(JoiningForm.this, \"Please fill all the entries correctly!\", Toast.LENGTH_SHORT).show();\r\n                    }\r\n                }\r\n            }).setNegativeButton(\"No\", (dialog, which) -> dialog.dismiss());\r\n            builder.create().show();\r\n\r\n        });\r\n\r\n\r\n    }\r\n\r\n    public boolean checkValidity() {\r\n        if (openfor.equals(\"Students\"))\r\n            if (collegeEt.getText().equals(\"\") || idIv.getDrawable() == null || collegeEt.getText() == null)\r\n                return false;\r\n            else if (type.equals(\"Image\")) {\r\n                if (submissionIv.getDrawable() == null) return false;\r\n            } else return isValidUrl(urlEt.getText().toString());\r\n        else if (type.equals(\"Image\")) {\r\n            return submissionIv.getDrawable() != null;\r\n        } else return isValidUrl(urlEt.getText().toString());\r\n        return true;\r\n    }\r\n\r\n    private boolean isValidUrl(String url) {\r\n        Pattern p = Patterns.WEB_URL;\r\n        Matcher m = p.matcher(url.toLowerCase());\r\n        return m.matches();\r\n    }\r\n\r\n    public void verifyPermission(String[] permissions) {\r\n        ActivityCompat.requestPermissions(\r\n                JoiningForm.this,\r\n                permissions,\r\n                VERIFY_PERMISSION_REQUEST\r\n        );\r\n    }\r\n\r\n    public boolean checkPermissionArray(String[] permissions) {\r\n\r\n        for (String check : permissions)\r\n            if (!checkPermissions(check)) return false;\r\n        return true;\r\n    }\r\n\r\n    public boolean checkPermissions(String permission) {\r\n\r\n        int permissionRequest = ActivityCompat.checkSelfPermission(JoiningForm.this, permission);\r\n        return permissionRequest == PackageManager.PERMISSION_GRANTED;\r\n    }\r\n\r\n    public static String getDataColumn(Context context, Uri uri, String selection, String[] selectionArgs) {\r\n        Cursor cursor = null;\r\n        final String column = \"_data\";\r\n        final String[] projection = {\r\n                column\r\n        };\r\n        try {\r\n            cursor = context.getContentResolver().query(uri, projection, selection, selectionArgs, null);\r\n            if (cursor != null && cursor.moveToFirst()) {\r\n                final int index = cursor.getColumnIndexOrThrow(column);\r\n                return cursor.getString(index);\r\n            }\r\n        } finally {\r\n            if (cursor != null) cursor.close();\r\n        }\r\n        return null;\r\n    }\r\n\r\n    public static boolean isExternalStorageDocument(Uri uri) {\r\n        return \"com.android.externalstorage.documents\".equals(uri.getAuthority());\r\n    }\r\n\r\n    public static boolean isDownloadsDocument(Uri uri) {\r\n        return \"com.android.providers.downloads.documents\".equals(uri.getAuthority());\r\n    }\r\n\r\n    public static boolean isMediaDocument(Uri uri) {\r\n        return \"com.android.providers.media.documents\".equals(uri.getAuthority());\r\n    }\r\n\r\n    public static boolean isGooglePhotosUri(Uri uri) {\r\n        return \"com.google.android.apps.photos.content\".equals(uri.getAuthority());\r\n    }\r\n\r\n    public static String getPathFromUri(final Context context, final Uri uri) {\r\n        // DocumentProvider\r\n        if (DocumentsContract.isDocumentUri(context, uri)) {\r\n            // ExternalStorageProvider\r\n            if (isExternalStorageDocument(uri)) {\r\n                final String docId = DocumentsContract.getDocumentId(uri);\r\n                final String[] split = docId.split(\":\");\r\n                final String type = split[0];\r\n                if (\"primary\".equalsIgnoreCase(type))\r\n                    return Environment.getExternalStorageDirectory() + \"/\" + split[1];\r\n                // TODO handle non-primary volumes\r\n            }\r\n            // DownloadsProvider\r\n            else if (isDownloadsDocument(uri)) {\r\n                final String id = DocumentsContract.getDocumentId(uri);\r\n                if (id != null && id.startsWith(\"raw:\")) {\r\n                    return id.substring(4);\r\n                }\r\n                String[] contentUriPrefixesToTry = new String[]{\r\n                        \"content://downloads/public_downloads\",\r\n                        \"content://downloads/my_downloads\"\r\n                };\r\n                for (String contentUriPrefix : contentUriPrefixesToTry) {\r\n                    Uri contentUri = ContentUris.withAppendedId(Uri.parse(contentUriPrefix), Long.valueOf(id));\r\n                    try {\r\n                        String path = getDataColumn(context, contentUri, null, null);\r\n                        if (path != null) {\r\n                            return path;\r\n                        }\r\n                    } catch (Exception e) {\r\n                    }\r\n                }\r\n\r\n                // path could not be retrieved using ContentResolver, therefore copy file to accessible cache using streams\r\n                String fileName = getFileName(context, uri);\r\n                File cacheDir = getDocumentCacheDir(context);\r\n                File file = generateFileName(fileName, cacheDir);\r\n                String destinationPath = null;\r\n                if (file != null) {\r\n                    destinationPath = file.getAbsolutePath();\r\n                    saveFileFromUri(context, uri, destinationPath);\r\n                }\r\n                return destinationPath;\r\n            }\r\n            // MediaProvider\r\n            else if (isMediaDocument(uri)) {\r\n                final String docId = DocumentsContract.getDocumentId(uri);\r\n                final String[] split = docId.split(\":\");\r\n                final String type = split[0];\r\n                Uri contentUri = null;\r\n                if (\"image\".equals(type)) contentUri = MediaStore.Images.Media.EXTERNAL_CONTENT_URI;\r\n                else if (\"video\".equals(type))\r\n                    contentUri = MediaStore.Video.Media.EXTERNAL_CONTENT_URI;\r\n                else if (\"audio\".equals(type))\r\n                    contentUri = MediaStore.Audio.Media.EXTERNAL_CONTENT_URI;\r\n                final String selection = \"_id=?\";\r\n                final String[] selectionArgs = new String[]{\r\n                        split[1]\r\n                };\r\n                return getDataColumn(context, contentUri, selection, selectionArgs);\r\n            }\r\n        }\r\n        // MediaStore (and general)\r\n        else if (\"content\".equalsIgnoreCase(uri.getScheme())) {\r\n            // Return the remote address\r\n            if (isGooglePhotosUri(uri)) return uri.getLastPathSegment();\r\n            return getDataColumn(context, uri, null, null);\r\n        }\r\n        // File\r\n        else if (\"file\".equalsIgnoreCase(uri.getScheme()))\r\n            return uri.getPath();\r\n        else\r\n            Toast.makeText(context, \"Unable to upload image\", Toast.LENGTH_LONG).show();\r\n        return null;\r\n    }\r\n\r\n    @TargetApi(19)\r\n    @Override\r\n    public void onActivityResult(int requestCode, int resultCode, Intent data) {\r\n        mediaBtn.setEnabled(true);\r\n        String imgPath = \"\";\r\n        if (data != null && data.getData() != null && resultCode == RESULT_OK) {\r\n            Uri uri = data.getData();\r\n            if (uri != null) {\r\n                imgPath = getPathFromUri(mContext, uri);\r\n                if (imgPath != null) {\r\n                    Log.d(TAG, \"onActivityResult: path: \" + imgPath);\r\n                    Log.d(TAG, \"onActivityResult: uri: \" + uri);\r\n                    imgurl = imgPath;\r\n                    setImage();\r\n                }\r\n            }\r\n        }\r\n        super.onActivityResult(requestCode, resultCode, data);\r\n    }\r\n\r\n    private void setImage() {\r\n        if (selectedImage == 1) {\r\n            idLink = imgurl;\r\n            Glide.with(getApplicationContext())\r\n                    .load(idLink)\r\n                    .placeholder(R.drawable.load)\r\n                    .error(R.drawable.default_image2)\r\n                    .placeholder(R.drawable.load)\r\n                    .thumbnail(0.25f)\r\n                    .into(idIv);\r\n        }\r\n        if (selectedImage == 2) {\r\n            mediaLink = imgurl;\r\n            Glide.with(getApplicationContext())\r\n                    .load(mediaLink)\r\n                    .placeholder(R.drawable.load)\r\n                    .error(R.drawable.default_image2)\r\n                    .placeholder(R.drawable.load)\r\n                    .into(submissionIv);\r\n        }\r\n\r\n    }\r\n\r\n    private void setupFirebaseAuth() {\r\n        Log.d(TAG, \"setup FirebaseAuth: setting up firebase auth.\");\r\n        mAuth = FirebaseAuth.getInstance();\r\n\r\n        mFirebaseDatabase = FirebaseDatabase.getInstance();\r\n        myRef = mFirebaseDatabase.getReference();\r\n        mAuthListener = firebaseAuth -> {\r\n            mUser = firebaseAuth.getCurrentUser();\r\n            if (mUser == null) {\r\n                Log.d(TAG, \"onAuthStateChanged:signed_out\");\r\n                Log.d(TAG, \"onAuthStateChanged: navigating to login\");\r\n                SharedPreferences settings = getSharedPreferences(\"shared preferences\", Context.MODE_PRIVATE);\r\n                new AlertDialog.Builder(mContext)\r\n                        .setTitle(\"No user logon found\")\r\n                        .setMessage(\"We will be logging u out. \\n Please try to log in again\")\r\n                        .setPositiveButton(android.R.string.ok, (dialog, which) -> {\r\n                            Intent intent = new Intent(mContext, LoginActivity.class);\r\n                            intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_CLEAR_TASK | Intent.FLAG_ACTIVITY_CLEAR_TOP);\r\n                            settings.edit().clear().apply();\r\n                            startActivity(intent);\r\n                        })\r\n                        .show();\r\n            } else Log.d(TAG, \"onAuthStateChanged: signed_in:\" + mUser.getUid());\r\n        };\r\n    }\r\n\r\n    @Override\r\n    public void onStart() {\r\n        super.onStart();\r\n        mAuth.addAuthStateListener(mAuthListener);\r\n\r\n\r\n    }\r\n\r\n    @Override\r\n    public void onStop() {\r\n        super.onStop();\r\n        if (mAuthListener != null) {\r\n            mAuth.removeAuthStateListener(mAuthListener);\r\n        }\r\n    }\r\n\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/orion/orion/contest/joined/JoiningForm.java	(revision 6b464893edced951f8973637e8ff1f8a0b5017d4)
+++ app/src/main/java/com/orion/orion/contest/joined/JoiningForm.java	(date 1622174966319)
@@ -339,7 +339,7 @@
 
     public boolean checkValidity() {
         if (openfor.equals("Students"))
-            if (collegeEt.getText().equals("") || idIv.getDrawable() == null || collegeEt.getText() == null)
+            if (collegeEt.getText().equals("") || idIv.getDrawable() == null || collegeEt.getText() == null||idLink==null)
                 return false;
             else if (type.equals("Image")) {
                 if (submissionIv.getDrawable() == null) return false;
